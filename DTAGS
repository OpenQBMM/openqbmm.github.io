<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>aggregationKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/aggregationKernel/</path>
    <filename>a00401</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>abce02722c305557cb5730a9610ba0d51</anchor>
      <arglist>(aggregationKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a9dd0aa6f3fae81195037437f9fb2042f</anchor>
      <arglist>(aggregationKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aggregationKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/aggregationKernel/</path>
    <filename>a00404</filename>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>AGmomentTransportModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/AGmomentTransportModel/</path>
    <filename>a01358</filename>
  </compound>
  <compound kind="file">
    <name>AGmomentTransportModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/AGmomentTransportModel/</path>
    <filename>a01361</filename>
    <includes id="a00062" name="hermiteQuadrature.H" local="yes" imported="no">hermiteQuadrature.H</includes>
    <class kind="class">Foam::AGmomentTransportModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>Alopaeus.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/Alopaeus/</path>
    <filename>a00911</filename>
  </compound>
  <compound kind="file">
    <name>Alopaeus.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/Alopaeus/</path>
    <filename>a00914</filename>
    <includes id="a00920" name="bubbleBreakupKernel.H" local="yes" imported="no">bubbleBreakupKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::bubbleBreakupKernels::Alopaeus</class>
    <namespace>Foam</namespace>
    <namespace>Foam::bubbleBreakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>alphaAndDiameter.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/alphaAndDiameter/</path>
    <filename>a01760</filename>
  </compound>
  <compound kind="file">
    <name>alphaAndDiameter.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/alphaAndDiameter/</path>
    <filename>a01763</filename>
    <includes id="a01775" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::alphaAndDiameter</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>alphaAndDiameterVelocity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/alphaAndDiameterVelocity/</path>
    <filename>a01766</filename>
  </compound>
  <compound kind="file">
    <name>alphaAndDiameterVelocity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/alphaAndDiameterVelocity/</path>
    <filename>a01769</filename>
    <includes id="a01763" name="alphaAndDiameter.H" local="yes" imported="no">alphaAndDiameter.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::alphaAndDiameterVelocity</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>alphaEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a00851</filename>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>pPrimeByA</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>ac974804cd6be17cc0d3d5c8a14940739</anchor>
      <arglist>(h2f *fluid.pPrimeByA()())</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nAlphaCorr</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a992541488a3eb0f965464c6b182f7cac</anchor>
      <arglist>(readLabel(alphaControls.lookup(&quot;nAlphaCorr&quot;)))</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>alphaScheme</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>ab658679c743d866acef15b42f91683e9</anchor>
      <arglist>(&quot;div(&quot;+phi1.name()+&apos;,&apos;+alpha1.name()+&apos;)&apos;)</arglist>
    </member>
    <member kind="function">
      <type>alpha1</type>
      <name>correctBoundaryConditions</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>af4c6f19f97b7c7a76dad68a2941a025f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>phase1</type>
      <name>correctInflowOutflow</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a940f7de288e35632335a1c35fc543d88</anchor>
      <arglist>(alphaPhi1)</arglist>
    </member>
    <member kind="function">
      <type>fvScalarMatrix</type>
      <name>alpha1Eqn</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a090fef17afbe922a9e1e359cea911cbf</anchor>
      <arglist>(alpha1, alpha1.dimensions() *dimVol/dimTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>ae4fe5b9aff729225c9283511eb7794d3</anchor>
      <arglist>(pPrimeByA.valid())</arglist>
    </member>
    <member kind="function">
      <type>alpha1Eqn</type>
      <name>relax</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a4792301f47dbdbd2ae7751853edaa9f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>alpha1Eqn</type>
      <name>solve</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a5f3cee9e62d5eff69ee72a7aa1b5c767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>phase2</type>
      <name>correctInflowOutflow</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a89b175f73d0b91273e3a50c1fbd3b562</anchor>
      <arglist>(alphaPhi2)</arglist>
    </member>
    <member kind="variable">
      <type>const dictionary &amp;</type>
      <name>alphaControls</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a1cdccae96ef7ffb69336bab607a0d065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>else</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a0544c3fe466e421738dae463968b70ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>alphaPhi1</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a953e4177d4dbf69a83bfd3da7c6a2249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>alphaRhoPhi1</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a94dd275f73b7819e815eaa79e4499409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>alphaPhi2</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a961b576966e92b4c089d4c40b7e163e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>alphaRhoPhi2</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a69140a005525a93a60a8b742322a30af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alphaG0.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/alphaG0/</path>
    <filename>a01373</filename>
  </compound>
  <compound kind="file">
    <name>alphaG0.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/alphaG0/</path>
    <filename>a01376</filename>
    <includes id="a01382" name="fluxSplittingFunction.H" local="yes" imported="no">fluxSplittingFunction.H</includes>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunctions::alphaG0</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::fluxSplittingFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>anisotropicGaussian.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/</path>
    <filename>a01364</filename>
  </compound>
  <compound kind="file">
    <name>anisotropicGaussian.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/</path>
    <filename>a01367</filename>
    <includes id="a01451" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <includes id="a01520" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <includes id="a01361" name="AGmomentTransportModel.H" local="yes" imported="no">AGmomentTransportModel.H</includes>
    <includes id="a01403" name="kineticTheoryModel.H" local="yes" imported="no">kineticTheoryModel.H</includes>
    <includes id="a01382" name="fluxSplittingFunction.H" local="yes" imported="no">fluxSplittingFunction.H</includes>
    <class kind="class">Foam::kineticTheoryModels::anisotropicGaussian</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>anisotropicGaussianModels.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/</path>
    <filename>a01370</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/Antal/Antal.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/Antal/</path>
    <filename>a03204</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/Antal/Antal.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/Antal/</path>
    <filename>a03207</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/Antal/Antal.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/Antal/</path>
    <filename>a03210</filename>
    <class kind="class">Foam::wallLubricationModels::Antal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/Antal/Antal.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/Antal/</path>
    <filename>a03213</filename>
    <class kind="class">Foam::wallLubricationModels::Antal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/aspectRatioModel/aspectRatioModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a03216</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/aspectRatioModel/aspectRatioModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a03219</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/aspectRatioModel/aspectRatioModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a03222</filename>
    <class kind="class">Foam::aspectRatioModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/aspectRatioModel/aspectRatioModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a03225</filename>
    <class kind="class">Foam::aspectRatioModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>AUSMFlux.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/AUSMFlux/</path>
    <filename>a00800</filename>
  </compound>
  <compound kind="file">
    <name>AUSMFlux.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/AUSMFlux/</path>
    <filename>a00803</filename>
    <includes id="a00815" name="fluxFunction.H" local="yes" imported="no">fluxFunction.H</includes>
    <class kind="class">Foam::fluxFunctions::AUSM</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fluxFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>AUSMPlusFlux.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/AUSMPlusFlux/</path>
    <filename>a00806</filename>
  </compound>
  <compound kind="file">
    <name>AUSMPlusFlux.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/AUSMPlusFlux/</path>
    <filename>a00809</filename>
    <includes id="a00815" name="fluxFunction.H" local="yes" imported="no">fluxFunction.H</includes>
    <class kind="class">Foam::fluxFunctions::AUSMPlus</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fluxFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>AyaziShamlou.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/AyaziShamlou/</path>
    <filename>a00446</filename>
    <includes id="a00449" name="AyaziShamlou.H" local="yes" imported="no">AyaziShamlou.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>aee88bb613072a5f64915965fd870f306</anchor>
      <arglist>(AyaziShamlou, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>ae91cc006297638cdc5e7a12a87ce8e8d</anchor>
      <arglist>(breakupKernel, AyaziShamlou, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AyaziShamlou.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/AyaziShamlou/</path>
    <filename>a00449</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::AyaziShamlou</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>basicFieldMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/basicFieldMomentInversion/</path>
    <filename>a00029</filename>
    <includes id="a00032" name="basicFieldMomentInversion.H" local="yes" imported="no">basicFieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae421e805e1c811481923fc7b9556487b</anchor>
      <arglist>(basicFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>afb6d54b8864cf92eb887585f1fbd72b5</anchor>
      <arglist>(fieldMomentInversion, basicFieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basicFieldMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/basicFieldMomentInversion/</path>
    <filename>a00032</filename>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::basicFieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>basicVelocityFieldMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/basicVelocityFieldMomentInversion/</path>
    <filename>a00035</filename>
    <includes id="a00038" name="basicVelocityFieldMomentInversion.H" local="yes" imported="no">basicVelocityFieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ab79a491ad17cf94155478c12d011b70e</anchor>
      <arglist>(basicVelocityFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ac508fe993d44d4ca53bda35e1ea9d6d1</anchor>
      <arglist>(fieldMomentInversion, basicVelocityFieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basicVelocityFieldMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/basicVelocityFieldMomentInversion/</path>
    <filename>a00038</filename>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00341" name="multivariateMomentSet.H" local="yes" imported="no">multivariateMomentSet.H</includes>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <class kind="class">Foam::basicVelocityFieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>BeisheuvelBubblePressure.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/BeisheuvelBubblePressure/</path>
    <filename>a00926</filename>
  </compound>
  <compound kind="file">
    <name>BeisheuvelBubblePressure.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/BeisheuvelBubblePressure/</path>
    <filename>a00929</filename>
    <includes id="a00935" name="bubblePressureModel.H" local="yes" imported="no">bubblePressureModel.H</includes>
    <class kind="class">Foam::bubblePressureModels::Beisheuvel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::bubblePressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>betaEQMOM.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/beta/</path>
    <filename>a00278</filename>
    <includes id="a00281" name="betaEQMOM.H" local="yes" imported="no">betaEQMOM.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aba3b5bd4e77aefe9210dac8bc85eaf71</anchor>
      <arglist>(betaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a48cb1021f5b67b9795c0f17ac2d5e2a6</anchor>
      <arglist>(extendedMomentInversion, betaEQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>betaEQMOM.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/beta/</path>
    <filename>a00281</filename>
    <includes id="a00287" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::betaEQMOM</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>BGKCollision.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BGKCollision/</path>
    <filename>a00485</filename>
    <includes id="a00488" name="BGKCollision.H" local="yes" imported="no">BGKCollision.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ac7d1051df9c7c1b107014e002ea4ce79</anchor>
      <arglist>(BGKCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ab5c12c8451467e4c66586320b7e4ed59</anchor>
      <arglist>(collisionKernel, BGKCollision, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BGKCollision.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BGKCollision/</path>
    <filename>a00488</filename>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::BGKCollision</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <member kind="define">
      <type>#define</type>
      <name>defineMFunc</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>abb111e782db625a59c5e80aabea9add0</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>addMomentFunction1</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a843e579addf144f15913ed0c11387ff9</anchor>
      <arglist>(map, funcs, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>addMomentFunction2</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a964488f73f4c3853622733c6600682a1</anchor>
      <arglist>(map, funcs, i, j)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>addMomentFunction3</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a9e917f652e7bf0f531bbbf80661099af</anchor>
      <arglist>(map, funcs, i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>momentFuncHeader</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a44351df4694aa5b61fec9629ecbc6fad</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlendedInterfacialModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/</path>
    <filename>a01592</filename>
  </compound>
  <compound kind="file">
    <name>BlendedInterfacialModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/</path>
    <filename>a01595</filename>
    <includes id="a01601" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::BlendedInterfacialModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>blendingMethod.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/blendingMethod/</path>
    <filename>a01598</filename>
  </compound>
  <compound kind="file">
    <name>blendingMethod.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/blendingMethod/</path>
    <filename>a01601</filename>
    <class kind="class">Foam::blendingMethod</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>BoltzmannCollision.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BoltzmannCollision/</path>
    <filename>a00494</filename>
    <includes id="a00497" name="BoltzmannCollision.H" local="yes" imported="no">BoltzmannCollision.H</includes>
    <includes id="a00209" name="hyperbolicConditionalMomentInversion.H" local="yes" imported="no">hyperbolicConditionalMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a8918d0e80d260a177c14e1d838abf333</anchor>
      <arglist>(BoltzmannCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ae68d02a5eac8793df11ec21537713cd1</anchor>
      <arglist>(collisionKernel, BoltzmannCollision, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoltzmannCollision.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BoltzmannCollision/</path>
    <filename>a00497</filename>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::BoltzmannCollision</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <member kind="define">
      <type>#define</type>
      <name>defineIFuncs</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ac7973159990012e0ff7ad428ce26fef2</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>addIFunction1</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>af231c50716c2a61531921c2bf296da11</anchor>
      <arglist>(map, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>addIFunction2</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a1c446f5ae3f4493b9b0dcb85e34579cd</anchor>
      <arglist>(map, i, j)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>addIFunction3</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a2a07bfca7d78fd2693b1aa0d419da117</anchor>
      <arglist>(map, i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IFuncHeader</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a6ab19def0cc81787b158aca794a1c4ad</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IxFuncHeader</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>abd2e2dafa5e8aab31c0e2ad9a84df88a</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IyFuncHeader</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>af8680754937ba296e1f80631764b1b44</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IzFuncHeader</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a01bd3cd205abec7cf7f93beda2e10dc7</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>breakupKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/breakupKernel/</path>
    <filename>a00452</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>ab205061f0523b0c0145ab52cb5a15fa7</anchor>
      <arglist>(breakupKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a226d16ce92fe729b204a751b4b002599</anchor>
      <arglist>(breakupKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>breakupKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/breakupKernel/</path>
    <filename>a00455</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>Brownian.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/Brownian/</path>
    <filename>a00410</filename>
    <includes id="a00413" name="Brownian.H" local="yes" imported="no">Brownian.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a076221bfaf795356aff635f898ab8962</anchor>
      <arglist>(Brownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a4c6c4b45a7436ec7f10b0bcd7b9d3a75</anchor>
      <arglist>(aggregationKernel, Brownian, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Brownian.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/Brownian/</path>
    <filename>a00413</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::Brownian</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>bubbleBreakupKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/bubbleBreakupKernel/</path>
    <filename>a00917</filename>
  </compound>
  <compound kind="file">
    <name>bubbleBreakupKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/bubbleBreakupKernel/</path>
    <filename>a00920</filename>
    <class kind="class">Foam::bubbleBreakupKernel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>bubblePressureModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/bubblePressureModel/</path>
    <filename>a00932</filename>
  </compound>
  <compound kind="file">
    <name>bubblePressureModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/bubblePressureModel/</path>
    <filename>a00935</filename>
    <class kind="class">Foam::bubblePressureModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00716</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Burns/Burns.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Burns/</path>
    <filename>a03228</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Burns/Burns.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Burns/</path>
    <filename>a03231</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Burns/Burns.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Burns/</path>
    <filename>a03234</filename>
    <class kind="class">Foam::turbulentDispersionModels::Burns</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Burns/Burns.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Burns/</path>
    <filename>a03237</filename>
    <class kind="class">Foam::turbulentDispersionModels::Burns</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>ButcherTable.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/ButcherTable/</path>
    <filename>a00734</filename>
  </compound>
  <compound kind="file">
    <name>ButcherTable.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/ButcherTable/</path>
    <filename>a00737</filename>
    <class kind="class">Foam::ButcherTable</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>CarnahanStarlingRadial.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/CarnahanStarling/</path>
    <filename>a01502</filename>
  </compound>
  <compound kind="file">
    <name>CarnahanStarlingRadial.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/CarnahanStarling/</path>
    <filename>a01505</filename>
    <includes id="a01520" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::radialModels::CarnahanStarling</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
  </compound>
  <compound kind="file">
    <name>ChestersEfficiency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/Chesters/</path>
    <filename>a00947</filename>
  </compound>
  <compound kind="file">
    <name>ChestersEfficiency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/Chesters/</path>
    <filename>a00950</filename>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceEfficiencyKernels::Chesters</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>coalescenceEfficiencyKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/coalescenceEfficiencyKernel/</path>
    <filename>a00953</filename>
  </compound>
  <compound kind="file">
    <name>coalescenceEfficiencyKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/coalescenceEfficiencyKernel/</path>
    <filename>a00956</filename>
    <class kind="class">Foam::coalescenceEfficiencyKernel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>coalescenceFrequencyKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/coalescenceFrequencyKernel/</path>
    <filename>a00992</filename>
  </compound>
  <compound kind="file">
    <name>coalescenceFrequencyKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/coalescenceFrequencyKernel/</path>
    <filename>a00995</filename>
    <class kind="class">Foam::coalescenceFrequencyKernel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>coalescenceKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/</path>
    <filename>a01019</filename>
  </compound>
  <compound kind="file">
    <name>coalescenceKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/</path>
    <filename>a01022</filename>
    <includes id="a00995" name="coalescenceFrequencyKernel.H" local="yes" imported="no">coalescenceFrequencyKernel.H</includes>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <class kind="class">Foam::coalescenceKernel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>collisionKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/collisionKernel/</path>
    <filename>a00512</filename>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a87291bb07eaec7c8c8bddfe089ba5adb</anchor>
      <arglist>(collisionKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a2c6204605aea6f0bf0de943e30f85c3f</anchor>
      <arglist>(collisionKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collisionKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/collisionKernel/</path>
    <filename>a00515</filename>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>compressiblePbeTransportFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressiblePbeTransportFoam/</path>
    <filename>a00785</filename>
  </compound>
  <compound kind="file">
    <name>compressibleSystem.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/</path>
    <filename>a00791</filename>
  </compound>
  <compound kind="file">
    <name>compressibleSystem.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/</path>
    <filename>a00794</filename>
    <includes id="a00797" name="compressibleSystemI.H" local="yes" imported="no">compressibleSystemI.H</includes>
    <class kind="class">Foam::compressibleSystem</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>compressibleSystemI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/</path>
    <filename>a00797</filename>
  </compound>
  <compound kind="file">
    <name>computeParticleFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/vdfTransportFoam/</path>
    <filename>a01745</filename>
    <member kind="function">
      <type>labelList</type>
      <name>orderZero</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a33ad20ce6a74110ad9bb089350082b9c</anchor>
      <arglist>(momentOrders[0].size(), 0)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>m0</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ac84f31065245ae483b6548456ffec420</anchor>
      <arglist>(moments(0))</arglist>
    </member>
    <member kind="function">
      <type>m0</type>
      <name>max</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>af5beeb1c884e5015e07513b14742eddd</anchor>
      <arglist>(1e-10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>forAll</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a1c618da604d0e9d52428d5c78d1bae12</anchor>
      <arglist>(velocityIndexes, cmpt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a5266bcebeb79a4f57e1518c5b7fafd0e</anchor>
      <arglist>(computeVariance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a2bc186e27a753417669850e989e4c24b</anchor>
      <arglist>(sizeIndex !=-1 &amp;&amp;nodes[0].lengthBased())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conditionalMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/conditional/</path>
    <filename>a00200</filename>
    <includes id="a00203" name="conditionalMomentInversion.H" local="yes" imported="no">conditionalMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a09497a6158d326aed90ddb122c61143c</anchor>
      <arglist>(conditional, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a0add58338bd5013be837dff391be6045</anchor>
      <arglist>(multivariateMomentInversion, conditional, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conditionalMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/conditional/</path>
    <filename>a00203</filename>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <includes id="a00341" name="multivariateMomentSet.H" local="yes" imported="no">multivariateMomentSet.H</includes>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <class kind="class">Foam::multivariateMomentInversions::conditional</class>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
  </compound>
  <compound kind="file">
    <name>conductivityModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/conductivityModel/</path>
    <filename>a01415</filename>
  </compound>
  <compound kind="file">
    <name>conductivityModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/conductivityModel/</path>
    <filename>a01418</filename>
    <class kind="class">Foam::kineticTheoryModels::conductivityModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantAggregation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/constantAggregation/</path>
    <filename>a00416</filename>
    <includes id="a00419" name="constantAggregation.H" local="yes" imported="no">constantAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>af835c9d013a20a975c6f4e57ee9149c8</anchor>
      <arglist>(constantAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ace2c634a7ff538fbb4744268b13a2c6a</anchor>
      <arglist>(aggregationKernel, constantAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constantAggregation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/constantAggregation/</path>
    <filename>a00419</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::constantAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/constantAspectRatio/constantAspectRatio.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/constantAspectRatio/</path>
    <filename>a03240</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/constantAspectRatio/constantAspectRatio.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/constantAspectRatio/</path>
    <filename>a03243</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/constantAspectRatio/constantAspectRatio.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/constantAspectRatio/</path>
    <filename>a03246</filename>
    <class kind="class">Foam::aspectRatioModels::constantAspectRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/constantAspectRatio/constantAspectRatio.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/constantAspectRatio/</path>
    <filename>a03249</filename>
    <class kind="class">Foam::aspectRatioModels::constantAspectRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantBreakup.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/constantBreakup/</path>
    <filename>a00461</filename>
    <includes id="a00464" name="constantBreakup.H" local="yes" imported="no">constantBreakup.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a4338754b0aa20aed5a47b1d88f7fa364</anchor>
      <arglist>(constantBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a7337b8a9505305ea7461d4aa5aee0c6f</anchor>
      <arglist>(breakupKernel, constantBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constantBreakup.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/constantBreakup/</path>
    <filename>a00464</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::constantBreakup</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>constantEfficiency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/constant/</path>
    <filename>a00962</filename>
  </compound>
  <compound kind="file">
    <name>constantEfficiency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/constant/</path>
    <filename>a00965</filename>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceEfficiencyKernels::constant</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>constantGrowth.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/constantGrowth/</path>
    <filename>a00590</filename>
    <includes id="a00593" name="constantGrowth.H" local="yes" imported="no">constantGrowth.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::growthModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a05800d31989e6a63a1927724fcce12e4</anchor>
      <arglist>(constantGrowth, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a6ad7bf9e04f9a2619c1348631b695132</anchor>
      <arglist>(growthModel, constantGrowth, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constantGrowth.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/constantGrowth/</path>
    <filename>a00593</filename>
    <includes id="a00599" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::growthModels::constantGrowth</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::growthModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/constantLiftCoefficient/constantLiftCoefficient.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/constantLiftCoefficient/</path>
    <filename>a03252</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/constantLiftCoefficient/constantLiftCoefficient.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/constantLiftCoefficient/</path>
    <filename>a03255</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/constantLiftCoefficient/constantLiftCoefficient.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/constantLiftCoefficient/</path>
    <filename>a03258</filename>
    <class kind="class">Foam::liftModels::constantLiftCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/constantLiftCoefficient/constantLiftCoefficient.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/constantLiftCoefficient/</path>
    <filename>a03261</filename>
    <class kind="class">Foam::liftModels::constantLiftCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantNuHeatTransfer.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/constantNu/</path>
    <filename>a01709</filename>
  </compound>
  <compound kind="file">
    <name>constantNuHeatTransfer.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/constantNu/</path>
    <filename>a01712</filename>
    <includes id="a01718" name="heatTransferModel.H" local="yes" imported="no">heatTransferModel.H</includes>
    <class kind="class">Foam::heatTransferModels::constantNuHeatTransfer</class>
    <namespace>Foam</namespace>
    <namespace>Foam::heatTransferModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/constantTurbulentDispersionCoefficient.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/</path>
    <filename>a03264</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/constantTurbulentDispersionCoefficient.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/</path>
    <filename>a03267</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/constantTurbulentDispersionCoefficient.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/</path>
    <filename>a03270</filename>
    <class kind="class">Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/constantTurbulentDispersionCoefficient.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/</path>
    <filename>a03273</filename>
    <class kind="class">Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/constantVirtualMassCoefficient.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/</path>
    <filename>a03276</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/constantVirtualMassCoefficient.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/</path>
    <filename>a03279</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/constantVirtualMassCoefficient.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/</path>
    <filename>a03282</filename>
    <class kind="class">Foam::virtualMassModels::constantVirtualMassCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/constantVirtualMassCoefficient.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/</path>
    <filename>a03285</filename>
    <class kind="class">Foam::virtualMassModels::constantVirtualMassCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/denseAGFoam/contErrs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a03288</filename>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr1</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>afaf4bfcfc6d0571877bd09f94658eee7</anchor>
      <arglist>(&quot;contErr1&quot;, fvc::ddt(alpha1, rho1)+fvc::div(alphaRhoPhi1))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr2</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ad5ade12320f1287905a7a66228d39d02</anchor>
      <arglist>(&quot;contErr2&quot;, fvc::ddt(alpha2, rho2)+fvc::div(alphaRhoPhi2))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/polydisperseBubbleFoam/contErrs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a03291</filename>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr1</name>
      <anchorfile>a03291.html</anchorfile>
      <anchor>afaf4bfcfc6d0571877bd09f94658eee7</anchor>
      <arglist>(&quot;contErr1&quot;, fvc::ddt(alpha1, rho1)+fvc::div(alphaRhoPhi1))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr2</name>
      <anchorfile>a03291.html</anchorfile>
      <anchor>ad5ade12320f1287905a7a66228d39d02</anchor>
      <arglist>(&quot;contErr2&quot;, fvc::ddt(alpha2, rho2)+fvc::div(alphaRhoPhi2))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/contErrs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a03294</filename>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr1</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>afaf4bfcfc6d0571877bd09f94658eee7</anchor>
      <arglist>(&quot;contErr1&quot;, fvc::ddt(alpha1, rho1)+fvc::div(alphaRhoPhi1))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr2</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>ad5ade12320f1287905a7a66228d39d02</anchor>
      <arglist>(&quot;contErr2&quot;, fvc::ddt(alpha2, rho2)+fvc::div(alphaRhoPhi2))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/denseAGFoam/correctContErrs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a03297</filename>
    <member kind="variable">
      <type></type>
      <name>contErr1</name>
      <anchorfile>a03297.html</anchorfile>
      <anchor>a6a527bc5c46a9389753a1e6a393d214b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>contErr2</name>
      <anchorfile>a03297.html</anchorfile>
      <anchor>a43720ed9ae3dd30f0241cd5e0df173db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/polydisperseBubbleFoam/correctContErrs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a03300</filename>
    <member kind="variable">
      <type></type>
      <name>contErr1</name>
      <anchorfile>a03300.html</anchorfile>
      <anchor>a6a527bc5c46a9389753a1e6a393d214b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>contErr2</name>
      <anchorfile>a03300.html</anchorfile>
      <anchor>a43720ed9ae3dd30f0241cd5e0df173db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/correctContErrs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a03303</filename>
    <member kind="variable">
      <type></type>
      <name>contErr1</name>
      <anchorfile>a03303.html</anchorfile>
      <anchor>a6a527bc5c46a9389753a1e6a393d214b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>contErr2</name>
      <anchorfile>a03303.html</anchorfile>
      <anchor>a43720ed9ae3dd30f0241cd5e0df173db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/cosine/cosineWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/cosine/</path>
    <filename>a03306</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/cosine/cosineWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/cosine/</path>
    <filename>a03309</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/cosine/cosineWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/cosine/</path>
    <filename>a03312</filename>
    <class kind="class">Foam::wallDampingModels::cosine</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/cosine/cosineWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/cosine/</path>
    <filename>a03315</filename>
    <class kind="class">Foam::wallDampingModels::cosine</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>CoulaloglouAndTavlaridesEfficiency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/CoulaloglouAndTavlarides/</path>
    <filename>a00968</filename>
  </compound>
  <compound kind="file">
    <name>CoulaloglouAndTavlaridesEfficiency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/CoulaloglouAndTavlarides/</path>
    <filename>a00971</filename>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceEfficiencyKernels::CoulaloglouAndTavlarides</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>CoulaloglouAndTavlaridesFrequency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/CoulaloglouAndTavlarides/</path>
    <filename>a01001</filename>
  </compound>
  <compound kind="file">
    <name>CoulaloglouAndTavlaridesFrequency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/CoulaloglouAndTavlarides/</path>
    <filename>a01004</filename>
    <includes id="a00995" name="coalescenceFrequencyKernel.H" local="yes" imported="no">coalescenceFrequencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceFrequencyKernels::CoulaloglouAndTavlarides</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceFrequencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a03318</filename>
  </compound>
  <compound kind="file">
    <name>mixingTransportFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/mixingTransportFoam/</path>
    <filename>a03321</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/denseAGFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a03324</filename>
    <member kind="variable">
      <type></type>
      <name>CoNum</name>
      <anchorfile>a03324.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>particleCoNumKin</name>
      <anchorfile>a03324.html</anchorfile>
      <anchor>aa2845b95afd9e4b11b44359b0ae008de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>particleCoNum</name>
      <anchorfile>a03324.html</anchorfile>
      <anchor>a29ad3a635e3d5c23c5ddc0c66cf3717b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/polydisperseBubbleFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a03327</filename>
    <member kind="variable">
      <type></type>
      <name>CoNum</name>
      <anchorfile>a03327.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pbeTransportFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeTransportFoam/</path>
    <filename>a03330</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a03333</filename>
    <member kind="variable">
      <type>scalar</type>
      <name>CoNum</name>
      <anchorfile>a03333.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>pbeCoNum</name>
      <anchorfile>a03333.html</anchorfile>
      <anchor>a42fcebb8c4e41a6fa54bb2b286366906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>maxCo</name>
      <anchorfile>a03333.html</anchorfile>
      <anchor>a4a999179f30745f2b41ed1ab5591fe08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/oneWayCoupledVdfTransportFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/oneWayCoupledVdfTransportFoam/</path>
    <filename>a03336</filename>
    <member kind="variable">
      <type></type>
      <name>CoNum</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>pbeCoNum</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a42fcebb8c4e41a6fa54bb2b286366906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>maxCo</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4a999179f30745f2b41ed1ab5591fe08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/vdfTransportFoam/CourantNos.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/vdfTransportFoam/</path>
    <filename>a03339</filename>
    <member kind="variable">
      <type>scalar</type>
      <name>CoNum</name>
      <anchorfile>a03339.html</anchorfile>
      <anchor>ab7212aaf6d0ec5a5b5cd0b3b6a0c2741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>pbeCoNum</name>
      <anchorfile>a03339.html</anchorfile>
      <anchor>a42fcebb8c4e41a6fa54bb2b286366906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>maxCo</name>
      <anchorfile>a03339.html</anchorfile>
      <anchor>a4a999179f30745f2b41ed1ab5591fe08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>denseAGFoam/pU/createDDtU.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/pU/</path>
    <filename>a03342</filename>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/pU/createDDtU.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/pU/</path>
    <filename>a03345</filename>
  </compound>
  <compound kind="file">
    <name>denseAGFoam/createFieldRefs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a03348</filename>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a418ba355c1e0cba5b734759de4451d60</anchor>
      <arglist>(!thermo1.isochoric()||!thermo2.isochoric())</arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>alpha2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>ac9dc1cee1e8f17d03b9593718fce9c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi1</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>aaafa68dab09410efefed1b712990703c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi1</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>aaad8901f92b1f428f7051c292e3fda67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi1</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>ad865670ce6d37f88f20cc4527e47f132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a8401107915808b316cc7b5ef0ae2a858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>ad8a0eefdf003c4fa6238cce669248e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a30a298a89b505b45c033dbf36df639e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a1a97abcf6c141f539994c8a21c8daca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo1</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a540e6c79954fcd99eeaee3e39c27ddac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a1ff2111ac4bff6a09c4c0ab1f2249d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho1</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>af72fd2ce0bf948096cadebf34827046a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi1</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>ab9a1e315298d6f85139930962fd52c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a9ec8b063b6caffe2a2f6778c078f2fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi2</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a62305a7b59b36b0c38c2742939a6821c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kineticTheoryModel &amp;</type>
      <name>AGmodel</name>
      <anchorfile>a03348.html</anchorfile>
      <anchor>a1221dfb602d0047a6dede973d4e627e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/createFieldRefs.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a03351</filename>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>alpha2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ac9dc1cee1e8f17d03b9593718fce9c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi1</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>aaafa68dab09410efefed1b712990703c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi1</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>aaad8901f92b1f428f7051c292e3fda67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi1</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ad865670ce6d37f88f20cc4527e47f132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a8401107915808b316cc7b5ef0ae2a858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ad8a0eefdf003c4fa6238cce669248e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a30a298a89b505b45c033dbf36df639e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a1a97abcf6c141f539994c8a21c8daca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo1</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a540e6c79954fcd99eeaee3e39c27ddac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a1ff2111ac4bff6a09c4c0ab1f2249d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho1</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>af72fd2ce0bf948096cadebf34827046a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi1</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ab9a1e315298d6f85139930962fd52c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a9ec8b063b6caffe2a2f6778c078f2fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi2</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a62305a7b59b36b0c38c2742939a6821c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a03354</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\&quot;&lt;&lt; endl;autoPtr&lt; rhoThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>abe69f56d2542c42d3087a7412902b44a</anchor>
      <arglist>(rhoThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>a22d0ba3ec2f78fd322515536f772db71</anchor>
      <arglist>(args.executable(), &quot;h&quot;, &quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>add5dd75c90545baeaf327dcd5dc68b3b</anchor>
      <arglist>(IOobject(&quot;rho&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field U\&quot;&lt;&lt; endl;volVectorField U(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);Info&lt;&lt; &quot;Creating turbulence model\&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>aa3c2686558c8d067abb9c26d8448751a</anchor>
      <arglist>(compressible::turbulenceModel::New(rho, U, phi, thermo))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>aad0c921770bd26de425cedad0c8ae8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>aba679271c41582099c8ccf4827fdf217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt;&lt; &quot;Reading field p_rgh\&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);p_rgh=p - rho *gh;mesh.setFluxRequired(p_rgh.name());Info&lt;&lt; &quot;Creating field dpdt\&quot;&lt;&lt; endl;volScalarField dpdt(IOobject(&quot;dpdt&quot;, runTime.timeName(), mesh), mesh, dimensionedScalar(&quot;dpdt&quot;, p.dimensions()/dimTime, 0));Info&lt;&lt; &quot;Creating field kinetic energy K\&quot;&lt;&lt; endl;volScalarField K(&quot;K&quot;, 0.5 *magSqr(U));Info&lt;&lt; &quot;Reading populationBalanceProperties\&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));surfaceScalarField phiByRho(&quot;phiByRho&quot;, phi/fvc::interpolate(rho));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>a783c74319554c6064e616ca020c20cb0</anchor>
      <arglist>(populationBalanceModel::New(&quot;populationBalance&quot;, populationBalanceProperties, phiByRho))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compressible/explicitRhoFoam/compressiblePbeTransportFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressiblePbeTransportFoam/</path>
    <filename>a03357</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\&quot;&lt;&lt; endl;compressibleSystem fluid(mesh);fluidThermo &amp;thermo=fluid.thermo();thermo.validate(args.executable(), &quot;h&quot;, &quot;e&quot;);const volScalarField &amp;rho=fluid.rho();const volVectorField &amp;U=fluid.U();const surfaceScalarField &amp;phi=fluid.phi();autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>a46e805ee8a49f7c66a279ec64562cd9e</anchor>
      <arglist>(compressible::turbulenceModel::New(rho, U, fluid.massFlux(), fluid.thermo()))</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>muEff</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>af3e24a08337cd66b499f78bb5901ff81</anchor>
      <arglist>(fluid.thermo().mu())</arglist>
    </member>
    <member kind="function">
      <type>errorEstimator</type>
      <name>error</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>aac7c954e23d1b5c23b4a217a86384d1d</anchor>
      <arglist>(mesh)</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading populationBalanceProperties\&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>a4dbeb3de5b8194bbb8c04270ca173b37</anchor>
      <arglist>(populationBalanceModel::New(&quot;populationBalance&quot;, populationBalanceProperties, phi))</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inviscid</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>ae899bb8285fc25e6d38e4362c6b4c1d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compressible/explicitRhoFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/</path>
    <filename>a03360</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\&quot;&lt;&lt; endl;compressibleSystem fluid(mesh);fluidThermo &amp;thermo=fluid.thermo();thermo.validate(args.executable(), &quot;h&quot;, &quot;e&quot;);const volScalarField &amp;rho=fluid.rho();const volVectorField &amp;U=fluid.U();const surfaceScalarField &amp;phi=fluid.phi();autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a03360.html</anchorfile>
      <anchor>a6ecb03b30d3a2c232c9f7174f464360c</anchor>
      <arglist>(compressible::turbulenceModel::New(rho, U, phi, fluid.thermo()))</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>muEff</name>
      <anchorfile>a03360.html</anchorfile>
      <anchor>af3e24a08337cd66b499f78bb5901ff81</anchor>
      <arglist>(fluid.thermo().mu())</arglist>
    </member>
    <member kind="function">
      <type>errorEstimator</type>
      <name>error</name>
      <anchorfile>a03360.html</anchorfile>
      <anchor>aac7c954e23d1b5c23b4a217a86384d1d</anchor>
      <arglist>(mesh)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inviscid</name>
      <anchorfile>a03360.html</anchorfile>
      <anchor>ae899bb8285fc25e6d38e4362c6b4c1d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingTransportFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/mixingTransportFoam/</path>
    <filename>a03363</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\&quot;&lt;&lt; endl;autoPtr&lt; rhoThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>abe69f56d2542c42d3087a7412902b44a</anchor>
      <arglist>(rhoThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>a22d0ba3ec2f78fd322515536f772db71</anchor>
      <arglist>(args.executable(), &quot;h&quot;, &quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>add5dd75c90545baeaf327dcd5dc68b3b</anchor>
      <arglist>(IOobject(&quot;rho&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field U\&quot;&lt;&lt; endl;volVectorField U(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);Info&lt;&lt; &quot;Creating turbulence model\&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>aa3c2686558c8d067abb9c26d8448751a</anchor>
      <arglist>(compressible::turbulenceModel::New(rho, U, phi, thermo))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>aad0c921770bd26de425cedad0c8ae8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt;&lt; &quot;Calculating field g.h\&quot;&lt;&lt; endl;volScalarField gh(&quot;gh&quot;, g &amp;mesh.C());surfaceScalarField ghf(&quot;ghf&quot;, g &amp;mesh.Cf());Info&lt;&lt; &quot;Reading field p_rgh\&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);p_rgh=p - rho *gh;label pRefCell=0;scalar pRefValue=0.0;setRefCell(p, p_rgh, pimple.dict(), pRefCell, pRefValue);Info&lt;&lt; &quot;Reading mixingProperties\&quot;&lt;&lt; endl;IOdictionary mixingProperties(IOobject(&quot;mixingProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));surfaceScalarField phiByRho(&quot;phiByRho&quot;, phi/fvc::interpolate(rho));autoPtr&lt; mixingModel &gt;</type>
      <name>mixing</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>ae9247fb2d5188a56d8f7fd552d7e6422</anchor>
      <arglist>(mixingModel::New(&quot;mixing&quot;, mixingProperties, phiByRho))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/denseAGFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a03366</filename>
    <includes id="a01583" name="createMRF.H" local="yes" imported="no">createMRF.H</includes>
  </compound>
  <compound kind="file">
    <name>multiphase/polydisperseBubbleFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a03369</filename>
    <includes id="a01583" name="createMRF.H" local="yes" imported="no">createMRF.H</includes>
  </compound>
  <compound kind="file">
    <name>pbeFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a03372</filename>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>acc70cfd57581f9c999c1119c806a3fd5</anchor>
      <arglist>(mesh.nCells() !=1)</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; nl&lt;&lt; &quot;Reading thermophysical properties\&quot;&lt;&lt; endl;autoPtr&lt; psiThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a7527b65b79108f3eb3799b88370cd144</anchor>
      <arglist>(psiThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a22d0ba3ec2f78fd322515536f772db71</anchor>
      <arglist>(args.executable(), &quot;h&quot;, &quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>ad55ed9af0dc75fc0f09a2f197435bbf9</anchor>
      <arglist>(IOobject(&quot;rho&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::AUTO_WRITE), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>U</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a626d424d391c0821fa35bfe3c3f61022</anchor>
      <arglist>(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedVector(&quot;zero&quot;, dimVelocity, vector::zero), p.boundaryField().types())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Creating turbulence model.\&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a65c24c3b5e7380852efbd248cfcf1042</anchor>
      <arglist>(compressible::turbulenceModel::New(rho, U, phi, thermo))</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading populationBalanceProperties\&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a74198e2f7c7a37de97b8fe0d0cdaade7</anchor>
      <arglist>(populationBalanceModel::New(&quot;populationBalance&quot;, populationBalanceProperties, phi))</arglist>
    </member>
    <member kind="variable">
      <type>psiThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a0250ef8e3f4fe4312875a0fc54bf3c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pbeTransportFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeTransportFoam/</path>
    <filename>a03375</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\&quot;&lt;&lt; endl;autoPtr&lt; rhoThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>abe69f56d2542c42d3087a7412902b44a</anchor>
      <arglist>(rhoThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>a22d0ba3ec2f78fd322515536f772db71</anchor>
      <arglist>(args.executable(), &quot;h&quot;, &quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>add5dd75c90545baeaf327dcd5dc68b3b</anchor>
      <arglist>(IOobject(&quot;rho&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field U\&quot;&lt;&lt; endl;volVectorField U(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);Info&lt;&lt; &quot;Creating turbulence model\&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>aa3c2686558c8d067abb9c26d8448751a</anchor>
      <arglist>(compressible::turbulenceModel::New(rho, U, phi, thermo))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>aad0c921770bd26de425cedad0c8ae8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt;&lt; &quot;Calculating field g.h\&quot;&lt;&lt; endl;volScalarField gh(&quot;gh&quot;, g &amp;mesh.C());surfaceScalarField ghf(&quot;ghf&quot;, g &amp;mesh.Cf());Info&lt;&lt; &quot;Reading field p_rgh\&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);p_rgh=p - rho *gh;label pRefCell=0;scalar pRefValue=0.0;setRefCell(p, p_rgh, pimple.dict(), pRefCell, pRefValue);Info&lt;&lt; &quot;Reading populationBalanceProperties\&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));surfaceScalarField phiByRho(&quot;phiByRho&quot;, phi/fvc::interpolate(rho));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>adcbbb4b957a9442648728b3485ac5926</anchor>
      <arglist>(populationBalanceModel::New(&quot;populationBalance&quot;, populationBalanceProperties, phiByRho))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a03378</filename>
    <includes id="a01583" name="createMRF.H" local="yes" imported="no">createMRF.H</includes>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading phaseProperties\&quot;&lt;&lt; endl;IOdictionary phaseProperties(IOobject(&quot;phaseProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));word dilutePhaseName(phaseProperties.lookup(&quot;dilutePhase&quot;));word fluidName(phaseProperties.lookup(&quot;continuousPhase&quot;));autoPtr&lt; phaseModel &gt;</type>
      <name>phase1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a32e2d983b3ddd85ca4b7cd24dce59ce3</anchor>
      <arglist>(new phaseModel(mesh, phaseProperties, fluidName))</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Creating field kinetic energy K\&quot;&lt;&lt; endl;volScalarField K1(IOobject::groupName(&quot;K&quot;, phase1-&gt;name()), 0.5 *magSqr(U1));autoPtr&lt; phaseModel &gt;</type>
      <name>phase2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a9c61d7fb438f8faa87738283bae8e124</anchor>
      <arglist>(new vdfPhaseModel(mesh, phaseProperties, dilutePhaseName))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>alpha2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a732863530de8b5297d769ffbe1555484</anchor>
      <arglist>(phase2())</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>K2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>aa03e55c2cb2baa56da9e3eae5a0b4e18</anchor>
      <arglist>(IOobject::groupName(&quot;K&quot;, phase2-&gt;name()), 0.5 *magSqr(U2))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a841639bb65b6f86407d3d056235ae4e8</anchor>
      <arglist>(IOobject(&quot;rho&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), alpha1 *rho1+alpha2 *rho2)</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field p_rgh\&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);label pRefCell=0;scalar pRefValue=0.0;setRefCell(p, p_rgh, pimple.dict(), pRefCell, pRefValue);mesh.setFluxRequired(p_rgh.name());dimensionedScalar pMin(&quot;pMin&quot;, dimPressure, phaseProperties);Info&lt;&lt; &quot;Creating field dpdt\&quot;&lt;&lt; endl;volScalarField dpdt(IOobject(&quot;dpdt&quot;, runTime.timeName(), mesh), mesh, dimensionedScalar(p.dimensions()/dimTime, 0));autoPtr&lt; phasePair &gt;</type>
      <name>pair</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a3671a9cc2e1b429a3e7b00876715ab23</anchor>
      <arglist>(new orderedPhasePair(phase2, phase1, g, dimensionedScalar::lookupOrDefault(&quot;sigma&quot;, phaseProperties, dimensionSet(1, 0, -2, 0, 0), 0.0), phaseProperties.subDict(&quot;aspectRatio&quot;)))</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; dragModel &gt;</type>
      <name>drag</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>aa94b298db8af5c1522eb8cae491ab2a0</anchor>
      <arglist>(dragModel::New(phaseProperties.subDict(&quot;drag&quot;), pair()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a7d7057a3d02caca6b99cd728c924940c</anchor>
      <arglist>(phaseProperties.found(&quot;virtualMass&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a41178e589dc09ddc19dc25d68415d362</anchor>
      <arglist>(phaseProperties.found(&quot;lift&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>ae371a190cb293d498c5b0e024b63772d</anchor>
      <arglist>(phaseProperties.found(&quot;wallLubrication&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>ae28d2617cd429a6d249989afc2e3416a</anchor>
      <arglist>(phaseProperties.found(&quot;turbulentDispersion&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a45649805f86ba9510d421e8286c49c41</anchor>
      <arglist>(phaseProperties.found(&quot;heatTransfer&quot;))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a540e6c79954fcd99eeaee3e39c27ddac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>alpha1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a453b8b2925eef23d60f63222d43559a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volVectorField &amp;</type>
      <name>U1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>abd78520f2d6b8b0da953e1d5e84125d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>aaafa68dab09410efefed1b712990703c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a953e4177d4dbf69a83bfd3da7c6a2249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a94dd275f73b7819e815eaa79e4499409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>af72fd2ce0bf948096cadebf34827046a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField</type>
      <name>psi1</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>af95a6af1a02da83fe6c2cfa3ca0d4d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a1ff2111ac4bff6a09c4c0ab1f2249d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>rho2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a1c6b0a536eadcf2c294d2a6e1b661b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volVectorField &amp;</type>
      <name>U2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a4ead7ec90733bc053ca9eaa4014ed539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a8401107915808b316cc7b5ef0ae2a858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a961b576966e92b4c089d4c40b7e163e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi2</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a69140a005525a93a60a8b742322a30af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>autoPtr&lt; virtualMassModel &gt;</type>
      <name>virtualMass</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>ab704829de48ae489fbccb398caad065c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>autoPtr&lt; liftModel &gt;</type>
      <name>lift</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a60970d515b26712d833611185edd777d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>autoPtr&lt; wallLubricationModel &gt;</type>
      <name>wallLubrication</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>aaa152f5888d873156eca51c0cbc712d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>autoPtr&lt; turbulentDispersionModel &gt;</type>
      <name>turbulentDispersion</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a9dacf295e0b311a19f9875e57478d624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>autoPtr&lt; heatTransferModel &gt;</type>
      <name>heatTransfer</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a17bed7116689afdef6777e9624f00ed2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/oneWayCoupledVdfTransportFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/oneWayCoupledVdfTransportFoam/</path>
    <filename>a03381</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading phaseProperties\&quot;&lt;&lt; endl;IOdictionary phaseProperties(IOobject(&quot;phaseProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));word fluidName(phaseProperties.lookup(&quot;continuousPhase&quot;));phaseModel fluid(mesh, phaseProperties, fluidName);const volVectorField &amp;U=fluid.U();word dilutePhaseName(phaseProperties.lookup(&quot;dilutePhase&quot;));autoPtr&lt; phaseModel &gt;</type>
      <name>dilutePhase</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a75656671fc32467f29a2bc759db6e065</anchor>
      <arglist>(new vdfPhaseModel(mesh, phaseProperties, dilutePhaseName))</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; phasePair &gt;</type>
      <name>pair</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a68e5939cf5b74617d9cd221b62eb197c</anchor>
      <arglist>(new orderedPhasePair(dilutePhase, fluid, g, dimensionedScalar::lookupOrDefault(&quot;sigma&quot;, phaseProperties, dimensionSet(1, 0, -2, 0, 0), 0.0), phaseProperties.subDict(&quot;aspectRatio&quot;)))</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; dragModel &gt;</type>
      <name>drag</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>aa94b298db8af5c1522eb8cae491ab2a0</anchor>
      <arglist>(dragModel::New(phaseProperties.subDict(&quot;drag&quot;), pair()))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/vdfTransportFoam/createFields.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/vdfTransportFoam/</path>
    <filename>a03384</filename>
    <includes id="a01745" name="computeParticleFields.H" local="yes" imported="no">computeParticleFields.H</includes>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phi</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a7d501fd5bba7d079c4749e7ebcfe4b9f</anchor>
      <arglist>(IOobject(&quot;phi&quot;, runTime.timeName(), mesh), mesh, dimensionedScalar(&quot;zero&quot;, dimVolume/dimTime, 0.0))</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading populationBalanceProperties\&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));volVectorField Up(IOobject(&quot;U.particles&quot;, runTime.timeName(), mesh, IOobject::READ_IF_PRESENT, IOobject::AUTO_WRITE), mesh, dimensionedVector(&quot;U&quot;, dimVelocity, Zero));volTensorField Sigmap(IOobject(&quot;Sigma.particles&quot;, runTime.timeName(), mesh, IOobject::READ_IF_PRESENT, IOobject::NO_WRITE), mesh, dimensionedTensor(&quot;Sigma&quot;, sqr(dimVelocity), Zero));volScalarField Thetap(IOobject(&quot;Theta.particles&quot;, runTime.timeName(), mesh, IOobject::READ_IF_PRESENT, IOobject::NO_WRITE), mesh, dimensionedScalar(&quot;Theta&quot;, sqr(dimVelocity), Zero));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a189d78b10d4f8fcc06e8c61a040c6b7f</anchor>
      <arglist>(populationBalanceModel::New(&quot;particles&quot;, populationBalanceProperties, phi))</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>velocityIndexes</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a709dbff75cc2b17e2640803b45f1855f</anchor>
      <arglist>(nodes[0].velocityIndexes())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>forAll</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a6cd1c163934047d1fd1ae81e68cd13ba</anchor>
      <arglist>(momentOrders, mi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>abc6c19f8068fde2397615577a4a6b99b</anchor>
      <arglist>(sizeIndex !=-1)</arglist>
    </member>
    <member kind="variable">
      <type>velocityQuadratureApproximation &amp;</type>
      <name>quadrature</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a3b1847572c8e3667260d19128a053c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const labelListList &amp;</type>
      <name>momentOrders</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a0df65eebbda90c76ef369c679e6123a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volVelocityMomentFieldSet &amp;</type>
      <name>moments</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a711bf950132400d2af3e80c1a31c9391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mappedPtrList&lt; volVelocityNode &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a3437e7618e138b996e00d237e70b6b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>label</type>
      <name>sizeIndex</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a4299b3029b3eb9c7f694e6c32768008d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>computeVariance</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>ab7acb333a7983e06ca3d46f78492149a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>dMean</name>
      <anchorfile>a03384.html</anchorfile>
      <anchor>a9fd5c61a8ae0a84148a9240563dc78cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>createMRF.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a01583</filename>
    <member kind="function">
      <type>IOMRFZoneList</type>
      <name>MRF</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a5b7f53d1619a8564c620d6d6ab79f4f0</anchor>
      <arglist>(mesh)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>aafef8a9624495f082e4ad624cca20b3f</anchor>
      <arglist>(U1)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>abeb41b20ce37679678c04194e33b3966</anchor>
      <arglist>(U2)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a3d8a3fae539731d0068343d8b35d062c</anchor>
      <arglist>(U)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>createSingleCellMesh.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a01676</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Constructing single cell mesh&quot;&lt;&lt; nl&lt;&lt; endl;labelList owner(6, label(0));labelList neighbour(0);pointField points(8);points[0]=vector(0, 0, 0);points[1]=vector(1, 0, 0);points[2]=vector(1, 1, 0);points[3]=vector(0, 1, 0);points[4]=vector(0, 0, 1);points[5]=vector(1, 0, 1);points[6]=vector(1, 1, 1);points[7]=vector(0, 1, 1);const cellModel &amp;hexa=*(cellModeller::lookup(&quot;hex&quot;));faceList faces=hexa.modelFaces();fvMesh mesh(IOobject(fvMesh::defaultRegion, runTime.timeName(), runTime, IOobject::READ_IF_PRESENT), move(points), move(faces), move(owner), move(neighbour));List&lt; polyPatch * &gt;</type>
      <name>patches</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a92b829fd78dd1a5b07752a3ca3378360</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>mesh</type>
      <name>addFvPatches</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>aba98bd4bf2ae6ad20eaee4b756080d6f</anchor>
      <arglist>(patches)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>patches</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a6eea546b8fab7318f4d0d67e4ff28fde</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>daughterDistribution.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/daughterDistribution/</path>
    <filename>a00533</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a76416983309f14ff79252f78e2ba5f45</anchor>
      <arglist>(daughterDistribution, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a43b4a6fcc71e245c8ade315846b6d6a5</anchor>
      <arglist>(daughterDistribution, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>daughterDistribution.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/daughterDistribution/</path>
    <filename>a00536</filename>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistribution</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Davidson/Davidson.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Davidson/</path>
    <filename>a03387</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Davidson/Davidson.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Davidson/</path>
    <filename>a03390</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Davidson/Davidson.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Davidson/</path>
    <filename>a03393</filename>
    <class kind="class">Foam::turbulentDispersionModels::Davidson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Davidson/Davidson.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Davidson/</path>
    <filename>a03396</filename>
    <class kind="class">Foam::turbulentDispersionModels::Davidson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>denseAGFoam/pU/DDtU.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/pU/</path>
    <filename>a03399</filename>
    <member kind="variable">
      <type></type>
      <name>DDtU2</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a7016e96187a175bd23898ceae72d1f55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/pU/DDtU.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/pU/</path>
    <filename>a03402</filename>
    <member kind="variable">
      <type></type>
      <name>DDtU2</name>
      <anchorfile>a03402.html</anchorfile>
      <anchor>a7016e96187a175bd23898ceae72d1f55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>denseAGFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/</path>
    <filename>a00863</filename>
  </compound>
  <compound kind="file">
    <name>differentialForceAggregation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/differentialForceAggregation/</path>
    <filename>a00422</filename>
    <includes id="a00425" name="differentialForceAggregation.H" local="yes" imported="no">differentialForceAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a901fe18b45ba8ca91a036e0ca43a3916</anchor>
      <arglist>(differentialForceAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a61b52f2b3984830ce75e98417e4a1503</anchor>
      <arglist>(aggregationKernel, differentialForceAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>differentialForceAggregation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/differentialForceAggregation/</path>
    <filename>a00425</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::differentialForceAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>diffusionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00572</filename>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a31a8f344b0539bd5cce6c4f4576aa297</anchor>
      <arglist>(diffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a448ce681381f516ef5a82ad59235caa1</anchor>
      <arglist>(diffusionModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>diffusionModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00575</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>diluteVdfTransportFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a01694</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/dragModel/dragModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/dragModel/</path>
    <filename>a03405</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/dragModel/dragModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/dragModel/</path>
    <filename>a03408</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/dragModel/dragModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/dragModel/</path>
    <filename>a03411</filename>
    <class kind="class">Foam::dragModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/dragModel/dragModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/dragModel/</path>
    <filename>a03414</filename>
    <class kind="class">Foam::dragModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/EEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a03417</filename>
    <member kind="function">
      <type>fvScalarMatrix</type>
      <name>EEqn</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a2f68343ae82e73aa2170c178cbd65747</anchor>
      <arglist>(fvm::ddt(rho, he)+fvm::div(phi, he)+fvc::ddt(rho, K)+fvc::div(phi, K)+(he.name()==&quot;e&quot; ? fvc::div(fvc::absolute(phi/fvc::interpolate(rho), U), p, &quot;div(phiv,p)&quot;) :-dpdt) - fvm::laplacian(turbulence-&gt;alphaEff(), he)==radiation-&gt;Sh(thermo, he)+fvOptions(rho, he))</arglist>
    </member>
    <member kind="function">
      <type>EEqn</type>
      <name>relax</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a9b1e3cf7921c1d57830a6970779f3d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>constrain</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a99e52b6aa83a3087ae81ccb1030aceef</anchor>
      <arglist>(EEqn)</arglist>
    </member>
    <member kind="function">
      <type>EEqn</type>
      <name>solve</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>ac123867940006fb14e8346d9bdc38f8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>correct</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a45936480b8c1b0bb71ede46b78d0269d</anchor>
      <arglist>(he)</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>correct</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a8f2ec7df0ad2ec79360a5d964f55de87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/EEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a03420</filename>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03420.html</anchorfile>
      <anchor>aa3675bdd45391160e6c24ac892c9ca61</anchor>
      <arglist>(solveEnergy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compressiblePbeTransportFoam/eigenCourantNo.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressiblePbeTransportFoam/</path>
    <filename>a03423</filename>
    <member kind="function">
      <type>scalarField</type>
      <name>sumAmaxSf</name>
      <anchorfile>a03423.html</anchorfile>
      <anchor>ac005b805fa5109d315d6494410959fe2</anchor>
      <arglist>(fvc::surfaceSum(amaxSf)().primitiveField())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CoNum</name>
      <anchorfile>a03423.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>meanCoNum</name>
      <anchorfile>a03423.html</anchorfile>
      <anchor>abc72bc1a8f6f783d181d653c6f7529a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a03423.html</anchorfile>
      <anchor>a68f8ed4d6aed38c97f61059cf569bea0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigenCourantNo.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/</path>
    <filename>a00788</filename>
    <member kind="function">
      <type>scalarField</type>
      <name>sumAmaxSf</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>ac005b805fa5109d315d6494410959fe2</anchor>
      <arglist>(fvc::surfaceSum(amaxSf)().primitiveField())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CoNum</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>meanCoNum</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>abc72bc1a8f6f783d181d653c6f7529a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigenSolver.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/eigenSolver/</path>
    <filename>a00002</filename>
    <includes id="a00005" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
  </compound>
  <compound kind="file">
    <name>eigenSolver.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/eigenSolver/</path>
    <filename>a00005</filename>
    <class kind="class">Foam::eigenSolver</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>environmentMixingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/environmentMixingModels/environmentMixingModel/</path>
    <filename>a00581</filename>
    <includes id="a00584" name="environmentMixingModel.H" local="yes" imported="no">environmentMixingModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a9531e9b50d9818d7f0779218c7e8f9ce</anchor>
      <arglist>(environmentMixingModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a0dbcc53bdc479497046c5537cd09ffb0</anchor>
      <arglist>(environmentMixingModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>environmentMixingModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/environmentMixingModels/environmentMixingModel/</path>
    <filename>a00584</filename>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::environmentMixingModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>equilibrium.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/equilibrium/</path>
    <filename>a01394</filename>
  </compound>
  <compound kind="file">
    <name>equilibrium.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/equilibrium/</path>
    <filename>a01397</filename>
    <includes id="a01403" name="kineticTheoryModel.H" local="yes" imported="no">kineticTheoryModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::equilibrium</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>equilibriumMomentFunctions.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BGKCollision/</path>
    <filename>a00491</filename>
    <includes id="a00488" name="BGKCollision.H" local="yes" imported="no">BGKCollision.H</includes>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/Ergun/Ergun.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Ergun/</path>
    <filename>a03426</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/Ergun/Ergun.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Ergun/</path>
    <filename>a03429</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/Ergun/Ergun.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Ergun/</path>
    <filename>a03432</filename>
    <class kind="class">Foam::dragModels::Ergun</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/Ergun/Ergun.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Ergun/</path>
    <filename>a03435</filename>
    <class kind="class">Foam::dragModels::Ergun</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>erosion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/erosion/</path>
    <filename>a00542</filename>
    <includes id="a00545" name="erosion.H" local="yes" imported="no">erosion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a01f727723bb2f7668ab5bc761f4c248a</anchor>
      <arglist>(erosion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a62e79e44ef758cea9472b6d5dd80c766</anchor>
      <arglist>(daughterDistribution, erosion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>erosion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/erosion/</path>
    <filename>a00545</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::erosion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>errorEstimator.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/errorEstimator/</path>
    <filename>a01751</filename>
  </compound>
  <compound kind="file">
    <name>errorEstimator.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/errorEstimator/</path>
    <filename>a01754</filename>
    <class kind="class">Foam::errorEstimator</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>esBGKCollision.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/esBGKCollision/</path>
    <filename>a00521</filename>
    <includes id="a00524" name="esBGKCollision.H" local="yes" imported="no">esBGKCollision.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a659a37f1810a8d6733bda1cf0ffdde51</anchor>
      <arglist>(esBGKCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a304534ef6629e6e25750326875da55c5</anchor>
      <arglist>(collisionKernel, esBGKCollision, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>esBGKCollision.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/esBGKCollision/</path>
    <filename>a00524</filename>
    <includes id="a00488" name="BGKCollision.H" local="yes" imported="no">BGKCollision.H</includes>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::esBGKCollision</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
  </compound>
  <compound kind="file">
    <name>Euler.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/Euler/</path>
    <filename>a00743</filename>
  </compound>
  <compound kind="file">
    <name>Euler.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/Euler/</path>
    <filename>a00746</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::Euler</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>explicitRhoFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/</path>
    <filename>a00845</filename>
  </compound>
  <compound kind="file">
    <name>exponentialBreakup.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/exponentialBreakup/</path>
    <filename>a00467</filename>
    <includes id="a00470" name="exponentialBreakup.H" local="yes" imported="no">exponentialBreakup.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a454f3683df96243c1c3df745293c4541</anchor>
      <arglist>(exponentialBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a5bfa78660a2a6bf5acc7c81106fde397</anchor>
      <arglist>(breakupKernel, exponentialBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exponentialBreakup.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/exponentialBreakup/</path>
    <filename>a00470</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::exponentialBreakup</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>extendedFieldMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/extendedFieldMomentInversion/</path>
    <filename>a00041</filename>
    <includes id="a00044" name="extendedFieldMomentInversion.H" local="yes" imported="no">extendedFieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0c214123cdb6bf17bd34e6ba3a78e85f</anchor>
      <arglist>(extendedFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a081c8abae783263ca5c2d8749b9cad86</anchor>
      <arglist>(fieldMomentInversion, extendedFieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>extendedFieldMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/extendedFieldMomentInversion/</path>
    <filename>a00044</filename>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00287" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::extendedFieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>extendedMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/extendedMomentInversion/</path>
    <filename>a00284</filename>
    <includes id="a00287" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <includes id="a00005" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a9beec8ce64dc3eb33ed3ff09a52d34e5</anchor>
      <arglist>(extendedMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a40163a8d4828ced85dea8a29591c7942</anchor>
      <arglist>(extendedMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>extendedMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/extendedMomentInversion/</path>
    <filename>a00287</filename>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::extendedMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>fieldMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00047</filename>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ab5fa56c52c6ef16704a156e8c403a3cd</anchor>
      <arglist>(fieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>abb1c2e5ec33b7d24d9997b1e0c9e2a1b</anchor>
      <arglist>(fieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fieldMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00050</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00341" name="multivariateMomentSet.H" local="yes" imported="no">multivariateMomentSet.H</includes>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00053" name="fieldMomentInversionI.H" local="yes" imported="no">fieldMomentInversionI.H</includes>
    <class kind="class">Foam::fieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>fieldMomentInversionI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00053</filename>
  </compound>
  <compound kind="file">
    <name>firstOrderKineticUnivariateAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/firstOrderKineticUnivariateAdvection/</path>
    <filename>a00140</filename>
    <includes id="a00143" name="firstOrderKineticUnivariateAdvection.H" local="yes" imported="no">firstOrderKineticUnivariateAdvection.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::univariateAdvection</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a56677165b63753d8d9d522290127c6dc</anchor>
      <arglist>(firstOrderKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>afc4c12bafdfbadbbad026767212f82c9</anchor>
      <arglist>(univariateMomentAdvection, firstOrderKinetic, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>firstOrderKineticUnivariateAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/firstOrderKineticUnivariateAdvection/</path>
    <filename>a00143</filename>
    <includes id="a00158" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <class kind="class">Foam::univariateAdvection::firstOrderKinetic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::univariateAdvection</namespace>
  </compound>
  <compound kind="file">
    <name>firstOrderKineticVelocityAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/firstOrderKineticVelocityAdvection/</path>
    <filename>a00170</filename>
    <includes id="a00173" name="firstOrderKineticVelocityAdvection.H" local="yes" imported="no">firstOrderKineticVelocityAdvection.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::velocityAdvection</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>abc26bebea151799a027f3e25eb647602</anchor>
      <arglist>(firstOrderKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a63a38ecbcf11d75dc2c134439787530c</anchor>
      <arglist>(velocityMomentAdvection, firstOrderKinetic, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>firstOrderKineticVelocityAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/firstOrderKineticVelocityAdvection/</path>
    <filename>a00173</filename>
    <includes id="a00188" name="velocityMomentAdvection.H" local="yes" imported="no">velocityMomentAdvection.H</includes>
    <class kind="class">Foam::velocityAdvection::firstOrderKinetic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::velocityAdvection</namespace>
  </compound>
  <compound kind="file">
    <name>fluxFunction.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/fluxFunction/</path>
    <filename>a00812</filename>
  </compound>
  <compound kind="file">
    <name>fluxFunction.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/fluxFunction/</path>
    <filename>a00815</filename>
    <class kind="class">Foam::fluxFunction</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>fluxIntegrator.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxIntegrator/</path>
    <filename>a00839</filename>
  </compound>
  <compound kind="file">
    <name>fluxIntegrator.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxIntegrator/</path>
    <filename>a00842</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <includes id="a00794" name="compressibleSystem.H" local="yes" imported="no">compressibleSystem.H</includes>
    <class kind="class">Foam::fluxIntegrator</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>fluxSplittingFunction.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/fluxSplittingFunction/</path>
    <filename>a01379</filename>
  </compound>
  <compound kind="file">
    <name>fluxSplittingFunction.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/fluxSplittingFunction/</path>
    <filename>a01382</filename>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunction</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>FokkerPlanck.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/FokkerPlanck/</path>
    <filename>a00101</filename>
    <includes id="a00104" name="FokkerPlanck.H" local="yes" imported="no">FokkerPlanck.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5ee518d2e777e92d55b5142322520192</anchor>
      <arglist>(FokkerPlanck, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a4f2ef8e6b8103aec93807cd5b8659911</anchor>
      <arglist>(mixingKernel, FokkerPlanck, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FokkerPlanck.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/FokkerPlanck/</path>
    <filename>a00104</filename>
    <includes id="a00116" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernels::FokkerPlanck</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/Frank/Frank.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/Frank/</path>
    <filename>a03438</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/Frank/Frank.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/Frank/</path>
    <filename>a03441</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/Frank/Frank.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/Frank/</path>
    <filename>a03444</filename>
    <class kind="class">Foam::wallLubricationModels::Frank</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/Frank/Frank.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/Frank/</path>
    <filename>a03447</filename>
    <class kind="class">Foam::wallLubricationModels::Frank</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>frictionalStressModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/frictionalStressModel/</path>
    <filename>a01448</filename>
  </compound>
  <compound kind="file">
    <name>frictionalStressModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/frictionalStressModel/</path>
    <filename>a01451</filename>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>fullFragmentation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/fullFragmentation/</path>
    <filename>a00548</filename>
    <includes id="a00551" name="fullFragmentation.H" local="yes" imported="no">fullFragmentation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a6997e33657a0008b01a9b12b90d7bd10</anchor>
      <arglist>(fullFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>ae31c29d61fe94ab903b2c5841b3173f8</anchor>
      <arglist>(daughterDistribution, fullFragmentation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fullFragmentation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/fullFragmentation/</path>
    <filename>a00551</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::fullFragmentation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>gammaEQMOM.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/gamma/</path>
    <filename>a00293</filename>
    <includes id="a00296" name="gammaEQMOM.H" local="yes" imported="no">gammaEQMOM.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a5538d367d57069f3187e09fb0a7d2a9d</anchor>
      <arglist>(gammaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a58f6c31a874dc8c6ef95eb608f2301e0</anchor>
      <arglist>(extendedMomentInversion, gammaEQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gammaEQMOM.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/gamma/</path>
    <filename>a00296</filename>
    <includes id="a00287" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::gammaEQMOM</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>gaussLobattoMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussLobattoMomentInversion/</path>
    <filename>a00242</filename>
    <includes id="a00245" name="gaussLobattoMomentInversion.H" local="yes" imported="no">gaussLobattoMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a1870f4400a3553172ddbd7b520d56e70</anchor>
      <arglist>(gaussLobattoMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>abcbde07469f4b6865f880188dfaaed03</anchor>
      <arglist>(univariateMomentInversion, gaussLobattoMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussLobattoMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussLobattoMomentInversion/</path>
    <filename>a00245</filename>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::gaussLobattoMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>gaussMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussMomentInversion/</path>
    <filename>a00248</filename>
    <includes id="a00251" name="gaussMomentInversion.H" local="yes" imported="no">gaussMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ab292baa664c0b1ffe9902ad93185b24f</anchor>
      <arglist>(gaussMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a819bba564847deaf815d6be3f1c72bac</anchor>
      <arglist>(univariateMomentInversion, gaussMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussMomentInversion/</path>
    <filename>a00251</filename>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::gaussMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>gaussRadauMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussRadauMomentInversion/</path>
    <filename>a00254</filename>
    <includes id="a00257" name="gaussRadauMomentInversion.H" local="yes" imported="no">gaussRadauMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae28a8693ec96aa0ce2f10a129012de21</anchor>
      <arglist>(gaussRadauMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0b3e4d883035d960f7255cc8bed29329</anchor>
      <arglist>(univariateMomentInversion, gaussRadauMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussRadauMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussRadauMomentInversion/</path>
    <filename>a00257</filename>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::gaussRadauMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>generateMoments.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/</path>
    <filename>a01757</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/Gibilaro/Gibilaro.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Gibilaro/</path>
    <filename>a03450</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/Gibilaro/Gibilaro.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Gibilaro/</path>
    <filename>a03453</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/Gibilaro/Gibilaro.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Gibilaro/</path>
    <filename>a03456</filename>
    <class kind="class">Foam::dragModels::Gibilaro</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/Gibilaro/Gibilaro.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Gibilaro/</path>
    <filename>a03459</filename>
    <class kind="class">Foam::dragModels::Gibilaro</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>GidaspowConductivity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/Gidaspow/</path>
    <filename>a01424</filename>
  </compound>
  <compound kind="file">
    <name>GidaspowConductivity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/Gidaspow/</path>
    <filename>a01427</filename>
    <includes id="a01418" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Gidaspow</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/GidaspowErgunWenYu/GidaspowErgunWenYu.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/GidaspowErgunWenYu/</path>
    <filename>a03462</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/GidaspowErgunWenYu/GidaspowErgunWenYu.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/GidaspowErgunWenYu/</path>
    <filename>a03465</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/GidaspowErgunWenYu/GidaspowErgunWenYu.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/GidaspowErgunWenYu/</path>
    <filename>a03468</filename>
    <class kind="class">Foam::dragModels::GidaspowErgunWenYu</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/GidaspowErgunWenYu/GidaspowErgunWenYu.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/GidaspowErgunWenYu/</path>
    <filename>a03471</filename>
    <class kind="class">Foam::dragModels::GidaspowErgunWenYu</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/GidaspowSchillerNaumann/GidaspowSchillerNaumann.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/GidaspowSchillerNaumann/</path>
    <filename>a03474</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/GidaspowSchillerNaumann/GidaspowSchillerNaumann.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/GidaspowSchillerNaumann/</path>
    <filename>a03477</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/GidaspowSchillerNaumann/GidaspowSchillerNaumann.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/GidaspowSchillerNaumann/</path>
    <filename>a03480</filename>
    <class kind="class">Foam::dragModels::GidaspowSchillerNaumann</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/GidaspowSchillerNaumann/GidaspowSchillerNaumann.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/GidaspowSchillerNaumann/</path>
    <filename>a03483</filename>
    <class kind="class">Foam::dragModels::GidaspowSchillerNaumann</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>GidaspowViscosity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/Gidaspow/</path>
    <filename>a01529</filename>
  </compound>
  <compound kind="file">
    <name>GidaspowViscosity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/Gidaspow/</path>
    <filename>a01532</filename>
    <includes id="a01565" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Gidaspow</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Gosman/Gosman.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Gosman/</path>
    <filename>a03486</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Gosman/Gosman.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Gosman/</path>
    <filename>a03489</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Gosman/Gosman.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Gosman/</path>
    <filename>a03492</filename>
    <class kind="class">Foam::turbulentDispersionModels::Gosman</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Gosman/Gosman.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Gosman/</path>
    <filename>a03495</filename>
    <class kind="class">Foam::turbulentDispersionModels::Gosman</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>granularPressureModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/granularPressureModel/</path>
    <filename>a01475</filename>
  </compound>
  <compound kind="file">
    <name>granularPressureModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/granularPressureModel/</path>
    <filename>a01478</filename>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>growthModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/growthModel/</path>
    <filename>a00596</filename>
    <includes id="a00599" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a808c3e596bb1cee3b5e795d38419b367</anchor>
      <arglist>(growthModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a7fcd4c8a5852e11ff67830a07a4cfe7b</anchor>
      <arglist>(growthModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>growthModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/growthModel/</path>
    <filename>a00599</filename>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::growthModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>heatTransferModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/heatTransferModel/</path>
    <filename>a01715</filename>
  </compound>
  <compound kind="file">
    <name>heatTransferModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/heatTransferModel/</path>
    <filename>a01718</filename>
    <class kind="class">Foam::heatTransferModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>hermiteQuadrature.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/hermiteQuadrature/</path>
    <filename>a00059</filename>
    <includes id="a00062" name="hermiteQuadrature.H" local="yes" imported="no">hermiteQuadrature.H</includes>
    <includes id="a00005" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
  </compound>
  <compound kind="file">
    <name>hermiteQuadrature.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/hermiteQuadrature/</path>
    <filename>a00062</filename>
    <class kind="class">Foam::hermiteQuadrature</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>HLLCFlux.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/HLLCFlux/</path>
    <filename>a00821</filename>
  </compound>
  <compound kind="file">
    <name>HLLCFlux.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/HLLCFlux/</path>
    <filename>a00824</filename>
    <includes id="a00815" name="fluxFunction.H" local="yes" imported="no">fluxFunction.H</includes>
    <class kind="class">Foam::fluxFunctions::HLLC</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fluxFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>HLLFlux.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/HLLFlux/</path>
    <filename>a00827</filename>
  </compound>
  <compound kind="file">
    <name>HLLFlux.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/HLLFlux/</path>
    <filename>a00830</filename>
    <includes id="a00815" name="fluxFunction.H" local="yes" imported="no">fluxFunction.H</includes>
    <class kind="class">Foam::fluxFunctions::HLL</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fluxFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairConductivity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/HrenyaSinclair/</path>
    <filename>a01430</filename>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairConductivity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/HrenyaSinclair/</path>
    <filename>a01433</filename>
    <includes id="a01418" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::HrenyaSinclair</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairViscosity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/HrenyaSinclair/</path>
    <filename>a01535</filename>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairViscosity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/HrenyaSinclair/</path>
    <filename>a01538</filename>
    <includes id="a01565" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::HrenyaSinclair</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
  </compound>
  <compound kind="file">
    <name>hydrodynamicAggregation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/hydrodynamicAggregation/</path>
    <filename>a00428</filename>
    <includes id="a00431" name="hydrodynamicAggregation.H" local="yes" imported="no">hydrodynamicAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a636ec3d763c8c887602ea04a51fad475</anchor>
      <arglist>(hydrodynamicAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>af83bce581ea73f24b1228b0fff351b56</anchor>
      <arglist>(aggregationKernel, hydrodynamicAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hydrodynamicAggregation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/hydrodynamicAggregation/</path>
    <filename>a00431</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::hydrodynamicAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>hyperbolic.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/hyperbolic/</path>
    <filename>a01607</filename>
  </compound>
  <compound kind="file">
    <name>hyperbolic.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/hyperbolic/</path>
    <filename>a01610</filename>
    <includes id="a01601" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::blendingMethods::hyperbolic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::blendingMethods</namespace>
  </compound>
  <compound kind="file">
    <name>hyperbolicConditionalMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/hyperbolic/</path>
    <filename>a00206</filename>
    <includes id="a00209" name="hyperbolicConditionalMomentInversion.H" local="yes" imported="no">hyperbolicConditionalMomentInversion.H</includes>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a0039f071da83af734213e794edc3d46c</anchor>
      <arglist>(CHyQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a83464b2eea013cbb957aa6ce6d33f121</anchor>
      <arglist>(multivariateMomentInversion, CHyQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hyperbolicConditionalMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/hyperbolic/</path>
    <filename>a00209</filename>
    <includes id="a00011" name="mappedList.H" local="yes" imported="no">mappedList.H</includes>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <includes id="a00263" name="hyperbolicMomentInversion.H" local="yes" imported="no">hyperbolicMomentInversion.H</includes>
    <class kind="class">Foam::multivariateMomentInversions::CHyQMOM</class>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
  </compound>
  <compound kind="file">
    <name>hyperbolicMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/hyperbolicMomentInversion/</path>
    <filename>a00260</filename>
    <includes id="a00263" name="hyperbolicMomentInversion.H" local="yes" imported="no">hyperbolicMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aa1f538636ae75df9adfb5d95581c60c9</anchor>
      <arglist>(hyperbolicMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>afaa0ceddec025f9729083e33cd275864</anchor>
      <arglist>(univariateMomentInversion, hyperbolicMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hyperbolicMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/hyperbolicMomentInversion/</path>
    <filename>a00263</filename>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::hyperbolicMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>ICoefficientFunctions.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BoltzmannCollision/</path>
    <filename>a00500</filename>
    <includes id="a00497" name="BoltzmannCollision.H" local="yes" imported="no">BoltzmannCollision.H</includes>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/mixingKernels/IEM/IEM.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/IEM/</path>
    <filename>a03498</filename>
    <includes id="a03504" name="mixingModels/mixingSubModels/mixingKernels/IEM/IEM.H" local="yes" imported="no">IEM.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a17d0080ebb72975f91a6424916c1cb24</anchor>
      <arglist>(IEM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a9226eeb16fbe06bac390688bc780c047</anchor>
      <arglist>(mixingKernel, IEM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/environmentMixingModels/IEM/IEM.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/environmentMixingModels/IEM/</path>
    <filename>a03501</filename>
    <includes id="a03507" name="populationBalanceModels/populationBalanceSubModels/environmentMixingModels/IEM/IEM.H" local="yes" imported="no">IEM.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::environmentMixingModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a03a314abf645683ad9bf1210e1a454e5</anchor>
      <arglist>(IEM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a26ed9743a6bbf7e1e65d072847c8ba76</anchor>
      <arglist>(environmentMixingModel, IEM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/mixingKernels/IEM/IEM.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/IEM/</path>
    <filename>a03504</filename>
    <includes id="a00116" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernels::IEM</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/environmentMixingModels/IEM/IEM.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/environmentMixingModels/IEM/</path>
    <filename>a03507</filename>
    <includes id="a00584" name="environmentMixingModel.H" local="yes" imported="no">environmentMixingModel.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::environmentMixingModels::IEM</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::environmentMixingModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/interpolated/interpolatedWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/interpolated/</path>
    <filename>a03510</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/interpolated/interpolatedWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/interpolated/</path>
    <filename>a03513</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/interpolated/interpolatedWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/interpolated/</path>
    <filename>a03516</filename>
    <class kind="class">Foam::wallDampingModels::interpolated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/interpolated/interpolatedWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/interpolated/</path>
    <filename>a03519</filename>
    <class kind="class">Foam::wallDampingModels::interpolated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/IshiiZuber/IshiiZuber.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/IshiiZuber/</path>
    <filename>a03522</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/IshiiZuber/IshiiZuber.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/IshiiZuber/</path>
    <filename>a03525</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/IshiiZuber/IshiiZuber.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/IshiiZuber/</path>
    <filename>a03528</filename>
    <class kind="class">Foam::dragModels::IshiiZuber</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/IshiiZuber/IshiiZuber.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/IshiiZuber/</path>
    <filename>a03531</filename>
    <class kind="class">Foam::dragModels::IshiiZuber</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>IxCoefficientFunctions.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BoltzmannCollision/</path>
    <filename>a00503</filename>
    <includes id="a00497" name="BoltzmannCollision.H" local="yes" imported="no">BoltzmannCollision.H</includes>
  </compound>
  <compound kind="file">
    <name>IyCoefficientFunctions.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BoltzmannCollision/</path>
    <filename>a00506</filename>
    <includes id="a00497" name="BoltzmannCollision.H" local="yes" imported="no">BoltzmannCollision.H</includes>
  </compound>
  <compound kind="file">
    <name>IzCoefficientFunctions.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/BoltzmannCollision/</path>
    <filename>a00509</filename>
    <includes id="a00497" name="BoltzmannCollision.H" local="yes" imported="no">BoltzmannCollision.H</includes>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonFrictionalStress.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/JohnsonJackson/</path>
    <filename>a01457</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonFrictionalStress.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/JohnsonJackson/</path>
    <filename>a01460</filename>
    <includes id="a01451" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJackson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleSlipFvPatchVectorField.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/derivedFvPatchFields/JohnsonJacksonParticleSlip/</path>
    <filename>a01340</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleSlipFvPatchVectorField.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/derivedFvPatchFields/JohnsonJacksonParticleSlip/</path>
    <filename>a01343</filename>
    <class kind="class">Foam::JohnsonJacksonParticleSlipFvPatchVectorField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleThetaFvPatchScalarField.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/derivedFvPatchFields/JohnsonJacksonParticleTheta/</path>
    <filename>a01346</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleThetaFvPatchScalarField.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/derivedFvPatchFields/JohnsonJacksonParticleTheta/</path>
    <filename>a01349</filename>
    <class kind="class">Foam::JohnsonJacksonParticleThetaFvPatchScalarField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonSchaefferFrictionalStress.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/JohnsonJacksonSchaeffer/</path>
    <filename>a01463</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonSchaefferFrictionalStress.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/JohnsonJacksonSchaeffer/</path>
    <filename>a01466</filename>
    <includes id="a01451" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJacksonSchaeffer</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
  </compound>
  <compound kind="file">
    <name>kineticTheory.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/</path>
    <filename>a01352</filename>
  </compound>
  <compound kind="file">
    <name>kineticTheory.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/</path>
    <filename>a01355</filename>
    <includes id="a01403" name="kineticTheoryModel.H" local="yes" imported="no">kineticTheoryModel.H</includes>
    <class kind="class">Foam::RASModels::kineticTheory</class>
    <namespace>Foam</namespace>
    <namespace>Foam::RASModels</namespace>
  </compound>
  <compound kind="file">
    <name>kineticTheoryModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/kineticTheoryModel/</path>
    <filename>a01400</filename>
  </compound>
  <compound kind="file">
    <name>kineticTheoryModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/kineticTheoryModel/</path>
    <filename>a01403</filename>
    <includes id="a01565" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <includes id="a01418" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <includes id="a01520" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <includes id="a01478" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <includes id="a01451" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>KongFoxConductivity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/KongFox/</path>
    <filename>a01436</filename>
  </compound>
  <compound kind="file">
    <name>KongFoxConductivity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/KongFox/</path>
    <filename>a01439</filename>
    <includes id="a01418" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::KongFox</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>KongFoxPressure.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/KongFox/</path>
    <filename>a01484</filename>
  </compound>
  <compound kind="file">
    <name>KongFoxPressure.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/KongFox/</path>
    <filename>a01487</filename>
    <includes id="a01478" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::KongFox</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>KongFoxViscosity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/KongFox/</path>
    <filename>a01541</filename>
  </compound>
  <compound kind="file">
    <name>KongFoxViscosity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/KongFox/</path>
    <filename>a01544</filename>
    <includes id="a01565" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::KongFox</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/Lain/Lain.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Lain/</path>
    <filename>a03534</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/Lain/Lain.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Lain/</path>
    <filename>a03537</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/Lain/Lain.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Lain/</path>
    <filename>a03540</filename>
    <class kind="class">Foam::dragModels::Lain</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/Lain/Lain.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Lain/</path>
    <filename>a03543</filename>
    <class kind="class">Foam::dragModels::Lain</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/Lamb/Lamb.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/Lamb/</path>
    <filename>a03546</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/Lamb/Lamb.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/Lamb/</path>
    <filename>a03549</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/Lamb/Lamb.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/Lamb/</path>
    <filename>a03552</filename>
    <class kind="class">Foam::virtualMassModels::Lamb</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/Lamb/Lamb.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/Lamb/</path>
    <filename>a03555</filename>
    <class kind="class">Foam::virtualMassModels::Lamb</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/LegendreMagnaudet/LegendreMagnaudet.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/LegendreMagnaudet/</path>
    <filename>a03558</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/LegendreMagnaudet/LegendreMagnaudet.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/LegendreMagnaudet/</path>
    <filename>a03561</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/LegendreMagnaudet/LegendreMagnaudet.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/LegendreMagnaudet/</path>
    <filename>a03564</filename>
    <class kind="class">Foam::liftModels::LegendreMagnaudet</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/LegendreMagnaudet/LegendreMagnaudet.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/LegendreMagnaudet/</path>
    <filename>a03567</filename>
    <class kind="class">Foam::liftModels::LegendreMagnaudet</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>LehrEfficiency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/Lehr/</path>
    <filename>a00974</filename>
  </compound>
  <compound kind="file">
    <name>LehrEfficiency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/Lehr/</path>
    <filename>a00977</filename>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceEfficiencyKernels::Lehr</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/liftModel/liftModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/liftModel/</path>
    <filename>a03570</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/liftModel/liftModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/liftModel/</path>
    <filename>a03573</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/liftModel/liftModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/liftModel/</path>
    <filename>a03576</filename>
    <class kind="class">Foam::liftModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/liftModel/liftModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/liftModel/</path>
    <filename>a03579</filename>
    <class kind="class">Foam::liftModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>linear.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/linear/</path>
    <filename>a01613</filename>
  </compound>
  <compound kind="file">
    <name>linear.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/linear/</path>
    <filename>a01616</filename>
    <includes id="a01601" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::blendingMethods::linear</class>
    <namespace>Foam</namespace>
    <namespace>Foam::blendingMethods</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/linear/linearWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/linear/</path>
    <filename>a03582</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/linear/linearWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/linear/</path>
    <filename>a03585</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/linear/linearWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/linear/</path>
    <filename>a03588</filename>
    <class kind="class">Foam::wallDampingModels::linear</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/linear/linearWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/linear/</path>
    <filename>a03591</filename>
    <class kind="class">Foam::wallDampingModels::linear</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>lognormalEQMOM.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/lognormal/</path>
    <filename>a00299</filename>
    <includes id="a00302" name="lognormalEQMOM.H" local="yes" imported="no">lognormalEQMOM.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>abc4d0b6de74a1649ffc1fb65e338c2d7</anchor>
      <arglist>(lognormalEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ad5fccf27937c96a424dd25d4f637bcd8</anchor>
      <arglist>(extendedMomentInversion, lognormalEQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lognormalEQMOM.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/lognormal/</path>
    <filename>a00302</filename>
    <includes id="a00287" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::lognormalEQMOM</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/LopezDeBertodano/LopezDeBertodano.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/LopezDeBertodano/</path>
    <filename>a03594</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/LopezDeBertodano/LopezDeBertodano.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/LopezDeBertodano/</path>
    <filename>a03597</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/LopezDeBertodano/LopezDeBertodano.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/LopezDeBertodano/</path>
    <filename>a03600</filename>
    <class kind="class">Foam::turbulentDispersionModels::LopezDeBertodano</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/LopezDeBertodano/LopezDeBertodano.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/LopezDeBertodano/</path>
    <filename>a03603</filename>
    <class kind="class">Foam::turbulentDispersionModels::LopezDeBertodano</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>LunPressure.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/Lun/</path>
    <filename>a01490</filename>
  </compound>
  <compound kind="file">
    <name>LunPressure.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/Lun/</path>
    <filename>a01493</filename>
    <includes id="a01478" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::Lun</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>LunSavageRadial.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/LunSavage/</path>
    <filename>a01508</filename>
  </compound>
  <compound kind="file">
    <name>LunSavageRadial.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/LunSavage/</path>
    <filename>a01511</filename>
    <includes id="a01520" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::radialModels::LunSavage</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
  </compound>
  <compound kind="file">
    <name>LuoEfficiency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/Luo/</path>
    <filename>a00980</filename>
  </compound>
  <compound kind="file">
    <name>LuoEfficiency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/Luo/</path>
    <filename>a00983</filename>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceEfficiencyKernels::Luo</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>LuoFrequency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/Luo/</path>
    <filename>a01007</filename>
  </compound>
  <compound kind="file">
    <name>LuoFrequency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/Luo/</path>
    <filename>a01010</filename>
    <includes id="a00995" name="coalescenceFrequencyKernel.H" local="yes" imported="no">coalescenceFrequencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceFrequencyKernels::Luo</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceFrequencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/LuoSvendsen.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/</path>
    <filename>a03606</filename>
    <includes id="a03612" name="src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/LuoSvendsen.H" local="yes" imported="no">LuoSvendsen.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a56da0846e22fec8b96568c9df45a9ff0</anchor>
      <arglist>(LuoSvendsen, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>ab0446f84d3f857ce06af2d4d1e5c4303</anchor>
      <arglist>(breakupKernel, LuoSvendsen, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/LuoSvendsen/LuoSvendsen.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/LuoSvendsen/</path>
    <filename>a03609</filename>
  </compound>
  <compound kind="file">
    <name>src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/LuoSvendsen.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/</path>
    <filename>a03612</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::LuoSvendsen</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/LuoSvendsen/LuoSvendsen.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/LuoSvendsen/</path>
    <filename>a03615</filename>
    <includes id="a00920" name="bubbleBreakupKernel.H" local="yes" imported="no">bubbleBreakupKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::bubbleBreakupKernels::LuoSvendsen</class>
    <namespace>Foam</namespace>
    <namespace>Foam::bubbleBreakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/doc/</path>
    <filename>a00713</filename>
  </compound>
  <compound kind="file">
    <name>mappedList.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedList/</path>
    <filename>a00008</filename>
    <includes id="a00011" name="mappedList.H" local="yes" imported="no">mappedList.H</includes>
  </compound>
  <compound kind="file">
    <name>mappedList.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedList/</path>
    <filename>a00011</filename>
    <class kind="class">Foam::mappedList</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>mappedListI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedList/</path>
    <filename>a00014</filename>
  </compound>
  <compound kind="file">
    <name>mappedLists.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedList/</path>
    <filename>a00017</filename>
    <includes id="a00011" name="mappedList.H" local="yes" imported="no">mappedList.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>mappedList&lt; label &gt;</type>
      <name>mappedLabelList</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>afdd07b2b76b6ef1763b3b3aa1cdf19bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mappedList&lt; scalar &gt;</type>
      <name>mappedScalarList</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aab7cb89c9371af8f82bcfcf6de44f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mappedList&lt; vector &gt;</type>
      <name>mappedVectorList</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ad363f991d8a68713e9986c33649ba655</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mappedPtrList.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedPtrList/</path>
    <filename>a00020</filename>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
  </compound>
  <compound kind="file">
    <name>mappedPtrList.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedPtrList/</path>
    <filename>a00023</filename>
    <class kind="class">Foam::mappedPtrList</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>mappedPtrListI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/mappedPtrList/</path>
    <filename>a00026</filename>
  </compound>
  <compound kind="file">
    <name>Miller.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/Miller/</path>
    <filename>a00605</filename>
    <includes id="a00608" name="Miller.H" local="yes" imported="no">Miller.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a21c76019aa3870a37ecf5edfc30fcbdb</anchor>
      <arglist>(Miller, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>ad2d014bf03b1a0cdaf5ed2889c0bbb2d</anchor>
      <arglist>(nucleationModel, Miller, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Miller.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/Miller/</path>
    <filename>a00608</filename>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::Miller</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingDiffusionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/mixingDiffusionModel/</path>
    <filename>a00074</filename>
    <includes id="a00077" name="mixingDiffusionModel.H" local="yes" imported="no">mixingDiffusionModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ac0d594d7c8baef48ea1026cb4c8e594f</anchor>
      <arglist>(mixingDiffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a9d4968d5245eb7c4df3a444967096e71</anchor>
      <arglist>(mixingDiffusionModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingDiffusionModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/mixingDiffusionModel/</path>
    <filename>a00077</filename>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/mixingKernel/</path>
    <filename>a00113</filename>
    <includes id="a00116" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>abf81d58a6669ac3c3505cc7bc83fc3ec</anchor>
      <arglist>(mixingKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>aefa5f150c6459c5dc6b9dd059c74f912</anchor>
      <arglist>(mixingKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/mixingKernel/</path>
    <filename>a00116</filename>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingModel/</path>
    <filename>a00065</filename>
    <includes id="a00068" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>adfa73918fc77af1ed8be0d92e9ee1703</anchor>
      <arglist>(mixingModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a147adac4350a271380c85ada44c2559e</anchor>
      <arglist>(mixingModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingModel/</path>
    <filename>a00068</filename>
    <class kind="class">Foam::mixingModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>mixingPopulationBalance.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/mixingPopulationBalance/</path>
    <filename>a00380</filename>
    <includes id="a00383" name="mixingPopulationBalance.H" local="yes" imported="no">mixingPopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a74953d00e1118e16322e9fbf9624da09</anchor>
      <arglist>(mixingPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>ac9becf1695f18e470b2d168190e0cda8</anchor>
      <arglist>(populationBalanceModel, mixingPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingPopulationBalance.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/mixingPopulationBalance/</path>
    <filename>a00383</filename>
    <includes id="a00365" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <includes id="a00137" name="turbulentMixing.H" local="yes" imported="no">turbulentMixing.H</includes>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <includes id="a00599" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <includes id="a00584" name="environmentMixingModel.H" local="yes" imported="no">environmentMixingModel.H</includes>
    <includes id="a00701" name="realizableOdeSolver.H" local="yes" imported="no">realizableOdeSolver.H</includes>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::mixingPopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingTransportFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/mixingTransportFoam/</path>
    <filename>a00848</filename>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a03618</filename>
    <includes id="a03624" name="mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H" local="yes" imported="no">molecularDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a41da1253f003db4f25b3cb3cdf35afbf</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ab346ecf672faa6346fbcc4161b3c047a</anchor>
      <arglist>(mixingDiffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a03621</filename>
    <includes id="a03627" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H" local="yes" imported="no">molecularDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>ab0071e5b6f1d125b17b3e41b73e7e39a</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a0fccf41a74735fc6de29c475cbcd4742</anchor>
      <arglist>(diffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a03624</filename>
    <includes id="a00077" name="mixingDiffusionModel.H" local="yes" imported="no">mixingDiffusionModel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModels::molecularDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a03627</filename>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::molecularDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>moment.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00305</filename>
    <includes id="a00308" name="moment.H" local="yes" imported="no">moment.H</includes>
  </compound>
  <compound kind="file">
    <name>moment.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00308</filename>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <class kind="class">Foam::moment</class>
    <class kind="class">Foam::moment::iNew</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentFieldSet.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00311</filename>
    <includes id="a00314" name="momentFieldSet.H" local="yes" imported="no">momentFieldSet.H</includes>
  </compound>
  <compound kind="file">
    <name>momentFieldSet.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00314</filename>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
    <class kind="class">Foam::momentFieldSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentFieldSetI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00317</filename>
  </compound>
  <compound kind="file">
    <name>momentFieldSets.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00320</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00326" name="moments.H" local="yes" imported="no">moments.H</includes>
    <includes id="a00314" name="momentFieldSet.H" local="yes" imported="no">momentFieldSet.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>momentFieldSet&lt; volScalarMoment, volScalarNode &gt;</type>
      <name>volScalarMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae8c6e69db5d3a4adfe5726fd4ac6d4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; surfaceScalarMoment, surfaceScalarNode &gt;</type>
      <name>surfaceScalarMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ac6aab8cb980083359915ae1abc1088d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; volVelocityMoment, volVelocityNode &gt;</type>
      <name>volVelocityMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a22ab41b61fc45e5cac11a325fb1d06fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; surfaceVelocityMoment, surfaceVelocityNode &gt;</type>
      <name>surfaceVelocityMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a6906a30e0126920802c9beb5cd075845</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>momentGenerationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/momentGenerationModel/</path>
    <filename>a01772</filename>
  </compound>
  <compound kind="file">
    <name>momentGenerationModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/momentGenerationModel/</path>
    <filename>a01775</filename>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <class kind="class">Foam::momentGenerationModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00323</filename>
  </compound>
  <compound kind="file">
    <name>moments.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00326</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00308" name="moment.H" local="yes" imported="no">moment.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>moment&lt; volScalarField, volScalarNode &gt;</type>
      <name>volScalarMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae01d86485318664fbe834ffe3c8d0caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; surfaceScalarField, surfaceScalarNode &gt;</type>
      <name>surfaceScalarMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a1d66adfe479bed075edb081ba7bb175c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; volScalarField, volVelocityNode &gt;</type>
      <name>volVelocityMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a4d4dde06caf8725b1f19cbac0e521755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; surfaceScalarField, surfaceVelocityNode &gt;</type>
      <name>surfaceVelocityMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a2936ce5f21c091d5c8e8b0dcc7f6566e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>momentSet.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/momentSet/</path>
    <filename>a00329</filename>
    <includes id="a00332" name="momentSet.H" local="yes" imported="no">momentSet.H</includes>
  </compound>
  <compound kind="file">
    <name>momentSet.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/momentSet/</path>
    <filename>a00332</filename>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <includes id="a00335" name="momentSetI.H" local="yes" imported="no">momentSetI.H</includes>
    <class kind="class">Foam::momentSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentSetI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/momentSet/</path>
    <filename>a00335</filename>
  </compound>
  <compound kind="file">
    <name>momentumSources.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a01697</filename>
    <member kind="function">
      <type>PtrList&lt; fvVectorMatrix &gt;</type>
      <name>AEqns</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a46ad1680ea9f4be4c6986fa6782adde1</anchor>
      <arglist>(phase2-&gt;nNodes())</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>Kd</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a645492e95ce891a551ade0213e25215e</anchor>
      <arglist>(IOobject(&quot;Kd&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedScalar(&quot;zero&quot;, dimDensity/dimTime, 0.0))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>dragSource</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a44f0b5a8e6d938c278b9012529ed0620</anchor>
      <arglist>(IOobject(&quot;dragSource&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedVector(&quot;zero&quot;, dimAcceleration *dimDensity, Zero))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>Cvm</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a981179000382a71583c09b481a58dbd6</anchor>
      <arglist>(IOobject(&quot;Cvm&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedScalar(&quot;zero&quot;, dimDensity, 0.0))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>virtualMassSource</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a7b0a3094febaf0df8f121de02ba9d10c</anchor>
      <arglist>(IOobject(&quot;virtualMassSource&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedVector(&quot;zero&quot;, dimAcceleration *dimDensity, Zero))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>F</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a120aded01642b3e26a7bb96a72e89b1b</anchor>
      <arglist>(IOobject(&quot;F&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedVector(&quot;zero&quot;, dimAcceleration *dimDensity, Zero))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>Kh</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>ab9414c19900a3bc38eb9f3ca1f5b10c3</anchor>
      <arglist>(IOobject(&quot;Kh&quot;, runTime.timeName(), mesh, IOobject::NO_READ, IOobject::NO_WRITE), mesh, dimensionedScalar(&quot;zero&quot;, dimensionSet(1, -1, -3, -1, 0), 0.0))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>DDtU</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a8b8f17fe8f2609f87a2c36a9e47eb965</anchor>
      <arglist>(fvc::ddt(U1)+fvc::div(phi1, U1) - fvc::div(phi1) *U1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>forAll</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a661071c857206cff08f25e78275fc863</anchor>
      <arglist>(AEqns, nodei)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>monoKineticMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/monoKinetic/</path>
    <filename>a00212</filename>
    <includes id="a00215" name="monoKineticMomentInversion.H" local="yes" imported="no">monoKineticMomentInversion.H</includes>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>af67931e34fa290d02a41ef4f7fbf5708</anchor>
      <arglist>(monoKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>abb61c3d17b0b702bb9185b4f4b1a5bca</anchor>
      <arglist>(multivariateMomentInversion, monoKinetic, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>monoKineticMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/monoKinetic/</path>
    <filename>a00215</filename>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::multivariateMomentInversions::monoKinetic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
  </compound>
  <compound kind="file">
    <name>monoKineticQuadratureApproximation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/monoKineticQuadratureApproximation/</path>
    <filename>a00644</filename>
    <includes id="a00647" name="monoKineticQuadratureApproximation.H" local="yes" imported="no">monoKineticQuadratureApproximation.H</includes>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
  </compound>
  <compound kind="file">
    <name>monoKineticQuadratureApproximation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/monoKineticQuadratureApproximation/</path>
    <filename>a00647</filename>
    <includes id="a00656" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00650" name="monoKineticQuadratureApproximationI.H" local="yes" imported="no">monoKineticQuadratureApproximationI.H</includes>
    <class kind="class">Foam::monoKineticQuadratureApproximation</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>monoKineticQuadratureApproximationI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/monoKineticQuadratureApproximation/</path>
    <filename>a00650</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/Moraga/Moraga.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/Moraga/</path>
    <filename>a03630</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/Moraga/Moraga.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/Moraga/</path>
    <filename>a03633</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/Moraga/Moraga.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/Moraga/</path>
    <filename>a03636</filename>
    <class kind="class">Foam::liftModels::Moraga</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/Moraga/Moraga.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/Moraga/</path>
    <filename>a03639</filename>
    <class kind="class">Foam::liftModels::Moraga</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>multivariateMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/multivariateMomentInversion/</path>
    <filename>a00218</filename>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a7ae3fe011e8c002f96aaca3bd8f5a4c4</anchor>
      <arglist>(multivariateMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a1a5fdf9ffaed282a6817100059db7834</anchor>
      <arglist>(multivariateMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multivariateMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/multivariateMomentInversion/</path>
    <filename>a00221</filename>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
    <includes id="a00341" name="multivariateMomentSet.H" local="yes" imported="no">multivariateMomentSet.H</includes>
    <includes id="a00224" name="multivariateMomentInversionI.H" local="yes" imported="no">multivariateMomentInversionI.H</includes>
    <class kind="class">Foam::multivariateMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multivariateMomentInversionI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/multivariateMomentInversion/</path>
    <filename>a00224</filename>
  </compound>
  <compound kind="file">
    <name>multivariateMomentSet.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/multivariateMomentSet/</path>
    <filename>a00338</filename>
    <includes id="a00341" name="multivariateMomentSet.H" local="yes" imported="no">multivariateMomentSet.H</includes>
  </compound>
  <compound kind="file">
    <name>multivariateMomentSet.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/multivariateMomentSet/</path>
    <filename>a00341</filename>
    <includes id="a00332" name="momentSet.H" local="yes" imported="no">momentSet.H</includes>
    <includes id="a00344" name="multivariateMomentSetI.H" local="yes" imported="no">multivariateMomentSetI.H</includes>
    <class kind="class">Foam::multivariateMomentSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multivariateMomentSetI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/multivariateMomentSet/</path>
    <filename>a00344</filename>
  </compound>
  <compound kind="file">
    <name>newAggregationKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/aggregationKernel/</path>
    <filename>a00407</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/aspectRatioModel/newAspectRatioModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a03642</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/aspectRatioModel/newAspectRatioModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a03645</filename>
  </compound>
  <compound kind="file">
    <name>newBlendingMethod.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/blendingMethod/</path>
    <filename>a01604</filename>
  </compound>
  <compound kind="file">
    <name>newBreakupKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/breakupKernel/</path>
    <filename>a00458</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>newBubbleBreakupKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubbleBreakupKernels/bubbleBreakupKernel/</path>
    <filename>a00923</filename>
  </compound>
  <compound kind="file">
    <name>newBubblePressureModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/bubblePressureModel/</path>
    <filename>a00938</filename>
  </compound>
  <compound kind="file">
    <name>newButcherTable.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/ButcherTable/</path>
    <filename>a00740</filename>
  </compound>
  <compound kind="file">
    <name>newCoalescenceEfficiencyKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/coalescenceEfficiencyKernel/</path>
    <filename>a00959</filename>
  </compound>
  <compound kind="file">
    <name>newCoalescenceFrequencyKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/coalescenceFrequencyKernel/</path>
    <filename>a00998</filename>
  </compound>
  <compound kind="file">
    <name>newCollisionKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/collisionKernel/</path>
    <filename>a00518</filename>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>newConductivityModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/conductivityModel/</path>
    <filename>a01421</filename>
  </compound>
  <compound kind="file">
    <name>newDaughterDistribution.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/daughterDistribution/</path>
    <filename>a00539</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
  </compound>
  <compound kind="file">
    <name>newDiffusionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00578</filename>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/dragModel/newDragModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/dragModel/</path>
    <filename>a03648</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/dragModel/newDragModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/dragModel/</path>
    <filename>a03651</filename>
  </compound>
  <compound kind="file">
    <name>newEnvironmentMixingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/environmentMixingModels/environmentMixingModel/</path>
    <filename>a00587</filename>
    <includes id="a00584" name="environmentMixingModel.H" local="yes" imported="no">environmentMixingModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newExtendedMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/extendedMomentInversion/</path>
    <filename>a00290</filename>
    <includes id="a00287" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newFieldMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00056</filename>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newFluxFunction.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/fluxFunction/</path>
    <filename>a00818</filename>
  </compound>
  <compound kind="file">
    <name>newFluxSplittingFunction.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/fluxSplittingFunction/</path>
    <filename>a01385</filename>
  </compound>
  <compound kind="file">
    <name>newFrictionalStressModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/frictionalStressModel/</path>
    <filename>a01454</filename>
  </compound>
  <compound kind="file">
    <name>newGranularPressureModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/granularPressureModel/</path>
    <filename>a01481</filename>
  </compound>
  <compound kind="file">
    <name>newGrowthModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/growthModel/</path>
    <filename>a00602</filename>
    <includes id="a00599" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newHeatTransferModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/heatTransferModel/</path>
    <filename>a01721</filename>
  </compound>
  <compound kind="file">
    <name>newKineticTheoryModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/kineticTheoryModel/</path>
    <filename>a01406</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/liftModel/newLiftModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/liftModel/</path>
    <filename>a03654</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/liftModel/newLiftModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/liftModel/</path>
    <filename>a03657</filename>
  </compound>
  <compound kind="file">
    <name>newMixingDiffusionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/mixingDiffusionModel/</path>
    <filename>a00080</filename>
    <includes id="a00077" name="mixingDiffusionModel.H" local="yes" imported="no">mixingDiffusionModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newMixingKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/mixingKernel/</path>
    <filename>a00119</filename>
    <includes id="a00116" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>newMixingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingModel/</path>
    <filename>a00071</filename>
    <includes id="a00068" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newMomentGenerationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/momentGenerationModel/</path>
    <filename>a01778</filename>
  </compound>
  <compound kind="file">
    <name>newMultivariateMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/multivariateMomentInversion/</path>
    <filename>a00227</filename>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newNucleationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/nucleationModel/</path>
    <filename>a00617</filename>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phaseModels/phaseModel/newPhaseModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a03660</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phaseModel/newPhaseModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phaseModel/</path>
    <filename>a03663</filename>
  </compound>
  <compound kind="file">
    <name>newPopulationBalanceModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceModel/</path>
    <filename>a00392</filename>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newRadialModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/radialModel/</path>
    <filename>a01514</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/swarmCorrection/newSwarmCorrection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a03666</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/swarmCorrection/newSwarmCorrection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a03669</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/newTurbulentDispersionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a03672</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/newTurbulentDispersionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a03675</filename>
  </compound>
  <compound kind="file">
    <name>newUnivariateMomentAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/univariateMomentAdvection/</path>
    <filename>a00152</filename>
    <includes id="a00158" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
  </compound>
  <compound kind="file">
    <name>newUnivariateMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00266</filename>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newVelocityMomentAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/velocityMomentAdvection/</path>
    <filename>a00182</filename>
    <includes id="a00188" name="velocityMomentAdvection.H" local="yes" imported="no">velocityMomentAdvection.H</includes>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/virtualMassModel/newVirtualMassModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a03678</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/virtualMassModel/newVirtualMassModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a03681</filename>
  </compound>
  <compound kind="file">
    <name>newViscosityModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/viscosityModel/</path>
    <filename>a01559</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/wallDampingModel/newWallDampingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a03684</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/wallDampingModel/newWallDampingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a03687</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/wallLubricationModel/newWallLubricationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a03690</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/wallLubricationModel/newWallLubricationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a03693</filename>
  </compound>
  <compound kind="file">
    <name>noBlending.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/noBlending/</path>
    <filename>a01619</filename>
  </compound>
  <compound kind="file">
    <name>noBlending.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/noBlending/</path>
    <filename>a01622</filename>
    <includes id="a01601" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::blendingMethods::noBlending</class>
    <namespace>Foam</namespace>
    <namespace>Foam::blendingMethods</namespace>
  </compound>
  <compound kind="file">
    <name>noBubblePressure.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/noBubblePressure/</path>
    <filename>a00941</filename>
  </compound>
  <compound kind="file">
    <name>noBubblePressure.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/bubblePressureModels/noBubblePressure/</path>
    <filename>a00944</filename>
    <includes id="a00935" name="bubblePressureModel.H" local="yes" imported="no">bubblePressureModel.H</includes>
    <class kind="class">Foam::bubblePressureModels::noBubblePressure</class>
    <namespace>Foam</namespace>
    <namespace>Foam::bubblePressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>noCollision.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/noCollision/</path>
    <filename>a00527</filename>
    <includes id="a00530" name="noCollision.H" local="yes" imported="no">noCollision.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ad3d4242dde5c008ec230c0c4870019bd</anchor>
      <arglist>(noCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a2f3325d2dac144dafdc8c723cee255fa</anchor>
      <arglist>(collisionKernel, noCollision, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noCollision.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/collisionKernels/noCollision/</path>
    <filename>a00530</filename>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::noCollision</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/noDiffusion/noDiffusion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/noDiffusion/</path>
    <filename>a03696</filename>
    <includes id="a03702" name="mixingModels/mixingSubModels/diffusionModels/noDiffusion/noDiffusion.H" local="yes" imported="no">noDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ad26cd27015c30ac719d5391036ab7c68</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>af61572aa3c2df764365d3e063e935e1a</anchor>
      <arglist>(mixingDiffusionModel, noDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/noDiffusion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/</path>
    <filename>a03699</filename>
    <includes id="a03705" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/noDiffusion.H" local="yes" imported="no">noDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a842aff0e85dca97889ae993504b45e78</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a6fe185b9482c07be061d5601a474029b</anchor>
      <arglist>(diffusionModel, noDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/noDiffusion/noDiffusion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/noDiffusion/</path>
    <filename>a03702</filename>
    <includes id="a00077" name="mixingDiffusionModel.H" local="yes" imported="no">mixingDiffusionModel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModels::noDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/noDiffusion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/</path>
    <filename>a03705</filename>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::noDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/noLift/noLift.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/noLift/</path>
    <filename>a03708</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/noLift/noLift.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/noLift/</path>
    <filename>a03711</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/noLift/noLift.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/noLift/</path>
    <filename>a03714</filename>
    <class kind="class">Foam::liftModels::noLift</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/noLift/noLift.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/noLift/</path>
    <filename>a03717</filename>
    <class kind="class">Foam::liftModels::noLift</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>noMixing.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/noMixing/</path>
    <filename>a00128</filename>
    <includes id="a00131" name="noMixing.H" local="yes" imported="no">noMixing.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01818.html</anchorfile>
      <anchor>acae4135f0a969e5c9ac08c46a86accc1</anchor>
      <arglist>(noMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01818.html</anchorfile>
      <anchor>ade9514ba79b25a6a811619ee6bf9114f</anchor>
      <arglist>(mixingModel, noMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noMixing.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/noMixing/</path>
    <filename>a00131</filename>
    <includes id="a00068" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
    <class kind="class">Foam::mixingModels::noMixing</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingModels</namespace>
  </compound>
  <compound kind="file">
    <name>noMixingKernel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/noMixingKernel/</path>
    <filename>a00122</filename>
    <includes id="a00125" name="noMixingKernel.H" local="yes" imported="no">noMixingKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>abde6e8d44f323e5d4c27c8ba1754f2fa</anchor>
      <arglist>(noMixingKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a623dc75247e8a15fe9752084490948ca</anchor>
      <arglist>(mixingKernel, noMixingKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noMixingKernel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/noMixingKernel/</path>
    <filename>a00125</filename>
    <includes id="a00116" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernels::noMixingKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
  </compound>
  <compound kind="file">
    <name>noMomentGeneration.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/noMomentGeneration/</path>
    <filename>a01781</filename>
  </compound>
  <compound kind="file">
    <name>noMomentGeneration.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/noMomentGeneration/</path>
    <filename>a01784</filename>
    <includes id="a01775" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::noMomentGeneration</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>nonEquilibrium.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/nonEquilibrium/</path>
    <filename>a01409</filename>
  </compound>
  <compound kind="file">
    <name>nonEquilibrium.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/nonEquilibrium/</path>
    <filename>a01412</filename>
    <includes id="a01403" name="kineticTheoryModel.H" local="yes" imported="no">kineticTheoryModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::nonEquilibrium</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>noneViscosity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/none/</path>
    <filename>a01547</filename>
  </compound>
  <compound kind="file">
    <name>noneViscosity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/none/</path>
    <filename>a01550</filename>
    <includes id="a01565" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::noneViscosity</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>noNucleation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/noNucleation/</path>
    <filename>a00611</filename>
    <includes id="a00614" name="noNucleation.H" local="yes" imported="no">noNucleation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a57836ace29d15e34f15b8b253e40611f</anchor>
      <arglist>(noNucleation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>aa0ae238b7a248326a8c9c736e41b078e</anchor>
      <arglist>(nucleationModel, noNucleation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noNucleation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/noNucleation/</path>
    <filename>a00614</filename>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::noNucleation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
  </compound>
  <compound kind="file">
    <name>noPopulationBalance.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/noPopulationBalance/</path>
    <filename>a00386</filename>
    <includes id="a00389" name="noPopulationBalance.H" local="yes" imported="no">noPopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a737c1912e0e9ef9a0d6b674272e44d7f</anchor>
      <arglist>(noPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>aa4c3c326869bceb4f53d5175577d7c8c</anchor>
      <arglist>(populationBalanceModel, noPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noPopulationBalance.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/noPopulationBalance/</path>
    <filename>a00389</filename>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <class kind="class">Foam::populationBalanceModels::noPopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/noSwarm/noSwarm.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/noSwarm/</path>
    <filename>a03720</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/noSwarm/noSwarm.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/noSwarm/</path>
    <filename>a03723</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/noSwarm/noSwarm.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/noSwarm/</path>
    <filename>a03726</filename>
    <class kind="class">Foam::swarmCorrections::noSwarm</class>
    <namespace>Foam</namespace>
    <namespace>Foam::swarmCorrections</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/noSwarm/noSwarm.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/noSwarm/</path>
    <filename>a03729</filename>
    <class kind="class">Foam::swarmCorrections::noSwarm</class>
    <namespace>Foam</namespace>
    <namespace>Foam::swarmCorrections</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/noTurbulentDispersion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/</path>
    <filename>a03732</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/noTurbulentDispersion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/</path>
    <filename>a03735</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/noTurbulentDispersion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/</path>
    <filename>a03738</filename>
    <class kind="class">Foam::turbulentDispersionModels::noTurbulentDispersion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/noTurbulentDispersion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/</path>
    <filename>a03741</filename>
    <class kind="class">Foam::turbulentDispersionModels::noTurbulentDispersion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>noUnivariateAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/noUnivariateAdvection/</path>
    <filename>a00146</filename>
    <includes id="a00149" name="noUnivariateAdvection.H" local="yes" imported="no">noUnivariateAdvection.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::univariateAdvection</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>aa595ecec4ec2488aa2b0821e5fc2b468</anchor>
      <arglist>(noAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>ac4071665ab199c5fe7ad1e81ccccccca</anchor>
      <arglist>(univariateMomentAdvection, noAdvection, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noUnivariateAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/noUnivariateAdvection/</path>
    <filename>a00149</filename>
    <includes id="a00158" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <class kind="class">Foam::univariateAdvection::noAdvection</class>
    <namespace>Foam</namespace>
    <namespace>Foam::univariateAdvection</namespace>
  </compound>
  <compound kind="file">
    <name>noVelocityAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/noVelocityAdvection/</path>
    <filename>a00176</filename>
    <includes id="a00179" name="noVelocityAdvection.H" local="yes" imported="no">noVelocityAdvection.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::velocityAdvection</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>ab9b991324b8e804d11bc4b38d0a9a34f</anchor>
      <arglist>(noAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a9be8e7dbf7d1afecc72996b52c5b9143</anchor>
      <arglist>(velocityMomentAdvection, noAdvection, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noVelocityAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/noVelocityAdvection/</path>
    <filename>a00179</filename>
    <includes id="a00188" name="velocityMomentAdvection.H" local="yes" imported="no">velocityMomentAdvection.H</includes>
    <class kind="class">Foam::velocityAdvection::noAdvection</class>
    <namespace>Foam</namespace>
    <namespace>Foam::velocityAdvection</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/noVirtualMass/noVirtualMass.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/noVirtualMass/</path>
    <filename>a03744</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/noVirtualMass/noVirtualMass.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/noVirtualMass/</path>
    <filename>a03747</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/noVirtualMass/noVirtualMass.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/noVirtualMass/</path>
    <filename>a03750</filename>
    <class kind="class">Foam::virtualMassModels::noVirtualMass</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/noVirtualMass/noVirtualMass.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/noVirtualMass/</path>
    <filename>a03753</filename>
    <class kind="class">Foam::virtualMassModels::noVirtualMass</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/noWallDamping/noWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/noWallDamping/</path>
    <filename>a03756</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/noWallDamping/noWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/noWallDamping/</path>
    <filename>a03759</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/noWallDamping/noWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/noWallDamping/</path>
    <filename>a03762</filename>
    <class kind="class">Foam::wallDampingModels::noWallDamping</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/noWallDamping/noWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/noWallDamping/</path>
    <filename>a03765</filename>
    <class kind="class">Foam::wallDampingModels::noWallDamping</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/noWallLubrication/noWallLubrication.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/noWallLubrication/</path>
    <filename>a03768</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/noWallLubrication/noWallLubrication.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/noWallLubrication/</path>
    <filename>a03771</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/noWallLubrication/noWallLubrication.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/noWallLubrication/</path>
    <filename>a03774</filename>
    <class kind="class">Foam::wallLubricationModels::noWallLubrication</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/noWallLubrication/noWallLubrication.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/noWallLubrication/</path>
    <filename>a03777</filename>
    <class kind="class">Foam::wallLubricationModels::noWallLubrication</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>nucleationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/nucleationModel/</path>
    <filename>a00620</filename>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>af6421a75bd0356deacdd72271b6f5e83</anchor>
      <arglist>(nucleationModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a0b6166697bbb54af81fb439a1105951e</anchor>
      <arglist>(nucleationModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nucleationModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/nucleationModel/</path>
    <filename>a00623</filename>
    <includes id="a00326" name="moments.H" local="yes" imported="no">moments.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>oneQuarterMassRatio.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/oneQuarterMassRatio/</path>
    <filename>a00554</filename>
    <includes id="a00557" name="oneQuarterMassRatio.H" local="yes" imported="no">oneQuarterMassRatio.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>af270c7f8972b4b7a65c62654f6a52ba8</anchor>
      <arglist>(oneQuarterMassRatio, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a402d029985d37241642222eff5412b57</anchor>
      <arglist>(daughterDistribution, oneQuarterMassRatio, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oneQuarterMassRatio.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/oneQuarterMassRatio/</path>
    <filename>a00557</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::oneQuarterMassRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>oneWayCoupledVdfTransportFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/oneWayCoupledVdfTransportFoam/</path>
    <filename>a01736</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/orderedPhasePair/orderedPhasePair.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/orderedPhasePair/</path>
    <filename>a03780</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/orderedPhasePair/orderedPhasePair.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/orderedPhasePair/</path>
    <filename>a03783</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/orderedPhasePair/orderedPhasePair.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/orderedPhasePair/</path>
    <filename>a03786</filename>
    <class kind="class">Foam::orderedPhasePair</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/orderedPhasePair/orderedPhasePair.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/orderedPhasePair/</path>
    <filename>a03789</filename>
    <class kind="class">Foam::orderedPhasePair</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>output.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a01679</filename>
    <member kind="function">
      <type>runTime</type>
      <name>write</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a8f30b3c2179b03a7acf273e9dea43342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>moment0</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a71d53d6ef9266108a5d094c1554b2792</anchor>
      <arglist>(mesh.lookupObject&lt; volScalarField &gt;(&quot;moment.0.populationBalance&quot;))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>p_rghEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/pU/</path>
    <filename>a00872</filename>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alphaf1</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a56ffcaedadad19bec661b0b110fea575</anchor>
      <arglist>(&quot;alphaf1&quot;, fvc::interpolate(alpha1))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alphaf2</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a1a3606b91666d14f45addfad2324724e</anchor>
      <arglist>(&quot;alphaf2&quot;, scalar(1) - alphaf1)</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf1</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a3bb4e48b3e5634750d2cdacf7b0bf952</anchor>
      <arglist>(fvc::interpolate(max(alpha1, phase1.residualAlpha()) *rAU1))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf2</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a858c1e77dbff1ea7ec5ff23a310f42f0</anchor>
      <arglist>(fvc::interpolate(max(alpha2, phase2.residualAlpha()) *rAU2))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>Df2</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>af7bfdd14f0f48985c67cf9d009ffacf1</anchor>
      <arglist>(fvc::interpolate(rAU2 *(phase2.turbulence().pPrime())))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>aa3d6c064055ba2de516e5bb5fe6ec5d0</anchor>
      <arglist>(implicitPhasePressure)</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>F</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a0fd6c680e7914ea17e626bbef00299f1</anchor>
      <arglist>(fluid.F())</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>snGradAlpha1</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a3eeaad7d9dd1be311554cc384728c332</anchor>
      <arglist>(fvc::snGrad(alpha1) *mesh.magSf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a0b9d5d8b1ecc0bf63b4c35f41598a500</anchor>
      <arglist>(pimple.correct())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>rAU1</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a7698e6686eee6f60c694b523624b49ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>rAU2</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a2d63de5d9df1b8308e01328c1fce2e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>phiF1</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>aedd16305da3cfdbea19ba23daed10d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>phiF2</name>
      <anchorfile>a00872.html</anchorfile>
      <anchor>a6646a332531432477318e632c7e962c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Panicker/Panicker.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Panicker/</path>
    <filename>a03792</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Panicker/Panicker.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Panicker/</path>
    <filename>a03795</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/Panicker/Panicker.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/Panicker/</path>
    <filename>a03798</filename>
    <class kind="class">Foam::turbulentDispersionModels::Panicker</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Panicker/Panicker.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/Panicker/</path>
    <filename>a03801</filename>
    <class kind="class">Foam::turbulentDispersionModels::Panicker</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>particlePressure.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/particlePressure/</path>
    <filename>a01388</filename>
  </compound>
  <compound kind="file">
    <name>particlePressure.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheoryModels/anisotropicGaussian/fluxSplittingFunctions/particlePressure/</path>
    <filename>a01391</filename>
    <includes id="a01382" name="fluxSplittingFunction.H" local="yes" imported="no">fluxSplittingFunction.H</includes>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunctions::particlePressure</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::fluxSplittingFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>pbeFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a01682</filename>
  </compound>
  <compound kind="file">
    <name>pbeTransportFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeTransportFoam/</path>
    <filename>a01691</filename>
  </compound>
  <compound kind="file">
    <name>PDFTransportModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/PDFTransportModel/</path>
    <filename>a00356</filename>
    <includes id="a00359" name="PDFTransportModel.H" local="yes" imported="no">PDFTransportModel.H</includes>
  </compound>
  <compound kind="file">
    <name>PDFTransportModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/PDFTransportModel/</path>
    <filename>a00359</filename>
    <class kind="class">Foam::PDFTransportModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/pEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a03804</filename>
    <member kind="function">
      <type>thermo</type>
      <name>rho</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a75b7fdc3aa65da4e3c1eccb170439ba8</anchor>
      <arglist>() -</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a4ae3ff6f0732a8a206a641d7ff2d9f7d</anchor>
      <arglist>(1.0/UEqn.A())</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>rhorAUf</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>afd8c4e61a2e39cb5143264971d9c72b8</anchor>
      <arglist>(&quot;rhorAUf&quot;, fvc::interpolate(rho *rAU))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>HbyA</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a84b1887f789e3bce2e0381c047a98de9</anchor>
      <arglist>(constrainHbyA(rAU *UEqn.H(), U, p_rgh))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phig</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>ab48f5bc6b975de805db0b3f1abbed5c6</anchor>
      <arglist>(-rhorAUf *ghf *fvc::snGrad(rho) *mesh.magSf())</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phiHbyA</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>ac020713ebafdc80df21d77cf2af42d29</anchor>
      <arglist>(&quot;phiHbyA&quot;,(fvc::flux(rho *HbyA)+rhorAUf *fvc::ddtCorr(rho, U, phi))+phig)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>makeRelative</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a1091d12f90202cefb0487730316abd8c</anchor>
      <arglist>(fvc::interpolate(rho), phiHbyA)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constrainPressure</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a797aefb4095dcdddbfb2b67948fc3cbc</anchor>
      <arglist>(p_rgh, rho, U, phiHbyA, rhorAUf, MRF)</arglist>
    </member>
    <member kind="function">
      <type>fvScalarMatrix</type>
      <name>p_rghDDtEqn</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>aab86021ac402de18529ad363d829f1b3</anchor>
      <arglist>(fvc::ddt(rho)+psi *correction(fvm::ddt(p_rgh))+fvc::div(phiHbyA)==fvOptions(psi, p_rgh, rho.name()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>ab13470e79e249d04c443bf59be9ff31d</anchor>
      <arglist>(pimple.correctNonOrthogonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a3a782599467f113a731d85df5c3b1e70</anchor>
      <arglist>(thermo.dpdt())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>p</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>ac483f6ce851c9ecd9fb835ff7551737c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/denseAGFoam/pU/pEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/pU/</path>
    <filename>a03807</filename>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a0b9d5d8b1ecc0bf63b4c35f41598a500</anchor>
      <arglist>(pimple.correct())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiphase/polydisperseBubbleFoam/pU/pEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/pU/</path>
    <filename>a03810</filename>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alphaf1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a56ffcaedadad19bec661b0b110fea575</anchor>
      <arglist>(&quot;alphaf1&quot;, fvc::interpolate(alpha1))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alphaf2</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a1a3606b91666d14f45addfad2324724e</anchor>
      <arglist>(&quot;alphaf2&quot;, scalar(1) - alphaf1)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a4504850f289512622c46e06eb919c025</anchor>
      <arglist>(IOobject::groupName(&quot;rAU&quot;, phase1.name()), 1.0/(U1Eqn.A()+max(phase1.residualAlpha() - alpha1, scalar(0)) *rho1/runTime.deltaT()))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU2</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a9a3c2d4ea34e448e50505a489aa66e9a</anchor>
      <arglist>(IOobject::groupName(&quot;rAU&quot;, phase2.name()), 1.0/(U2Eqn.A()+max(phase2.residualAlpha() - alpha2, scalar(0)) *rho2/runTime.deltaT()))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a3bb4e48b3e5634750d2cdacf7b0bf952</anchor>
      <arglist>(fvc::interpolate(max(alpha1, phase1.residualAlpha()) *rAU1))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf2</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a858c1e77dbff1ea7ec5ff23a310f42f0</anchor>
      <arglist>(fvc::interpolate(max(alpha2, phase2.residualAlpha()) *rAU2))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>snGradAlpha1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a3eeaad7d9dd1be311554cc384728c332</anchor>
      <arglist>(fvc::snGrad(alpha1) *mesh.magSf())</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>pPrime1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a7434890cc44066862425d0e4281c4249</anchor>
      <arglist>(phase1.turbulence().pPrime())</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>pPrime2</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>ac19d9d9695606a044248354fed6e9455</anchor>
      <arglist>(phase2.turbulence().pPrime())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>aa3d6c064055ba2de516e5bb5fe6ec5d0</anchor>
      <arglist>(implicitPhasePressure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>ace353e990d7324b8758018469470d239</anchor>
      <arglist>(label nodei=0;nodei&lt; phase1.nNodes();nodei++)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a0b9d5d8b1ecc0bf63b4c35f41598a500</anchor>
      <arglist>(pimple.correct())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a8b001df98f4ca694c2202fb716464002</anchor>
      <arglist>(thermo1.dpdt()||thermo2.dpdt())</arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>phiF1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>aedd16305da3cfdbea19ba23daed10d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>phiF2</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a6646a332531432477318e632c7e962c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>K1</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a6b8d5903796d011867096f16bcfe4efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>K2</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a2cc87dc0dca3d6104d8094986f6b852a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/pEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a03813</filename>
    <includes id="a03294" name="velocityDistributionTransport/diluteVdfTransportFoam/contErrs.H" local="yes" imported="no">contErrs.H</includes>
    <member kind="function">
      <type>const volScalarField</type>
      <name>psip0</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>abb6471f00c2ea0ae273f8c0e5ee1f56c</anchor>
      <arglist>(psi1 *p)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a4ae3ff6f0732a8a206a641d7ff2d9f7d</anchor>
      <arglist>(1.0/UEqn.A())</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a8cb1a6eb14ddd67cef279a8a28e6c2cb</anchor>
      <arglist>(&quot;alpharAUf&quot;, fvc::interpolate(alpha1 *rAU))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>HbyA</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a12074f212d0d50ff312e7fec5cf15b63</anchor>
      <arglist>(constrainHbyA(rAU *UEqn.H(), U1, p_rgh))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phig</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a49c6e645948e8209ee164083cb19fec2</anchor>
      <arglist>(alpharAUf *(-ghf *fvc::snGrad(rho) *mesh.magSf()+fvc::interpolate(alpha2 *(rho1 - rho2)) *(g &amp;mesh.Sf())))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phiHbyA</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a88ed83a9bf37bf32a8a72aff1a9da9b3</anchor>
      <arglist>(&quot;phiHbyA&quot;,(fvc::flux(alpha1 *HbyA)+MRF.zeroFilter(alpharAUf *fvc::ddtCorr(alphaRho1, U1, alphaRhoPhi1)))+phig)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>makeRelative</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a9e0c1bef397a16984b6354e194e659af</anchor>
      <arglist>(fvc::interpolate(alphaRho1), phiHbyA)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constrainPressure</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>abb5ceaf739706e0a43118dedbc8f673b</anchor>
      <arglist>(p_rgh, alphaRho1, U1, phiHbyA, alpharAUf, MRF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>ab13470e79e249d04c443bf59be9ff31d</anchor>
      <arglist>(pimple.correctNonOrthogonal())</arglist>
    </member>
    <member kind="function">
      <type>thermo1</type>
      <name>correctRho</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>abafb55d2beefdf011ffd9b5fe732bef8</anchor>
      <arglist>(psi1 *p - psip0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>ac893361206b62c225f5409a5cc055a54</anchor>
      <arglist>(thermo1.dpdt())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a9bc14533c88c9f2a75eedd9a56a5cab3</anchor>
      <arglist>(!thermo1.incompressible())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>rho</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>ae323f2a96b6b181ecef23798ef9f4982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>p</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>ac483f6ce851c9ecd9fb835ff7551737c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>alphaPhi1</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a953e4177d4dbf69a83bfd3da7c6a2249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>alphaRhoPhi1</name>
      <anchorfile>a03813.html</anchorfile>
      <anchor>a94dd275f73b7819e815eaa79e4499409</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phaseCompressibleMeanVelocityForce.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/phaseMeanVelocityForce/phaseCompressibleMeanVelocityForce/</path>
    <filename>a01799</filename>
  </compound>
  <compound kind="file">
    <name>phaseCompressibleMeanVelocityForce.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/phaseMeanVelocityForce/phaseCompressibleMeanVelocityForce/</path>
    <filename>a01802</filename>
    <class kind="class">Foam::fv::phaseCompressibleMeanVelocityForce</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fv</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/</path>
    <filename>a03816</filename>
    <includes id="a03822" name="multiphase/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModelFwd.H" local="yes" imported="no">phaseCompressibleTurbulenceModelFwd.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>ThermalDiffusivity&lt; PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &gt;</type>
      <name>phaseCompressibleTurbulenceModel</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aa5c1489fda8382d68abc884992704b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseCompressibleTurbulenceModels/</path>
    <filename>a03819</filename>
    <includes id="a03825" name="velocityDistributionTransport/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModelFwd.H" local="yes" imported="no">phaseCompressibleTurbulenceModelFwd.H</includes>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModelFwd.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/</path>
    <filename>a03822</filename>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::ThermalDiffusivity</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModelFwd.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseCompressibleTurbulenceModels/</path>
    <filename>a03825</filename>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::ThermalDiffusivity</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModels.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/</path>
    <filename>a03828</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseCompressibleTurbulenceModels/phaseCompressibleTurbulenceModels.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseCompressibleTurbulenceModels/</path>
    <filename>a03831</filename>
  </compound>
  <compound kind="file">
    <name>phaseIncompressibleMeanVelocityForce.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/phaseMeanVelocityForce/phaseIncompressibleMeanVelocityForce/</path>
    <filename>a01805</filename>
  </compound>
  <compound kind="file">
    <name>phaseIncompressibleMeanVelocityForce.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/phaseMeanVelocityForce/phaseIncompressibleMeanVelocityForce/</path>
    <filename>a01808</filename>
    <class kind="class">Foam::fv::phaseIncompressibleMeanVelocityForce</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fv</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phaseModels/phaseModel/phaseModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a03834</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phaseModel/phaseModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phaseModel/</path>
    <filename>a03837</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phaseModels/phaseModel/phaseModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a03840</filename>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::phaseModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phaseModel/phaseModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phaseModel/</path>
    <filename>a03843</filename>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::phaseModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phaseModels/phaseModel/phaseModels.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a03846</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phaseModel/phaseModels.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phaseModel/</path>
    <filename>a03849</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/phasePair/phasePair.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/phasePair/</path>
    <filename>a03852</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/phasePair/phasePair.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/phasePair/</path>
    <filename>a03855</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/phasePair/phasePair.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/phasePair/</path>
    <filename>a03858</filename>
    <includes id="a03864" name="multiphase/twoPhaseSystem/phasePair/phasePair/phasePairI.H" local="yes" imported="no">phasePairI.H</includes>
    <class kind="class">Foam::phasePair</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/phasePair/phasePair.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/phasePair/</path>
    <filename>a03861</filename>
    <includes id="a03867" name="velocityDistributionTransport/phaseModel/phasePair/phasePair/phasePairI.H" local="yes" imported="no">phasePairI.H</includes>
    <class kind="class">Foam::phasePair</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/phasePair/phasePairI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/phasePair/</path>
    <filename>a03864</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/phasePair/phasePairI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/phasePair/</path>
    <filename>a03867</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/phasePairKey/phasePairKey.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/phasePairKey/</path>
    <filename>a03870</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/phasePairKey/phasePairKey.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/phasePairKey/</path>
    <filename>a03873</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/twoPhaseSystem/phasePair/phasePairKey/phasePairKey.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phasePair/phasePairKey/</path>
    <filename>a03876</filename>
    <class kind="class">Foam::phasePairKey</class>
    <class kind="class">Foam::phasePairKey::hash</class>
    <namespace>Foam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a062275aa4823e90d1e79a058b82a4f5a</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a15a138b228eb91febb6f2ae10cf6d085</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aca413c1881b6d4552ae0df9fe282fe89</anchor>
      <arglist>(Istream &amp;, phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a6d7327e2036cf62b71ba0e454ae45409</anchor>
      <arglist>(Ostream &amp;, const phasePairKey &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/phaseModel/phasePair/phasePairKey/phasePairKey.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/phasePair/phasePairKey/</path>
    <filename>a03879</filename>
    <class kind="class">Foam::phasePairKey</class>
    <class kind="class">Foam::phasePairKey::hash</class>
    <namespace>Foam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a062275aa4823e90d1e79a058b82a4f5a</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a15a138b228eb91febb6f2ae10cf6d085</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aca413c1881b6d4552ae0df9fe282fe89</anchor>
      <arglist>(Istream &amp;, phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a6d7327e2036cf62b71ba0e454ae45409</anchor>
      <arglist>(Ostream &amp;, const phasePairKey &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phasePressureModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/phasePressureModel/</path>
    <filename>a01577</filename>
  </compound>
  <compound kind="file">
    <name>phasePressureModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/phasePressureModel/</path>
    <filename>a01580</filename>
    <class kind="class">Foam::RASModels::phasePressureModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::RASModels</namespace>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a01586</filename>
  </compound>
  <compound kind="file">
    <name>polydispersePhaseModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phaseModels/polydispersePhaseModel/</path>
    <filename>a01637</filename>
  </compound>
  <compound kind="file">
    <name>polydispersePhaseModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/phaseModels/polydispersePhaseModel/</path>
    <filename>a01640</filename>
    <includes id="a00647" name="monoKineticQuadratureApproximation.H" local="yes" imported="no">monoKineticQuadratureApproximation.H</includes>
    <includes id="a01022" name="coalescenceKernel.H" local="yes" imported="no">coalescenceKernel.H</includes>
    <includes id="a00920" name="bubbleBreakupKernel.H" local="yes" imported="no">bubbleBreakupKernel.H</includes>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::polydispersePhaseModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceModel/</path>
    <filename>a00395</filename>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a5f1f6bb41c55fd770d1a82b1a3f616d1</anchor>
      <arglist>(populationBalanceModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a658da731d19646486da4cad759632bb0</anchor>
      <arglist>(populationBalanceModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceModel/</path>
    <filename>a00398</filename>
    <class kind="class">Foam::populationBalanceModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>powerLawBreakup.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/powerLawBreakup/</path>
    <filename>a00479</filename>
    <includes id="a00482" name="powerLawBreakup.H" local="yes" imported="no">powerLawBreakup.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a8b60ada41289ba4c36eedcf1dca754ac</anchor>
      <arglist>(powerLawBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>aeff8d67156c89fed6ad177f01cb8321e</anchor>
      <arglist>(breakupKernel, powerLawBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>powerLawBreakup.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/powerLawBreakup/</path>
    <filename>a00482</filename>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::powerLawBreakup</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>PrinceAndBlanchEfficiency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/PrinceAndBlanch/</path>
    <filename>a00986</filename>
  </compound>
  <compound kind="file">
    <name>PrinceAndBlanchEfficiency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceEfficiencyKernels/PrinceAndBlanch/</path>
    <filename>a00989</filename>
    <includes id="a00956" name="coalescenceEfficiencyKernel.H" local="yes" imported="no">coalescenceEfficiencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceEfficiencyKernels::PrinceAndBlanch</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>PrinceAndBlanchFrequency.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/PrinceAndBlanch/</path>
    <filename>a01013</filename>
  </compound>
  <compound kind="file">
    <name>PrinceAndBlanchFrequency.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/coalescenceKernels/coalescenceFrequencyKernels/PrinceAndBlanch/</path>
    <filename>a01016</filename>
    <includes id="a00995" name="coalescenceFrequencyKernel.H" local="yes" imported="no">coalescenceFrequencyKernel.H</includes>
    <includes id="a01667" name="twoPhaseSystem.H" local="yes" imported="no">twoPhaseSystem.H</includes>
    <class kind="class">Foam::coalescenceFrequencyKernels::PrinceAndBlanch</class>
    <namespace>Foam</namespace>
    <namespace>Foam::coalescenceFrequencyKernels</namespace>
  </compound>
  <compound kind="file">
    <name>quadratureApproximation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00653</filename>
    <includes id="a00656" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
  </compound>
  <compound kind="file">
    <name>quadratureApproximation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00656</filename>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
    <includes id="a00050" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00695" name="volVelocityNode.H" local="yes" imported="no">volVelocityNode.H</includes>
    <includes id="a00680" name="surfaceVelocityNode.H" local="yes" imported="no">surfaceVelocityNode.H</includes>
    <class kind="class">Foam::quadratureApproximation</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>quadratureApproximationI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00659</filename>
  </compound>
  <compound kind="file">
    <name>quadratureApproximations.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00662</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00656" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>quadratureApproximation&lt; volScalarMoment, volScalarNode &gt;</type>
      <name>scalarQuadratureApproximation</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae47349b38a289503b27cfe97a824ed63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureApproximation&lt; volVelocityMoment, volVelocityNode &gt;</type>
      <name>velocityQuadratureApproximation</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0a3f11530c04c4f135bb4129023ef3e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quadratureNode.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/qudratureNode/</path>
    <filename>a00665</filename>
    <includes id="a00668" name="quadratureNode.H" local="yes" imported="no">quadratureNode.H</includes>
  </compound>
  <compound kind="file">
    <name>quadratureNode.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/qudratureNode/</path>
    <filename>a00668</filename>
    <includes id="a00011" name="mappedList.H" local="yes" imported="no">mappedList.H</includes>
    <class kind="class">Foam::quadratureNode</class>
    <class kind="class">Foam::quadratureNode::iNew</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>quadratureNodeI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/qudratureNode/</path>
    <filename>a00671</filename>
  </compound>
  <compound kind="file">
    <name>quadratureNodes.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/qudratureNode/</path>
    <filename>a00674</filename>
    <includes id="a00668" name="quadratureNode.H" local="yes" imported="no">quadratureNode.H</includes>
    <includes id="a00686" name="velocityQuadratureNode.H" local="yes" imported="no">velocityQuadratureNode.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>quadratureNode&lt; volScalarField, volVectorField &gt;</type>
      <name>volScalarNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0c5ea6f14ef0e7834b9afc29bbc5ae11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; surfaceScalarField, surfaceVectorField &gt;</type>
      <name>surfaceScalarNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae33c461ae999a3100baf44e6d288cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>velocityQuadratureNode&lt; volScalarField, volVectorField &gt;</type>
      <name>volVelocityNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a40123be7f8362b56042486292e12eb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>velocityQuadratureNode&lt; surfaceScalarField, surfaceVectorField &gt;</type>
      <name>surfaceVelocityNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ad3352d7ef15bba9eb1ed4f74960bbc1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>radialModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/radialModel/</path>
    <filename>a01517</filename>
  </compound>
  <compound kind="file">
    <name>radialModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/radialModel/</path>
    <filename>a01520</filename>
    <class kind="class">Foam::kineticTheoryModels::radialModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>RanzMarshall.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/RanzMarshall/</path>
    <filename>a01724</filename>
  </compound>
  <compound kind="file">
    <name>RanzMarshall.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/RanzMarshall/</path>
    <filename>a01727</filename>
    <includes id="a01718" name="heatTransferModel.H" local="yes" imported="no">heatTransferModel.H</includes>
    <class kind="class">Foam::heatTransferModels::RanzMarshall</class>
    <namespace>Foam</namespace>
    <namespace>Foam::heatTransferModels</namespace>
  </compound>
  <compound kind="file">
    <name>readControls.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a01685</filename>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>ad9044c3d1d0b8f3ed3e6b9b1f8dbb8cb</anchor>
      <arglist>(runTime.controlDict().lookupOrDefault(&quot;suppressSolverInfo&quot;, false))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>realizableOdeSolver.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/realizableOdeSolver/</path>
    <filename>a00698</filename>
    <includes id="a00701" name="realizableOdeSolver.H" local="yes" imported="no">realizableOdeSolver.H</includes>
  </compound>
  <compound kind="file">
    <name>realizableOdeSolver.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/realizableOdeSolver/</path>
    <filename>a00701</filename>
    <includes id="a00656" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
    <class kind="class">Foam::realizableOdeSolver</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>reconstructPointDistribution.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/reconstructPointDistribution/</path>
    <filename>a01811</filename>
  </compound>
  <compound kind="file">
    <name>RK2.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK2/</path>
    <filename>a00749</filename>
  </compound>
  <compound kind="file">
    <name>RK2.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK2/</path>
    <filename>a00752</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::RK2</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>RK2SSP.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK2SSP/</path>
    <filename>a00755</filename>
  </compound>
  <compound kind="file">
    <name>RK2SSP.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK2SSP/</path>
    <filename>a00758</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::RK2SSP</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>RK3SSP.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK3SSP/</path>
    <filename>a00761</filename>
  </compound>
  <compound kind="file">
    <name>RK3SSP.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK3SSP/</path>
    <filename>a00764</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::RK3SSP</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>RK45.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK45/</path>
    <filename>a00767</filename>
  </compound>
  <compound kind="file">
    <name>RK45.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK45/</path>
    <filename>a00770</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::RK45</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>RK4SSP.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK4SSP/</path>
    <filename>a00773</filename>
  </compound>
  <compound kind="file">
    <name>RK4SSP.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RK4SSP/</path>
    <filename>a00776</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::RK4SSP</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>RKF45.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RKF45/</path>
    <filename>a00779</filename>
  </compound>
  <compound kind="file">
    <name>RKF45.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/ButcherTable/RKF45/</path>
    <filename>a00782</filename>
    <includes id="a00737" name="ButcherTable.H" local="yes" imported="no">ButcherTable.H</includes>
    <class kind="class">Foam::ButcherTables::RKF45</class>
    <namespace>Foam</namespace>
    <namespace>Foam::ButcherTables</namespace>
  </compound>
  <compound kind="file">
    <name>RoeFlux.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/RoeFlux/</path>
    <filename>a00833</filename>
  </compound>
  <compound kind="file">
    <name>RoeFlux.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/compressible/explicitRhoFoam/compressibleSystem/fluxFunctions/RoeFlux/</path>
    <filename>a00836</filename>
    <includes id="a00815" name="fluxFunction.H" local="yes" imported="no">fluxFunction.H</includes>
    <class kind="class">Foam::fluxFunctions::Roe</class>
    <namespace>Foam</namespace>
    <namespace>Foam::fluxFunctions</namespace>
  </compound>
  <compound kind="file">
    <name>SchaefferFrictionalStress.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/Schaeffer/</path>
    <filename>a01469</filename>
  </compound>
  <compound kind="file">
    <name>SchaefferFrictionalStress.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/frictionalStressModel/Schaeffer/</path>
    <filename>a01472</filename>
    <includes id="a01451" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::Schaeffer</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/SchillerNaumann/SchillerNaumann.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/SchillerNaumann/</path>
    <filename>a03882</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/SchillerNaumann/SchillerNaumann.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/SchillerNaumann/</path>
    <filename>a03885</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/SchillerNaumann/SchillerNaumann.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/SchillerNaumann/</path>
    <filename>a03888</filename>
    <class kind="class">Foam::dragModels::SchillerNaumann</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/SchillerNaumann/SchillerNaumann.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/SchillerNaumann/</path>
    <filename>a03891</filename>
    <class kind="class">Foam::dragModels::SchillerNaumann</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/segregated/segregated.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/segregated/</path>
    <filename>a03894</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/segregated/segregated.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/segregated/</path>
    <filename>a03897</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/segregated/segregated.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/segregated/</path>
    <filename>a03900</filename>
    <class kind="class">Foam::dragModels::segregated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/segregated/segregated.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/segregated/</path>
    <filename>a03903</filename>
    <class kind="class">Foam::dragModels::segregated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>setDeltaT.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a01688</filename>
  </compound>
  <compound kind="file">
    <name>setRDeltaT.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/</path>
    <filename>a01589</filename>
    <member kind="function">
      <type>scalar</type>
      <name>maxCo</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a264b38a3a95d5704c2b3488251919fa3</anchor>
      <arglist>(pimpleDict.lookupOrDefault&lt; scalar &gt;(&quot;maxCo&quot;, 0.2))</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>maxDeltaT</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a1aada085edc1cf94f00a3b9ada46e58a</anchor>
      <arglist>(pimpleDict.lookupOrDefault&lt; scalar &gt;(&quot;maxDeltaT&quot;, GREAT))</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rDeltaTSmoothingCoeff</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>ae107aec848899790f5df3e9104271144</anchor>
      <arglist>(pimpleDict.lookupOrDefault&lt; scalar &gt;(&quot;rDeltaTSmoothingCoeff&quot;, 0.02))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a5ba077ea50f77271f9de1a93fd2ac7ec</anchor>
      <arglist>(label nodeI=0;nodeI&lt; nNodes;nodeI++)</arglist>
    </member>
    <member kind="function">
      <type>rDeltaT</type>
      <name>ref</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a2f770d65eab4a3a56807178d2277f713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rDeltaT</type>
      <name>correctBoundaryConditions</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>ab8cac904ca049553c4c43b8f59834108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const dictionary &amp;</type>
      <name>pimpleDict</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>aa656ebf7e2eda7d1f7c5d3975ac55a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField</type>
      <name>maxPhi</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a05aac0da8a34d5b02fce1ae19a88b930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SinclairJacksonRadial.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/SinclairJackson/</path>
    <filename>a01523</filename>
  </compound>
  <compound kind="file">
    <name>SinclairJacksonRadial.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/radialModel/SinclairJackson/</path>
    <filename>a01526</filename>
    <includes id="a01520" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::radialModels::SinclairJackson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/sine/sineWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/sine/</path>
    <filename>a03906</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/sine/sineWallDamping.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/sine/</path>
    <filename>a03909</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/sine/sineWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/sine/</path>
    <filename>a03912</filename>
    <class kind="class">Foam::wallDampingModels::sine</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/sine/sineWallDamping.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/sine/</path>
    <filename>a03915</filename>
    <class kind="class">Foam::wallDampingModels::sine</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>sizeCHyQMOMMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/sizeCHyQMOM/</path>
    <filename>a00230</filename>
    <includes id="a00233" name="sizeCHyQMOMMomentInversion.H" local="yes" imported="no">sizeCHyQMOMMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a2ada5bd5cf9ed6cd03e5a07ee584a613</anchor>
      <arglist>(sizeCHyQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a550532f7f6133e003f17d0447d24abbf</anchor>
      <arglist>(multivariateMomentInversion, sizeCHyQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sizeCHyQMOMMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/sizeCHyQMOM/</path>
    <filename>a00233</filename>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <includes id="a00209" name="hyperbolicConditionalMomentInversion.H" local="yes" imported="no">hyperbolicConditionalMomentInversion.H</includes>
    <class kind="class">Foam::multivariateMomentInversions::sizeCHyQMOM</class>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
  </compound>
  <compound kind="file">
    <name>sizeVelocityPopulationBalance.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/sizeVelocityPopulationBalance/</path>
    <filename>a00626</filename>
    <includes id="a00629" name="sizeVelocityPopulationBalance.H" local="yes" imported="no">sizeVelocityPopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a269893300cb6a6f95e28b28ad4543a00</anchor>
      <arglist>(sizeVelocityPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a2f96c855a59b1dae5737200ad23d841f</anchor>
      <arglist>(populationBalanceModel, sizeVelocityPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sizeVelocityPopulationBalance.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/sizeVelocityPopulationBalance/</path>
    <filename>a00629</filename>
    <includes id="a00641" name="velocityPopulationBalance.H" local="yes" imported="no">velocityPopulationBalance.H</includes>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <includes id="a00599" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::sizeVelocityPopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>sphericalHeatTransfer.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/sphericalHeatTransfer/</path>
    <filename>a01730</filename>
  </compound>
  <compound kind="file">
    <name>sphericalHeatTransfer.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/heatTransferModels/sphericalHeatTransfer/</path>
    <filename>a01733</filename>
    <includes id="a01718" name="heatTransferModel.H" local="yes" imported="no">heatTransferModel.H</includes>
    <class kind="class">Foam::heatTransferModels::sphericalHeatTransfer</class>
    <namespace>Foam</namespace>
    <namespace>Foam::heatTransferModels</namespace>
  </compound>
  <compound kind="file">
    <name>Stokes.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Stokes/</path>
    <filename>a01703</filename>
  </compound>
  <compound kind="file">
    <name>Stokes.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/Stokes/</path>
    <filename>a01706</filename>
    <class kind="class">Foam::dragModels::Stokes</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>sumAggregation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/sumAggregation/</path>
    <filename>a00434</filename>
    <includes id="a00437" name="sumAggregation.H" local="yes" imported="no">sumAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ae400872a78a4a9234d740ae66c007114</anchor>
      <arglist>(sumAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a60fb21d09528d9baad4a0d418f4b125f</anchor>
      <arglist>(aggregationKernel, sumAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sumAggregation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/sumAggregation/</path>
    <filename>a00437</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::sumAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>surfaceVelocityNode.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00677</filename>
    <includes id="a00680" name="surfaceVelocityNode.H" local="yes" imported="no">surfaceVelocityNode.H</includes>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>surfaceVelocityNode.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00680</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/swarmCorrection/swarmCorrection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a03918</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/swarmCorrection/swarmCorrection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a03921</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/swarmCorrection/swarmCorrection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a03924</filename>
    <class kind="class">Foam::swarmCorrection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/swarmCorrection/swarmCorrection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a03927</filename>
    <class kind="class">Foam::swarmCorrection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalConductivity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/Syamlal/</path>
    <filename>a01442</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalConductivity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/conductivityModel/Syamlal/</path>
    <filename>a01445</filename>
    <includes id="a01418" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Syamlal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/SyamlalOBrien/SyamlalOBrien.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/SyamlalOBrien/</path>
    <filename>a03930</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/SyamlalOBrien/SyamlalOBrien.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/SyamlalOBrien/</path>
    <filename>a03933</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/SyamlalOBrien/SyamlalOBrien.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/SyamlalOBrien/</path>
    <filename>a03936</filename>
    <class kind="class">Foam::dragModels::SyamlalOBrien</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/SyamlalOBrien/SyamlalOBrien.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/SyamlalOBrien/</path>
    <filename>a03939</filename>
    <class kind="class">Foam::dragModels::SyamlalOBrien</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalRogersOBrienPressure.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/SyamlalRogersOBrien/</path>
    <filename>a01496</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalRogersOBrienPressure.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/granularPressureModel/SyamlalRogersOBrien/</path>
    <filename>a01499</filename>
    <includes id="a01478" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::SyamlalRogersOBrien</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalViscosity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/Syamlal/</path>
    <filename>a01553</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalViscosity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/Syamlal/</path>
    <filename>a01556</filename>
    <includes id="a01565" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Syamlal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
  </compound>
  <compound kind="file">
    <name>symmetricFragmentation.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/symmetricFragmentation/</path>
    <filename>a00560</filename>
    <includes id="a00563" name="symmetricFragmentation.H" local="yes" imported="no">symmetricFragmentation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a62ad711d8fce03a652f1adeb2fcef84e</anchor>
      <arglist>(symmetricFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a4a0510d1798895036e2050367b333efc</anchor>
      <arglist>(daughterDistribution, symmetricFragmentation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symmetricFragmentation.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/symmetricFragmentation/</path>
    <filename>a00563</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::symmetricFragmentation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>TensorProductMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/TensorProduct/</path>
    <filename>a00236</filename>
    <includes id="a00239" name="TensorProductMomentInversion.H" local="yes" imported="no">TensorProductMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>acdfd33787416c46a1a62405707b256b0</anchor>
      <arglist>(TensorProduct, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a79a625f6b95b92a395b248756024c35b</anchor>
      <arglist>(multivariateMomentInversion, TensorProduct, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TensorProductMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/TensorProduct/</path>
    <filename>a00239</filename>
    <includes id="a00017" name="mappedLists.H" local="yes" imported="no">mappedLists.H</includes>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
    <includes id="a00221" name="multivariateMomentInversion.H" local="yes" imported="no">multivariateMomentInversion.H</includes>
    <includes id="a00209" name="hyperbolicConditionalMomentInversion.H" local="yes" imported="no">hyperbolicConditionalMomentInversion.H</includes>
    <class kind="class">Foam::multivariateMomentInversions::TensorProduct</class>
    <namespace>Foam</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
  </compound>
  <compound kind="file">
    <name>Tomiyama.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Tomiyama/</path>
    <filename>a01088</filename>
  </compound>
  <compound kind="file">
    <name>Tomiyama.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/Tomiyama/</path>
    <filename>a01091</filename>
    <class kind="class">Foam::dragModels::Tomiyama</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/TomiyamaAnalytic/TomiyamaAnalytic.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/TomiyamaAnalytic/</path>
    <filename>a03942</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/TomiyamaAnalytic/TomiyamaAnalytic.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/TomiyamaAnalytic/</path>
    <filename>a03945</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/TomiyamaAnalytic/TomiyamaAnalytic.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/TomiyamaAnalytic/</path>
    <filename>a03948</filename>
    <class kind="class">Foam::dragModels::TomiyamaAnalytic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/TomiyamaAnalytic/TomiyamaAnalytic.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/TomiyamaAnalytic/</path>
    <filename>a03951</filename>
    <class kind="class">Foam::dragModels::TomiyamaAnalytic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/TomiyamaAspectRatio.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/</path>
    <filename>a03954</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/TomiyamaAspectRatio.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/</path>
    <filename>a03957</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/TomiyamaAspectRatio.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/</path>
    <filename>a03960</filename>
    <class kind="class">Foam::aspectRatioModels::TomiyamaAspectRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/TomiyamaAspectRatio.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/</path>
    <filename>a03963</filename>
    <class kind="class">Foam::aspectRatioModels::TomiyamaAspectRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/TomiyamaCorrelated/TomiyamaCorrelated.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/TomiyamaCorrelated/</path>
    <filename>a03966</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/TomiyamaCorrelated/TomiyamaCorrelated.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/TomiyamaCorrelated/</path>
    <filename>a03969</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/TomiyamaCorrelated/TomiyamaCorrelated.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/TomiyamaCorrelated/</path>
    <filename>a03972</filename>
    <class kind="class">Foam::dragModels::TomiyamaCorrelated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/TomiyamaCorrelated/TomiyamaCorrelated.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/TomiyamaCorrelated/</path>
    <filename>a03975</filename>
    <class kind="class">Foam::dragModels::TomiyamaCorrelated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/TomiyamaLift/TomiyamaLift.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/TomiyamaLift/</path>
    <filename>a03978</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/TomiyamaLift/TomiyamaLift.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/TomiyamaLift/</path>
    <filename>a03981</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/TomiyamaLift/TomiyamaLift.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/TomiyamaLift/</path>
    <filename>a03984</filename>
    <class kind="class">Foam::liftModels::TomiyamaLift</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/TomiyamaLift/TomiyamaLift.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/TomiyamaLift/</path>
    <filename>a03987</filename>
    <class kind="class">Foam::liftModels::TomiyamaLift</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/TomiyamaSwarm/TomiyamaSwarm.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/TomiyamaSwarm/</path>
    <filename>a03990</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/TomiyamaSwarm/TomiyamaSwarm.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/TomiyamaSwarm/</path>
    <filename>a03993</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/swarmCorrections/TomiyamaSwarm/TomiyamaSwarm.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/swarmCorrections/TomiyamaSwarm/</path>
    <filename>a03996</filename>
    <class kind="class">Foam::swarmCorrections::TomiyamaSwarm</class>
    <namespace>Foam</namespace>
    <namespace>Foam::swarmCorrections</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/swarmCorrections/TomiyamaSwarm/TomiyamaSwarm.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/swarmCorrections/TomiyamaSwarm/</path>
    <filename>a03999</filename>
    <class kind="class">Foam::swarmCorrections::TomiyamaSwarm</class>
    <namespace>Foam</namespace>
    <namespace>Foam::swarmCorrections</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/TomiyamaWallLubrication.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/</path>
    <filename>a04002</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/TomiyamaWallLubrication.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/</path>
    <filename>a04005</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/TomiyamaWallLubrication.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/</path>
    <filename>a04008</filename>
    <class kind="class">Foam::wallLubricationModels::TomiyamaWallLubrication</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/TomiyamaWallLubrication.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/</path>
    <filename>a04011</filename>
    <class kind="class">Foam::wallLubricationModels::TomiyamaWallLubrication</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>turbulentBrownian.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/turbulentBrownian/</path>
    <filename>a00440</filename>
    <includes id="a00443" name="turbulentBrownian.H" local="yes" imported="no">turbulentBrownian.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a8aea8aa81c72d6cc9339bc773860a063</anchor>
      <arglist>(turbulentBrownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a4425f03c0f3a6b57d979366a338cda40</anchor>
      <arglist>(aggregationKernel, turbulentBrownian, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>turbulentBrownian.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/turbulentBrownian/</path>
    <filename>a00443</filename>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::turbulentBrownian</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a04014</filename>
    <includes id="a04020" name="mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H" local="yes" imported="no">turbulentDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a75e56fb0c6f2395f45f9665720fb2261</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>aa6e1f6f5e3bbf100df1b074d01dfc233</anchor>
      <arglist>(mixingDiffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a04017</filename>
    <includes id="a04023" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H" local="yes" imported="no">turbulentDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>afdc594891515141ee07b11edd796180c</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a5735ce97238b71965eb6a6817765ae13</anchor>
      <arglist>(diffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a04020</filename>
    <includes id="a00077" name="mixingDiffusionModel.H" local="yes" imported="no">mixingDiffusionModel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModels::turbulentDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a04023</filename>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::turbulentDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/turbulentDispersionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a04026</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/turbulentDispersionModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a04029</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/turbulentDispersionModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a04032</filename>
    <class kind="class">Foam::turbulentDispersionModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/turbulentDispersionModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a04035</filename>
    <class kind="class">Foam::turbulentDispersionModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>turbulentMixing.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/turbulentMixing/</path>
    <filename>a00134</filename>
    <includes id="a00137" name="turbulentMixing.H" local="yes" imported="no">turbulentMixing.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::mixingModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a3a551541939d8bbcf9fdc374ce4ede08</anchor>
      <arglist>(turbulentMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a5bb611098ff24fdd12820b81036f0c9d</anchor>
      <arglist>(mixingModel, turbulentMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>turbulentMixing.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/mixingModels/turbulentMixing/</path>
    <filename>a00137</filename>
    <includes id="a00365" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
    <includes id="a00068" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
    <includes id="a00116" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <includes id="a00077" name="mixingDiffusionModel.H" local="yes" imported="no">mixingDiffusionModel.H</includes>
    <class kind="class">Foam::PDFTransportModels::mixingModels::turbulentMixing</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::mixingModels</namespace>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystem.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/</path>
    <filename>a01664</filename>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystem.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/</path>
    <filename>a01667</filename>
    <includes id="a01670" name="twoPhaseSystemI.H" local="yes" imported="no">twoPhaseSystemI.H</includes>
    <class kind="class">Foam::BlendedInterfacialModel</class>
    <class kind="class">Foam::twoPhaseSystem</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystemI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/</path>
    <filename>a01670</filename>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystemTemplates.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/twoPhaseSystem/</path>
    <filename>a01673</filename>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/UEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a04038</filename>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a04038.html</anchorfile>
      <anchor>a3d8a3fae539731d0068343d8b35d062c</anchor>
      <arglist>(U)</arglist>
    </member>
    <member kind="function">
      <type>fvVectorMatrix</type>
      <name>UEqn</name>
      <anchorfile>a04038.html</anchorfile>
      <anchor>aca6be8f7ed14e8582a0811cfe8a2d205</anchor>
      <arglist>(fvm::ddt(rho, U)+fvm::div(phi, U)+MRF.DDt(rho, U)+turbulence-&gt;divDevRhoReff(U)==fvOptions(rho, U))</arglist>
    </member>
    <member kind="function">
      <type>UEqn</type>
      <name>relax</name>
      <anchorfile>a04038.html</anchorfile>
      <anchor>a9a717d2a556132c73a6bb389a9de48bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>constrain</name>
      <anchorfile>a04038.html</anchorfile>
      <anchor>ad9a6816dbc9c62129d40af3784545b31</anchor>
      <arglist>(UEqn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a04038.html</anchorfile>
      <anchor>a5340a84918449f06669e13812b90f046</anchor>
      <arglist>(pimple.momentumPredictor())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/diluteVdfTransportFoam/UEqn.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a04041</filename>
    <member kind="function">
      <type>volScalarField</type>
      <name>alphaRho1</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a1b37a51054a5d6ac9ee5d8015e264694</anchor>
      <arglist>(alpha1 *rho1)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>aafef8a9624495f082e4ad624cca20b3f</anchor>
      <arglist>(U1)</arglist>
    </member>
    <member kind="function">
      <type>fvVectorMatrix</type>
      <name>UEqn</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>aef873193e7f3f3e6fd7df80ba94e780c</anchor>
      <arglist>(fvm::ddt(alphaRho1, U1)+fvm::div(alphaRhoPhi1, U1)+MRF.DDt(alphaRho1+Cvm, U1)+phase1-&gt;turbulence().divDevRhoReff(U1)==virtualMassSource - Cvm *(fvm::ddt(U1)+fvm::div(phi1, U1) - fvm::Sp(fvc::div(phi1), U1))+dragSource - fvm::Sp(Kd, U1)+F+fvOptions(alpha1, rho1, U1))</arglist>
    </member>
    <member kind="function">
      <type>UEqn</type>
      <name>relax</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a9a717d2a556132c73a6bb389a9de48bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>constrain</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>ad9a6816dbc9c62129d40af3784545b31</anchor>
      <arglist>(UEqn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a5340a84918449f06669e13812b90f046</anchor>
      <arglist>(pimple.momentumPredictor())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>denseAGFoam/pU/UEqns.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/denseAGFoam/pU/</path>
    <filename>a04044</filename>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/pU/UEqns.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/polydisperseBubbleFoam/pU/</path>
    <filename>a04047</filename>
  </compound>
  <compound kind="file">
    <name>uniform.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/uniform/</path>
    <filename>a00566</filename>
    <includes id="a00569" name="uniform.H" local="yes" imported="no">uniform.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a6cfc6fde57688830e91aa5900a2a3b0b</anchor>
      <arglist>(uniform, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>ad4645290635a7726786f906917fa5138</anchor>
      <arglist>(daughterDistribution, uniform, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uniform.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/uniform/</path>
    <filename>a00569</filename>
    <includes id="a00536" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::uniform</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/univariateMomentAdvection/</path>
    <filename>a00155</filename>
    <includes id="a00158" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a2e031b2f48d8a0ab9406319748fe3375</anchor>
      <arglist>(univariateMomentAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a39775b46f08fcfec6aab7d577715ce8b</anchor>
      <arglist>(univariateMomentAdvection, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariateMomentAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/univariateMomentAdvection/</path>
    <filename>a00158</filename>
    <includes id="a00023" name="mappedPtrList.H" local="yes" imported="no">mappedPtrList.H</includes>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00032" name="basicFieldMomentInversion.H" local="yes" imported="no">basicFieldMomentInversion.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <includes id="a00161" name="univariateMomentAdvectionI.H" local="yes" imported="no">univariateMomentAdvectionI.H</includes>
    <class kind="class">Foam::univariateMomentAdvection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentAdvectionI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/univariateMomentAdvection/</path>
    <filename>a00161</filename>
  </compound>
  <compound kind="file">
    <name>univariateMomentInversion.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00269</filename>
    <includes id="a00272" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <includes id="a00005" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a2bfa8c5752536cc7ec9c8af1ba407aef</anchor>
      <arglist>(univariateMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a986535dad0b0c7383cd3f0370fa94d7e</anchor>
      <arglist>(univariateMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariateMomentInversion.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00272</filename>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00275" name="univariateMomentInversionI.H" local="yes" imported="no">univariateMomentInversionI.H</includes>
    <class kind="class">Foam::univariateMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentInversionI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00275</filename>
  </compound>
  <compound kind="file">
    <name>univariateMomentSet.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/univariateMomentSet/</path>
    <filename>a00347</filename>
    <includes id="a00350" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
  </compound>
  <compound kind="file">
    <name>univariateMomentSet.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/univariateMomentSet/</path>
    <filename>a00350</filename>
    <includes id="a00332" name="momentSet.H" local="yes" imported="no">momentSet.H</includes>
    <includes id="a00353" name="univariateMomentSetI.H" local="yes" imported="no">univariateMomentSetI.H</includes>
    <class kind="class">Foam::univariateMomentSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentSetI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentSets/univariateMomentSet/</path>
    <filename>a00353</filename>
  </compound>
  <compound kind="file">
    <name>univariatePDFTransportModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/univariatePDFTransportModel/</path>
    <filename>a00362</filename>
    <includes id="a00365" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
  </compound>
  <compound kind="file">
    <name>univariatePDFTransportModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/univariatePDFTransportModel/</path>
    <filename>a00365</filename>
    <includes id="a00359" name="PDFTransportModel.H" local="yes" imported="no">PDFTransportModel.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <includes id="a00158" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <includes id="a00368" name="univariatePDFTransportModelI.H" local="yes" imported="no">univariatePDFTransportModelI.H</includes>
    <class kind="class">Foam::PDFTransportModels::univariatePDFTransportModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
  </compound>
  <compound kind="file">
    <name>univariatePDFTransportModelI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/univariatePDFTransportModel/</path>
    <filename>a00368</filename>
  </compound>
  <compound kind="file">
    <name>univariatePopulationBalance.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/univariatePopulationBalance/</path>
    <filename>a00632</filename>
    <includes id="a00635" name="univariatePopulationBalance.H" local="yes" imported="no">univariatePopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a141d32d1d596c5abf5a48966fb726556</anchor>
      <arglist>(univariatePopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a908eacb72c5c2b3af99129191b55dc5f</anchor>
      <arglist>(populationBalanceModel, univariatePopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariatePopulationBalance.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/univariatePopulationBalance/</path>
    <filename>a00635</filename>
    <includes id="a00365" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <includes id="a00404" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <includes id="a00455" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <includes id="a00599" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <includes id="a00575" name="diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <includes id="a00623" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <includes id="a00701" name="realizableOdeSolver.H" local="yes" imported="no">realizableOdeSolver.H</includes>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::univariatePopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/VakhrushevEfremov/VakhrushevEfremov.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/VakhrushevEfremov/</path>
    <filename>a04050</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/VakhrushevEfremov/VakhrushevEfremov.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/VakhrushevEfremov/</path>
    <filename>a04053</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/VakhrushevEfremov/VakhrushevEfremov.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/VakhrushevEfremov/</path>
    <filename>a04056</filename>
    <class kind="class">Foam::aspectRatioModels::VakhrushevEfremov</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/VakhrushevEfremov/VakhrushevEfremov.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/VakhrushevEfremov/</path>
    <filename>a04059</filename>
    <class kind="class">Foam::aspectRatioModels::VakhrushevEfremov</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>Vandermonde.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/Vandermonde/</path>
    <filename>a00704</filename>
    <includes id="a00707" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
  </compound>
  <compound kind="file">
    <name>Vandermonde.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/Vandermonde/</path>
    <filename>a00707</filename>
    <includes id="a00710" name="VandermondeI.H" local="yes" imported="no">VandermondeI.H</includes>
    <class kind="class">Foam::Vandermonde</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>VandermondeI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/Vandermonde/</path>
    <filename>a00710</filename>
  </compound>
  <compound kind="file">
    <name>vdfPhaseModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/vdfPhaseModel/</path>
    <filename>a01739</filename>
  </compound>
  <compound kind="file">
    <name>vdfPhaseModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/phaseModel/vdfPhaseModel/</path>
    <filename>a01742</filename>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <class kind="class">Foam::vdfPhaseModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>vdfTransportFoam.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/vdfTransportFoam/</path>
    <filename>a01748</filename>
  </compound>
  <compound kind="file">
    <name>velocity.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/velocity/</path>
    <filename>a01787</filename>
  </compound>
  <compound kind="file">
    <name>velocity.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/velocity/</path>
    <filename>a01790</filename>
    <includes id="a01775" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::velocity</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityMomentAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/velocityMomentAdvection/</path>
    <filename>a00185</filename>
    <includes id="a00188" name="velocityMomentAdvection.H" local="yes" imported="no">velocityMomentAdvection.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>acd5c6b3cdb05c7087c8b776ca4efa8b0</anchor>
      <arglist>(velocityMomentAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0063433e8c6a011d8e10c4518da61265</anchor>
      <arglist>(velocityMomentAdvection, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityMomentAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/velocityMomentAdvection/</path>
    <filename>a00188</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00320" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <includes id="a00191" name="velocityMomentAdvectionI.H" local="yes" imported="no">velocityMomentAdvectionI.H</includes>
    <class kind="class">Foam::velocityMomentAdvection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityMomentAdvectionI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/velocityMomentAdvection/</path>
    <filename>a00191</filename>
  </compound>
  <compound kind="file">
    <name>velocityPDFTransportModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/velocityPDFTransportModel/</path>
    <filename>a00371</filename>
    <includes id="a00374" name="velocityPDFTransportModel.H" local="yes" imported="no">velocityPDFTransportModel.H</includes>
  </compound>
  <compound kind="file">
    <name>velocityPDFTransportModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/velocityPDFTransportModel/</path>
    <filename>a00374</filename>
    <includes id="a00359" name="PDFTransportModel.H" local="yes" imported="no">PDFTransportModel.H</includes>
    <includes id="a00662" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <includes id="a00188" name="velocityMomentAdvection.H" local="yes" imported="no">velocityMomentAdvection.H</includes>
    <includes id="a00377" name="velocityPDFTransportModelI.H" local="yes" imported="no">velocityPDFTransportModelI.H</includes>
    <class kind="class">Foam::PDFTransportModels::velocityPDFTransportModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityPDFTransportModelI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/PDFTransportModels/velocityPDFTransportModel/</path>
    <filename>a00377</filename>
  </compound>
  <compound kind="file">
    <name>velocityPopulationBalance.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/velocityPopulationBalance/</path>
    <filename>a00638</filename>
    <includes id="a00641" name="velocityPopulationBalance.H" local="yes" imported="no">velocityPopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>ad73f6ae7319e6e2741acfc3bb4483ea9</anchor>
      <arglist>(velocityPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a8e8124ad30b94f850ea5c10e3a6d0322</anchor>
      <arglist>(populationBalanceModel, velocityPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>velocityPopulationBalance.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/populationBalanceModels/velocityPopulationBalance/</path>
    <filename>a00641</filename>
    <includes id="a00374" name="velocityPDFTransportModel.H" local="yes" imported="no">velocityPDFTransportModel.H</includes>
    <includes id="a00398" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <includes id="a00515" name="collisionKernel.H" local="yes" imported="no">collisionKernel.H</includes>
    <includes id="a00701" name="realizableOdeSolver.H" local="yes" imported="no">realizableOdeSolver.H</includes>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::velocityPopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityQuadratureNode.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00683</filename>
    <includes id="a00686" name="velocityQuadratureNode.H" local="yes" imported="no">velocityQuadratureNode.H</includes>
  </compound>
  <compound kind="file">
    <name>velocityQuadratureNode.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00686</filename>
    <includes id="a00668" name="quadratureNode.H" local="yes" imported="no">quadratureNode.H</includes>
    <includes id="a00011" name="mappedList.H" local="yes" imported="no">mappedList.H</includes>
    <class kind="class">Foam::velocityQuadratureNode</class>
    <class kind="class">Foam::velocityQuadratureNode::iNew</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityQuadratureNodeI.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00689</filename>
  </compound>
  <compound kind="file">
    <name>diluteVdfTransportFoam/vEqns.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/diluteVdfTransportFoam/</path>
    <filename>a04062</filename>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a04062.html</anchorfile>
      <anchor>a9c0619e2525acde2954c2e5ab6925d26</anchor>
      <arglist>(label nodei=0;nodei&lt; phase2-&gt;nNodes();nodei++)</arglist>
    </member>
    <member kind="function">
      <type>phase2</type>
      <name>correct</name>
      <anchorfile>a04062.html</anchorfile>
      <anchor>a81e971669bf8585ba5ded4044ffee8dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>K2</name>
      <anchorfile>a04062.html</anchorfile>
      <anchor>a2cc87dc0dca3d6104d8094986f6b852a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oneWayCoupledVdfTransportFoam/vEqns.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/oneWayCoupledVdfTransportFoam/</path>
    <filename>a04065</filename>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a04065.html</anchorfile>
      <anchor>a60c6eb590311a7688d72c05fc51d0728</anchor>
      <arglist>(label nodei=0;nodei&lt; dilutePhase-&gt;nNodes();nodei++)</arglist>
    </member>
    <member kind="function">
      <type>dilutePhase</type>
      <name>correct</name>
      <anchorfile>a04065.html</anchorfile>
      <anchor>adef7c1d824e1994b29028413d411bf80</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VikasQuasiSecondOrderVelocityAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/VikasQuasiSecondOrderVelocityAdvection/</path>
    <filename>a00194</filename>
    <includes id="a00197" name="VikasQuasiSecondOrderVelocityAdvection.H" local="yes" imported="no">VikasQuasiSecondOrderVelocityAdvection.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::velocityAdvection</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>af0b5c7fda4c1bcad11a1956e6475ed02</anchor>
      <arglist>(VikasQuasiSecondOrder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a219c7350ad76df43e38076956113b688</anchor>
      <arglist>(velocityMomentAdvection, VikasQuasiSecondOrder, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VikasQuasiSecondOrderVelocityAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/velocity/VikasQuasiSecondOrderVelocityAdvection/</path>
    <filename>a00197</filename>
    <includes id="a00173" name="firstOrderKineticVelocityAdvection.H" local="yes" imported="no">firstOrderKineticVelocityAdvection.H</includes>
    <class kind="class">Foam::velocityAdvection::VikasQuasiSecondOrder</class>
    <namespace>Foam</namespace>
    <namespace>Foam::velocityAdvection</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/virtualMassModel/virtualMassModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a04068</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/virtualMassModel/virtualMassModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a04071</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/virtualMassModel/virtualMassModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a04074</filename>
    <class kind="class">Foam::virtualMassModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/virtualMassModel/virtualMassModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a04077</filename>
    <class kind="class">Foam::virtualMassModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>viscosityModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/viscosityModel/</path>
    <filename>a01562</filename>
  </compound>
  <compound kind="file">
    <name>viscosityModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/phaseCompressibleTurbulenceModels/kineticTheory/kineticTheorySubModels/viscosityModel/viscosityModel/</path>
    <filename>a01565</filename>
    <class kind="class">Foam::kineticTheoryModels::viscosityModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>volVelocityNode.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00692</filename>
    <includes id="a00695" name="volVelocityNode.H" local="yes" imported="no">volVelocityNode.H</includes>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>volVelocityNode.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/quadratureNode/velocityQuadratureNode/</path>
    <filename>a00695</filename>
    <includes id="a00674" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/wallDampedLift/wallDampedLift.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/wallDampedLift/</path>
    <filename>a04080</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/wallDampedLift/wallDampedLift.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/wallDampedLift/</path>
    <filename>a04083</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/liftModels/wallDampedLift/wallDampedLift.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/liftModels/wallDampedLift/</path>
    <filename>a04086</filename>
    <class kind="class">Foam::liftModels::wallDamped</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/liftModels/wallDampedLift/wallDampedLift.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/liftModels/wallDampedLift/</path>
    <filename>a04089</filename>
    <class kind="class">Foam::liftModels::wallDamped</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/wallDampingModel/wallDampingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a04092</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/wallDampingModel/wallDampingModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a04095</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDampingModels/wallDampingModel/wallDampingModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a04098</filename>
    <class kind="class">Foam::wallDampingModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDampingModels/wallDampingModel/wallDampingModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a04101</filename>
    <class kind="class">Foam::wallDampingModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDependentModel/wallDependentModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDependentModel/</path>
    <filename>a04104</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDependentModel/wallDependentModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDependentModel/</path>
    <filename>a04107</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallDependentModel/wallDependentModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallDependentModel/</path>
    <filename>a04110</filename>
    <class kind="class">Foam::wallDependentModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallDependentModel/wallDependentModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallDependentModel/</path>
    <filename>a04113</filename>
    <class kind="class">Foam::wallDependentModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/wallLubricationModel/wallLubricationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a04116</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/wallLubricationModel/wallLubricationModel.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a04119</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/wallLubricationModels/wallLubricationModel/wallLubricationModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a04122</filename>
    <class kind="class">Foam::wallLubricationModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/wallLubricationModels/wallLubricationModel/wallLubricationModel.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a04125</filename>
    <class kind="class">Foam::wallLubricationModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>weightsAndAbscissae.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/weightsAndAbscissae/</path>
    <filename>a01793</filename>
  </compound>
  <compound kind="file">
    <name>weightsAndAbscissae.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/weightsAndAbscissae/</path>
    <filename>a01796</filename>
    <includes id="a01775" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::weightsAndAbscissae</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/Wellek/Wellek.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/Wellek/</path>
    <filename>a04128</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/Wellek/Wellek.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/Wellek/</path>
    <filename>a04131</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/aspectRatioModels/Wellek/Wellek.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/aspectRatioModels/Wellek/</path>
    <filename>a04134</filename>
    <class kind="class">Foam::aspectRatioModels::Wellek</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/aspectRatioModels/Wellek/Wellek.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/aspectRatioModels/Wellek/</path>
    <filename>a04137</filename>
    <class kind="class">Foam::aspectRatioModels::Wellek</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/WenYu/WenYu.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/WenYu/</path>
    <filename>a04140</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/WenYu/WenYu.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/WenYu/</path>
    <filename>a04143</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/dragModels/WenYu/WenYu.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/dragModels/WenYu/</path>
    <filename>a04146</filename>
    <class kind="class">Foam::dragModels::WenYu</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/dragModels/WenYu/WenYu.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/dragModels/WenYu/</path>
    <filename>a04149</filename>
    <class kind="class">Foam::dragModels::WenYu</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>zetaUnivariateAdvection.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/zetaUnivariateAdvection/</path>
    <filename>a00164</filename>
    <includes id="a00167" name="zetaUnivariateAdvection.H" local="yes" imported="no">zetaUnivariateAdvection.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::univariateAdvection</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a2c13ab9f24a5e031ad2a84edd3f1df1b</anchor>
      <arglist>(zeta, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a25862155d3021963c230ba7635e00ea6</anchor>
      <arglist>(univariateMomentAdvection, zeta, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zetaUnivariateAdvection.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/src/quadratureMethods/momentAdvection/univariate/zetaUnivariateAdvection/</path>
    <filename>a00167</filename>
    <includes id="a00158" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <class kind="class">Foam::univariateAdvection::zeta</class>
    <namespace>Foam</namespace>
    <namespace>Foam::univariateAdvection</namespace>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/Zuber/Zuber.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/Zuber/</path>
    <filename>a04152</filename>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/Zuber/Zuber.C</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/Zuber/</path>
    <filename>a04155</filename>
  </compound>
  <compound kind="file">
    <name>multiphase/interfacialModels/virtualMassModels/Zuber/Zuber.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/multiphase/interfacialModels/virtualMassModels/Zuber/</path>
    <filename>a04158</filename>
    <class kind="class">Foam::virtualMassModels::Zuber</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>velocityDistributionTransport/interfacialModels/virtualMassModels/Zuber/Zuber.H</name>
    <path>/home/alberto/OpenFOAM/alberto-7/OpenQBMM/applications/solvers/velocityDistributionTransport/interfacialModels/virtualMassModels/Zuber/</path>
    <filename>a04161</filename>
    <class kind="class">Foam::virtualMassModels::Zuber</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernel</name>
    <filename>a02080.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>ae635445d544ded93442f8f985f515459</anchor>
      <arglist>(&quot;aggregationKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a3efd62232eb1e2055550d4cd0be4880f</anchor>
      <arglist>(autoPtr, aggregationKernel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aggregationKernel</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a62c9e0113594b969e61c76e071b7a79b</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aggregationKernel</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a22dedc37c6e012efb8f5aa23649d994c</anchor>
      <arglist>(const aggregationKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aggregationKernel</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>ad207fdb33ae3b991ec3e94068c03a307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>afa541a84566027fc2cbd6bbcd0498331</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>aggregationSource</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a5592a4ae72635367e55a95e5383f9501</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const scalarQuadratureApproximation &amp;quadrature, const label enviroment)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>aggregationSource</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a3bff6580f2decb13d53d1a1aa31eae2d</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const velocityQuadratureApproximation &amp;quadrature, const label enviroment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>ab8b637851dde130d3fb14b2c555f54c0</anchor>
      <arglist>(const aggregationKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; aggregationKernel &gt;</type>
      <name>New</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>aa4fd05f8720fbd55876a9a023be94855</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>nodeSource</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a4345b86b14d371c5b67f190b7c249c87</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label momentOrder) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>massNodeSource</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a12af225f31f885e30a637c946a88eeed</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label momentOrder) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Ca_</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a7547e6fb837b9ab15b147886567d8cf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::AGmomentTransportModel</name>
    <filename>a02628.html</filename>
    <member kind="function">
      <type></type>
      <name>AGmomentTransportModel</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>ae39de365470198ad92e7143adca3df8c</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const phaseModel &amp;phase, volScalarField &amp;Theta, volSymmTensorField &amp;Sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AGmomentTransportModel</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>a9d73ebc944245abb27175b598b47caf8</anchor>
      <arglist>(const AGmomentTransportModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AGmomentTransportModel</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>a52042bbe2c4bdd18371fdaff22925279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>aecaadd801e2f3fc52c9a0b229cef34b8</anchor>
      <arglist>(const surfaceScalarField &amp;h2f)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>ddtAlphaDilute</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>a0a87bd4df172cc625af0c1616403fdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>maxUxDx</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>ac41d1cb1e1c6742a684b14132b65cdd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02628.html</anchorfile>
      <anchor>a546b75b0c1d20d932b88f4d848811169</anchor>
      <arglist>(const AGmomentTransportModel &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::breakupKernels::Alopaeus</name>
    <filename>a02960.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::bubbleBreakupKernels::Alopaeus</name>
    <filename>a02348.html</filename>
    <base>Foam::bubbleBreakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02348.html</anchorfile>
      <anchor>a74455590faa86d134eeddfaddb21615b</anchor>
      <arglist>(&quot;Alopaeus&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Alopaeus</name>
      <anchorfile>a02348.html</anchorfile>
      <anchor>a7ebf1513d77c1243a91f219de4cbde10</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Alopaeus</name>
      <anchorfile>a02348.html</anchorfile>
      <anchor>aa4b9b954599871d4466dcbe63491da13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02348.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Kb</name>
      <anchorfile>a02348.html</anchorfile>
      <anchor>a0c36b2983a634da9e4dc3f4e93b54099</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02348.html</anchorfile>
      <anchor>ad476441e4b38a99e8eb1d06e603f57b7</anchor>
      <arglist>(const label celli, const label nodei) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::alphaAndDiameter</name>
    <filename>a02840.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a74cb709dface36220c56934feb4f20a7</anchor>
      <arglist>(&quot;alphaAndDiameter&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>alphaAndDiameter</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>aae9dd882e50b0c158126fc3bccb401ca</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentsOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~alphaAndDiameter</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>aae4b1815ca8535bfcf9fd8770973a928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a37dae16347e7b02df93a34b5d02466f1</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a135ad6906ed8cd07385bd3578c5026cb</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a5708950b309ed94dc9f0bf223cb46533</anchor>
      <arglist>(const label patchi, const label facei)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>alpha_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>afc7f837218ee9a841a3667dbca785455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>scale_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a30f6167e8ea632a8c332563bdd3fb056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>rho_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a074e4dd0196964d1c3865f6a96d9551b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>ds_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a579a777ffb7096a555837094c5bd0378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>alphas_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>af21c6d47110a0b8c0a136b6cfbd35aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sumAlpha_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a6368e40af66582319b6cfe3036c01caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>massBased_</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a2bd9081e75267830b106eb81ba6229b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::alphaAndDiameterVelocity</name>
    <filename>a02844.html</filename>
    <base>Foam::momentGenerationSubModels::alphaAndDiameter</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a5097356a302da145eabebe3200b62111</anchor>
      <arglist>(&quot;alphaAndDiameterVelocity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>alphaAndDiameterVelocity</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a0ec9ec5f02c2ac4f0aeccf8acbe3c78b</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentsOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~alphaAndDiameterVelocity</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a5ce48417805778e8efad97c34e2a572f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a37dae16347e7b02df93a34b5d02466f1</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a135ad6906ed8cd07385bd3578c5026cb</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a5708950b309ed94dc9f0bf223cb46533</anchor>
      <arglist>(const label patchi, const label facei)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::fluxSplittingFunctions::alphaG0</name>
    <filename>a02636.html</filename>
    <base>Foam::kineticTheoryModels::fluxSplittingFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02636.html</anchorfile>
      <anchor>a4dea7165098dcd24bbd90907ea7699f5</anchor>
      <arglist>(&quot;alphaG0&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>alphaG0</name>
      <anchorfile>a02636.html</anchorfile>
      <anchor>ad9f1599f12d9006c040bc05d33f50062</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~alphaG0</name>
      <anchorfile>a02636.html</anchorfile>
      <anchor>a9efa054f846d2c39295d277eb06544ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>h2</name>
      <anchorfile>a02636.html</anchorfile>
      <anchor>af71abecd883f59d2e3a599fe5d8677d2</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const volScalarField &amp;ppfr, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::fluxSplittingFunctions::alphG0</name>
    <filename>a03024.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::anisotropicGaussian</name>
    <filename>a03020.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::anisotropicGaussian</name>
    <filename>a02632.html</filename>
    <base>Foam::kineticTheoryModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>ac7e000b256186ba1722bee6949885372</anchor>
      <arglist>(&quot;anisotropicGaussian&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>anisotropicGaussian</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a10238fd08f4f57d2a5a338e90b499514</anchor>
      <arglist>(const dictionary &amp;dict, const phaseModel &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~anisotropicGaussian</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a75bdb4a5728908746748b14da04f57ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>Sigma</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a37b097e50939f6f10311074ec7659007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a292a3944ebf0a4acba8c14844ddfe780</anchor>
      <arglist>(const volScalarField &amp;beta, const volScalarField &amp;alpha, const volTensorField &amp;gradU, const volSymmTensorField D)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportMoments</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a0f535fd73305c563ea38d9ef28017251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>maxUxDx</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a877ed22fcda0ce6947e27c2f80d0e7ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>h2</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a07c12d7cf3505bd6e8696b86d45bd12c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>h2f</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>abdaab31fbb55d1781b7012bddf69b1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>ddtAlphaDilute</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>a10faacebb1182c246c8dbdff7ffbf395</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::Antal</name>
    <filename>a02596.html</filename>
    <base>Foam::wallLubricationModel</base>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>acfa70bfca9ccb6dd70b89195da96e06e</anchor>
      <arglist>(&quot;Antal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Antal</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>a0e547060df61ae133caa2df0f9cd67fe</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Antal</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>a362a51a461ff1aabd4d339e2f87fcacf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>acfa70bfca9ccb6dd70b89195da96e06e</anchor>
      <arglist>(&quot;Antal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Antal</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>a0e547060df61ae133caa2df0f9cd67fe</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Antal</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>a362a51a461ff1aabd4d339e2f87fcacf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02596.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModel</name>
    <filename>a02328.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>ad760a9f6c9d80c4dc8fbe3a00f2a2812</anchor>
      <arglist>(&quot;aspectRatioModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a6ee61f161964580a1a1cf5e1d46c1991</anchor>
      <arglist>(autoPtr, aspectRatioModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aspectRatioModel</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>abbfb973190ee67e9e285cc3c58b28de3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aspectRatioModel</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a751ad20c22e2a967561f84836821642f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a0c0a8bd45b4311a22e50753fb2c62418</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a31e53ec7ba19fc36ffd2c53c3ca80838</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>ad760a9f6c9d80c4dc8fbe3a00f2a2812</anchor>
      <arglist>(&quot;aspectRatioModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a6ee61f161964580a1a1cf5e1d46c1991</anchor>
      <arglist>(autoPtr, aspectRatioModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aspectRatioModel</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>abbfb973190ee67e9e285cc3c58b28de3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aspectRatioModel</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a751ad20c22e2a967561f84836821642f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a0c0a8bd45b4311a22e50753fb2c62418</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; aspectRatioModel &gt;</type>
      <name>New</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a6b9f57269b1c53c59b04cd962ae9656f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; aspectRatioModel &gt;</type>
      <name>New</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a6b9f57269b1c53c59b04cd962ae9656f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02328.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::AUSM</name>
    <filename>a02932.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::fluxFunctions::AUSM</name>
    <filename>a02300.html</filename>
    <base>Foam::fluxFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02300.html</anchorfile>
      <anchor>a769b5baf5d8eaf80ee8c27de0e26159a</anchor>
      <arglist>(&quot;AUSM&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AUSM</name>
      <anchorfile>a02300.html</anchorfile>
      <anchor>aa9670182a8a0956616d04e99642c6820</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AUSM</name>
      <anchorfile>a02300.html</anchorfile>
      <anchor>a71ba9d27b62f9a0c002ae4ef0df5bf61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFluxes</name>
      <anchorfile>a02300.html</anchorfile>
      <anchor>a74cf37df2d9a52c5fc680df46be08b90</anchor>
      <arglist>(surfaceScalarField &amp;massFlux, surfaceVectorField &amp;momentumFlux, surfaceScalarField &amp;energyFlux, const volScalarField &amp;rho, const volVectorField &amp;U, const volScalarField &amp;H, const volScalarField &amp;p, const volScalarField &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::AUSMPlus</name>
    <filename>a02936.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::fluxFunctions::AUSMPlus</name>
    <filename>a02304.html</filename>
    <base>Foam::fluxFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02304.html</anchorfile>
      <anchor>adc185461e11d5a33db8242433dc0082e</anchor>
      <arglist>(&quot;AUSMPlus&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AUSMPlus</name>
      <anchorfile>a02304.html</anchorfile>
      <anchor>ad4b639accc5bdfe76948b8ef98da3060</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AUSMPlus</name>
      <anchorfile>a02304.html</anchorfile>
      <anchor>aad9b4ced322647a5a7f4f703bc2328ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFluxes</name>
      <anchorfile>a02304.html</anchorfile>
      <anchor>a74cf37df2d9a52c5fc680df46be08b90</anchor>
      <arglist>(surfaceScalarField &amp;massFlux, surfaceVectorField &amp;momentumFlux, surfaceScalarField &amp;energyFlux, const volScalarField &amp;rho, const volVectorField &amp;U, const volScalarField &amp;H, const volScalarField &amp;p, const volScalarField &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::AyaziShamlou</name>
    <filename>a02108.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ae412b250cff181374b985c3429d4bb6f</anchor>
      <arglist>(&quot;AyaziShamlou&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AyaziShamlou</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a781a7506bbb61bec5f20cc157c852dac</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AyaziShamlou</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>adef82df48b1ab9571151c9ff6ce21c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a946b65699921072f6210c5f83054e8a1</anchor>
      <arglist>(const scalar &amp;abscissa, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::basicFieldMomentInversion</name>
    <filename>a01876.html</filename>
    <base>Foam::fieldMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a16c7e2969d7f2346945d833b832e6aab</anchor>
      <arglist>(&quot;basicFieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basicFieldMomentInversion</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a903535eb2379c734d800ba2f8469e20e</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basicFieldMomentInversion</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>ae3899381a24cdd5662ecfd7afebd94b3</anchor>
      <arglist>(const basicFieldMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~basicFieldMomentInversion</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a4c8055bf05bb6465ec815251cdfa03e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a6eeb7834291cdecf8936918673636e44</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a4b2cd3c44f001f05df26f04b3c900cd3</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>ad60e180e66e91d1501774bf8ec2eda42</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a33eb19d3a03a570944d2a0483de911a7</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a5fa7f7ae82b0ffa37ab81e5c97aee5ee</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a5a67470b8855db049035f297fbeb51aa</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>aba5d56dcc3295fecfd325aae4791507f</anchor>
      <arglist>(const basicFieldMomentInversion &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::basicVelocityFieldMomentInversion</name>
    <filename>a01880.html</filename>
    <base>Foam::fieldMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a6461c6af0a6cad7cc84e0f95b9d2fbbd</anchor>
      <arglist>(&quot;basicVelocityFieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basicVelocityFieldMomentInversion</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a1dc3e17387bccb7a179163eb4ce92f90</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basicVelocityFieldMomentInversion</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a7b53d5270053f2f05e8c66f630518abc</anchor>
      <arglist>(const basicVelocityFieldMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~basicVelocityFieldMomentInversion</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a0f145fb7ce885cee4a047c5ee165fe5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a6eeb7834291cdecf8936918673636e44</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a4b2cd3c44f001f05df26f04b3c900cd3</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ad60e180e66e91d1501774bf8ec2eda42</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a33eb19d3a03a570944d2a0483de911a7</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a5fa7f7ae82b0ffa37ab81e5c97aee5ee</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a5a67470b8855db049035f297fbeb51aa</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a81fd90244ba6fc05107bdf3ea609ea31</anchor>
      <arglist>(const basicVelocityFieldMomentInversion &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModels::Beisheuvel</name>
    <filename>a02360.html</filename>
    <base>Foam::bubblePressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02360.html</anchorfile>
      <anchor>a384da6caa2f8744544b10d3f9141c99a</anchor>
      <arglist>(&quot;Beisheuvel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Beisheuvel</name>
      <anchorfile>a02360.html</anchorfile>
      <anchor>ac379b6335cddfa2283aa5385160f867c</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Beisheuvel</name>
      <anchorfile>a02360.html</anchorfile>
      <anchor>a91bfb9c374d238a7138ba74d00bfc1a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>pb</name>
      <anchorfile>a02360.html</anchorfile>
      <anchor>a99b0ec8e2c25f0515b0846db370ce415</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModels::BeisheuvelBubblePressure</name>
    <filename>a02972.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::betaEQMOM</name>
    <filename>a02016.html</filename>
    <base>Foam::extendedMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a352af176e65dc7b012299c16c31a38b3</anchor>
      <arglist>(&quot;beta&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>betaEQMOM</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>adf5c9d013afeed0207b5030f2de12c28</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~betaEQMOM</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a493e12f42c3d28984ef116da6b21ad73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a872602e3d9bce4c696be2c2684a05e5a</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a1eb2822d55fbaa8060321a24fc197329</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a88e521ae957743da06eec8e0ab777e2e</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>abee7f03ce3d0afa1dbc462ff6da2fff9</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a5831aae7a1d440271b5184f59f912503</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a479ec71576844909c5c0756350c24e2f</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>f</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>ae660e54162d92f5cea8aaded723ff23c</anchor>
      <arglist>(const scalarField &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::collisionKernels::BGKCollision</name>
    <filename>a02132.html</filename>
    <base>Foam::populationBalanceSubModels::collisionKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>af24c16ba495eab996742e1b8e1cd8e0d</anchor>
      <arglist>(&quot;BGK&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BGKCollision</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ad44943d299322bc57df26538b9e206ca</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BGKCollision</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a8de209dc86409b156419033c20ad0b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>implicit</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a0fba4d436b57c1c8b57cc8594c2093b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCells</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>af9ee43eb1d9fead9bb95db6574ff3394</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>explicitCollisionSource</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>af171162507e90e184cc717f790994747</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitCollisionSource</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a4b834804326a1b050c84469c05c232fc</anchor>
      <arglist>(const volVelocityMoment &amp;m) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>void(*</type>
      <name>momentFunction</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a1ee13383a86e2dacd8a1a07430b93ccf</anchor>
      <arglist>)(mappedScalarList &amp;Meq, const scalar &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;, const symmTensor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual symmTensor</type>
      <name>covariance</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>aaa66ff45b513af474d38b4138817db43</anchor>
      <arglist>(const label celli, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual symmTensor</type>
      <name>covariance</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ac90f33ae88e966850a62942b7cd610d7</anchor>
      <arglist>(const mappedScalarList &amp;moments, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual scalar</type>
      <name>e</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a40f05e08643e6a0d18761b89a8f24f03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment000</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a077d4fd55f06e7bc02fe17c4456f2564</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment001</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a20e7ebe34f76444ace93e4787e429adb</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment010</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a45d13f93752400808323b26d6a18b217</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment100</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a89a4f7c421cbb333bb73b68c5b340563</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment002</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a6dcc8816675aff9a6d9d3e6255bcad44</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment011</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>af28979c10026ed8304a01285eff7fca6</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment020</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a30b110cfe1da3ae91b9d09a05fed5a5e</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment101</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ad358f01ba45364b51ccc174a2f747605</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment110</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ad18987f7eb508248133c8362f9a16b73</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment200</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a41ac4906c044ee9502772f1baaf2f031</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment003</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ac2c1be304782d6ece1add3de7b325d03</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment012</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a8ff5b07ed124778f1aff67bd7d4c9a75</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment021</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a511cad7c64172abb8fe4cdb8d3aab510</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment030</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a37bfe15f9393e9388cf1635cbe6069d7</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment102</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ac5a19578d4ad280e992aad26415e3dfc</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment111</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>aaafc9e37eeb54e373bf012aec0483e33</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment120</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>aaee24c3f74c68126752ba9224fc515ee</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment201</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a2823bed2d260bbb4fc15e73be8234296</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment210</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>afaf2eb60dd57cfe134cb475536ecd4fa</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment300</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ae0ab6ad2dfc6a7ba3b49b81badff8c0a</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment004</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a832bc10f7c4eee14b8597c5143041caf</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment013</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a28f7cef6e2ea8b7aac4a963a6564f829</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment022</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a60c0ae6e83007030242b86d7638f16f4</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment031</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a80558c63281f04f9d6a7067a43f1e344</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment040</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ac597cb72a078a4484707fe813876e083</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment103</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a28f4670b3f99dc1d064fb49b7b30c670</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment130</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>afee2961b69ca70f1f2490d02aaf70bd8</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment202</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a77b0b72124c1f5c8205cff69112c981d</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment220</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>adf7eaf6f39a302b979d29d81ed89fca5</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment301</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>adf2408cacc26aa477bf79ac3367213c9</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment310</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ade72a7d9fbc22135230bab8fe8f7858b</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment400</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a3772ab6e39ed608aeacdb64967a62059</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment005</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a1cc9a14e91a03b11adc1ab60c92bef57</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment014</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ab271cc34d64d33bb00bf5dc49a47ef4c</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment023</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a4bf94c8a5ce69c8325fe986a922097c4</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment032</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a9765319d56cc7dc3f0be07faf0debde3</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment041</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a2a21833c6d8c909db2ca36c0a1ea2e45</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment050</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ae51cce0d8e74afc076272ffccdec59e7</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment104</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>af9d53e63957039c05a207e31758d600b</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment140</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a5247e23bb27682633155215aeaa2672e</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment203</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a6747cddca73fbc3cade9012935b4c72c</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment230</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a95df02ae881dfaff31cb84c0043437f2</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment302</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ab9125920bff614be2455018fae57af6d</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment320</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a7198ab282e0b28d53ac61d92447e867e</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment401</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a0aa9a12a0c74934e03ebae6c3966ea90</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment410</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ad60791ff249c5cbcb1e63b471ed1bd32</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment500</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>acc2cedfbdd55ff2ac27b980768e891ac</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment015</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a232030ecf1c99d3a045fdcda9df8bec3</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment024</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a9c19817bc95ed78fb478e1474cbaef72</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment042</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a9edf32ba9768b2ee4e26c54eb450aed0</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment051</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a294b707a557ec1962e6445d907b22650</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment204</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a8f6cf272a95b42e5f6037d8d40129f9c</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment240</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a5a80c19ce82cddb1065d87bcef9b3cca</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment105</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a4499235f2eba5ad65e780b66a0dc3870</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment150</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a1155ee210499b6f55fa70675d3d1c3d7</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment402</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a2a7d81d04938deb99fac3688f2d3269d</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment420</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a436a38c4d9686bf70cc377aa7ae0e073</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment501</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a2632f26f2c8a2ef03bfb3409fb3a07a4</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment510</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a940af4a07b9fd445059803dae0e0a42b</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment025</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>af48a82f1afbdb8eaab6a87865c3a7df4</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment052</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ab45bf9be0277c3605e5c293e6a632d9d</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment205</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a6e18db9e4a03b33abd4b8958ed9945c1</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment250</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>ac646b4b924912f4eada253eb3d843278</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment502</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a16ec5a65f87ed73e3ffa00c062a71f3e</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>moment520</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>acc6814cde429ce22a00f21825a6133d4</anchor>
      <arglist>(mappedScalarList &amp;Meq_, const scalar &amp;m0, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w, const symmTensor &amp;sigma)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mappedPtrList&lt; volScalarField &gt;</type>
      <name>Meq_</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>aada197b30489441ac854080d3eef514c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; momentFunction &gt;</type>
      <name>equilibriumMomentFunctions_</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a45817f28c71c701e86c7b888d055664d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; mappedScalarList &gt;</type>
      <name>velocityMoments_</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a74ec2f96d377466b8ddeb4f05b249e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; PtrList&lt; mappedScalarList &gt; &gt;</type>
      <name>Gs_</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a27c4a3f71dd1f52fb13e93b25afa8976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarListList</type>
      <name>Ks_</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a4a94bd1d9c4b2857825a871fb6bfbb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>minM0_</name>
      <anchorfile>a02132.html</anchorfile>
      <anchor>a11626828b5f0782f5f2dc244c3e57352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::BlendedInterfacialModel</name>
    <filename>a02764.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BlendedInterfacialModel</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>aa0e40976200303629f374a9a871d0178</anchor>
      <arglist>(const phasePair::dictTable &amp;modelTable, const blendingMethod &amp;blending, const phasePair &amp;pair, const orderedPhasePair &amp;pair1In2, const orderedPhasePair &amp;pair2In1, const bool correctFixedFluxBCs=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlendedInterfacialModel</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>ae771c55abdcfcff3d48045871b138673</anchor>
      <arglist>(const BlendedInterfacialModel&lt; modelType &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlendedInterfacialModel</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>af965d40a66a82b4475329a9a4614a902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasModel</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>a3688d4f04f2f1c40004bf3e7b52970a8</anchor>
      <arglist>(const phaseModel &amp;phase) const</arglist>
    </member>
    <member kind="function">
      <type>const modelType &amp;</type>
      <name>phaseModel</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>ab1aed77548c71835cceee94b00be1825</anchor>
      <arglist>(const phaseModel &amp;phase) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>ad9812f699a8ce285f6d86dbf0bbd5738</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>ac84c6bc12c46ded8e9d6f2c1a622b9e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>ad04c2b53b5c6fcf51cc6d3912209587b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>a9a25c6f30983c0da5470765be77bfda7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; GeometricField&lt; Type, fvPatchField, volMesh &gt; &gt;</type>
      <name>F</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>aa7bccb19844be9e4717f316de98f7341</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; GeometricField&lt; Type, fvPatchField, volMesh &gt; &gt;</type>
      <name>F</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>a76fb37687add802b06bcb8e37b27fabb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>a9ce506be691f1423ebdbc73c530b1245</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>add8d839deaf547f51bb411f35af75509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>a10e683188d75faee03a746bc4ecc9587</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>afc32666fde6f56000758afa8668d9518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02764.html</anchorfile>
      <anchor>a45cb1c6d15ae54205a876fe7586cf5d8</anchor>
      <arglist>(const BlendedInterfacialModel&lt; modelType &gt; &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethod</name>
    <filename>a02768.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>a1c3033ffacce094c1fe820f53f80a6e0</anchor>
      <arglist>(&quot;blendingMethod&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>a09a8889086a336879a6bb9bda0d7bad9</anchor>
      <arglist>(autoPtr, blendingMethod, dictionary,(const dictionary &amp;dict, const wordList &amp;phaseNames),(dict, phaseNames))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blendingMethod</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>af1b1094fa2a867b01c841ea956905237</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~blendingMethod</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>abf63a6ef76e444442518963896048ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>ac765eaecfb2347b3998cab9c39ebd2e5</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>ad3e6db6051c6018a3d373f7705a3d072</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; blendingMethod &gt;</type>
      <name>New</name>
      <anchorfile>a02768.html</anchorfile>
      <anchor>afbdcce2767aca7cef1b3dbc9d16af6e8</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::collisionKernels::BoltzmannCollision</name>
    <filename>a02136.html</filename>
    <base>Foam::populationBalanceSubModels::collisionKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>ad23bb5ad8e74bf885753d150ac0dfdb4</anchor>
      <arglist>(&quot;Boltzmann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoltzmannCollision</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>ac68c8f1d8e3a1bdf56d565a4bec905b4</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoltzmannCollision</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>a20a768577c070f9fff17f5aa2990ef09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preUpdate</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>a67bcb430d7ad566b61c43fbdb2ef7eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCells</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>af9ee43eb1d9fead9bb95db6574ff3394</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>explicitCollisionSource</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>af171162507e90e184cc717f790994747</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitCollisionSource</name>
      <anchorfile>a02136.html</anchorfile>
      <anchor>a4b834804326a1b050c84469c05c232fc</anchor>
      <arglist>(const volVelocityMoment &amp;m) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernel</name>
    <filename>a02112.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ad27ab1fecde3f5a152854fe04213389e</anchor>
      <arglist>(&quot;breakupKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>aade6890db54ade836df50d656c5200c5</anchor>
      <arglist>(autoPtr, breakupKernel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>breakupKernel</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a291975a4184ffb81c78ae7a7dfb85921</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>breakupKernel</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>aa176e21e4d8fa96704c0c870a20ff5b2</anchor>
      <arglist>(const breakupKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~breakupKernel</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a2dcf50d8d0b3c8a783c5efb6e41c30c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>aa101e8d4df7592bb022512baf167b3e4</anchor>
      <arglist>(const scalar &amp;abscissa, const label celli, const label environment=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>breakupSource</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ae1a303d17774d86168aaf91577ad93ce</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const scalarQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>breakupSource</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a5fe023a862fac6f804f5c324ee1ca10d</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a1d3c9d94596f346923f6f104f52bf552</anchor>
      <arglist>(const breakupKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; breakupKernel &gt;</type>
      <name>New</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ab499b2327814c15e167416a75c06fd61</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>nodeSource</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ab91a7b8f2d7a007e2cd5430a6366ba9b</anchor>
      <arglist>(const scalar &amp;abscissa, const label momentOrder) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>massNodeSource</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a752c7ce3f4614ea6c01ff43a450b11e9</anchor>
      <arglist>(const scalar &amp;abscissa, const label momentOrder) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cb_</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a3c52b9b797dfa899208f7b7a68d0fadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; Foam::populationBalanceSubModels::daughterDistribution &gt;</type>
      <name>daughterDistribution_</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a828257b6b9280a36e11ebcc3e1953588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::Brownian</name>
    <filename>a02084.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02084.html</anchorfile>
      <anchor>ab79c0cace563122099e6ab3516ef4f1f</anchor>
      <arglist>(&quot;Brownian&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Brownian</name>
      <anchorfile>a02084.html</anchorfile>
      <anchor>abd4a2157ea96052400820ceafb702b91</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Brownian</name>
      <anchorfile>a02084.html</anchorfile>
      <anchor>a1494ac836158c04e01bf0d61faab3e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02084.html</anchorfile>
      <anchor>a3a5510fce9094461685717d84f4fe6fe</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::bubbleBreakupKernel</name>
    <filename>a02964.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::bubbleBreakupKernel</name>
    <filename>a02352.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>aa1c0289a92ada7fe1fb986c900477f0c</anchor>
      <arglist>(&quot;bubbleBreakupKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>ad9b40458a0329f3de0a9ab43004f4ff6</anchor>
      <arglist>(autoPtr, bubbleBreakupKernel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bubbleBreakupKernel</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>acb689ab27795fb6898f3880daa54e0e0</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bubbleBreakupKernel</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a6ef0834f7c623a475d3da4cae7dcf49c</anchor>
      <arglist>(const bubbleBreakupKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~bubbleBreakupKernel</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a3b294068c4fa96f1c49dda6c1ed4cd6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a99b02345a8a15d3c5ea2844a2253f510</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Kb</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>ac0ae32cecf82a97f4784b91a9c5025c1</anchor>
      <arglist>(const label nodei) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>ae9f72d84534db35c66c8ea8b164cb66a</anchor>
      <arglist>(const label celli, const label nodei) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>adc58c27a80cf7d055ee14d3dc575090d</anchor>
      <arglist>(const bubbleBreakupKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; bubbleBreakupKernel &gt;</type>
      <name>New</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a3b4a2da4471e0c666ebefdbd9e5a038e</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cb_</name>
      <anchorfile>a02352.html</anchorfile>
      <anchor>a3c52b9b797dfa899208f7b7a68d0fadb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModel</name>
    <filename>a02364.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>ad013020947e5554096573c24be1d944e</anchor>
      <arglist>(&quot;bubblePressureModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>a8e11782fd3f845282fa72b9e83073998</anchor>
      <arglist>(autoPtr, bubblePressureModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bubblePressureModel</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>ab6e3ff5715905bfdcc970e95775727a2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~bubblePressureModel</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>aefde78cb0940fb7f4a42a5fdd24cb208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pb</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>a8632e323ca140e6c49f01ba5e4c26d47</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>ad0268bf7343208b39bbfc168ccad6182</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>divDevRhoReff</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>a45ec856086c435732845fb1c8f18d6de</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>a7d1c3b49efcebbcbdc45cb61df4fc74d</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; bubblePressureModel &gt;</type>
      <name>New</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>acf4740ee4f554effa2e90422a382ac39</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>a6307eb221338d4af3a7880e0540b6ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>Cbp_</name>
      <anchorfile>a02364.html</anchorfile>
      <anchor>aa4d44b3a345947baaa1c1eecf923e07a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Burns</name>
    <filename>a02516.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>af9da51228db084a4ec991144469d9396</anchor>
      <arglist>(&quot;Burns&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Burns</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a52e60ca4d68b79b1a841b6ed341f4638</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Burns</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a1a534558e80b1a88451c1f02b6ab56a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>af9da51228db084a4ec991144469d9396</anchor>
      <arglist>(&quot;Burns&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Burns</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a52e60ca4d68b79b1a841b6ed341f4638</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Burns</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a1a534558e80b1a88451c1f02b6ab56a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTable</name>
    <filename>a02264.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>ae536981b7849321760a7529c18eb11c1</anchor>
      <arglist>(&quot;ButcherTable&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>adb5ac224f23a5e705cb0a98fdca11e89</anchor>
      <arglist>(autoPtr, ButcherTable, dictionary,(const fvMesh &amp;mesh),(mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButcherTable</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>a3ee28d3e981261eff089485300794234</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ButcherTable</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>acc3fdd363ceb09ae19fba8ac2312b7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>a3613d52b0696cd3355656d23a588c4ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>ab6e71e3125fbdc31d88696a44239d2ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>abc5fb4cb053b94cb8cfe379524d43c1b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; ButcherTable &gt;</type>
      <name>New</name>
      <anchorfile>a02264.html</anchorfile>
      <anchor>a831ec1894c7ecbda66b554e3e5d0531e</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModels::CarnahanStarling</name>
    <filename>a02712.html</filename>
    <base>Foam::kineticTheoryModels::radialModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02712.html</anchorfile>
      <anchor>a7d4db64d4725848e9d99c78da6995f3c</anchor>
      <arglist>(&quot;CarnahanStarling&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CarnahanStarling</name>
      <anchorfile>a02712.html</anchorfile>
      <anchor>a20a8ec8a04a7980cc50a82f26b36e24f</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CarnahanStarling</name>
      <anchorfile>a02712.html</anchorfile>
      <anchor>a5f7fbca20ba93e2ec320ab06b57fc08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a02712.html</anchorfile>
      <anchor>a5317f8cb29ac522c4d7b82ab1b7bc245</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a02712.html</anchorfile>
      <anchor>a56b9b7860b3f308982fda10a9724be08</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernels::Chesters</name>
    <filename>a02372.html</filename>
    <base>Foam::coalescenceEfficiencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02372.html</anchorfile>
      <anchor>a5e7fe3e846793f3cbb5c66dd9b9d248e</anchor>
      <arglist>(&quot;Chesters&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Chesters</name>
      <anchorfile>a02372.html</anchorfile>
      <anchor>a71ab90661d29cbc1a57f7846f4187772</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Chesters</name>
      <anchorfile>a02372.html</anchorfile>
      <anchor>ad8a82ffca55c9da6393d332c88cc060d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02372.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02372.html</anchorfile>
      <anchor>aa4f6d3411e9f9168ecb7d78572be6520</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02372.html</anchorfile>
      <anchor>a35a2484b126b3a30d82fbce52ebf5725</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::coalescenceEfficiencyKernels::Chesters</name>
    <filename>a02976.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentInversions::CHyQMOM</name>
    <filename>a01976.html</filename>
    <base>Foam::multivariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a9bdbc6517c482b5ad792656608d2fdf8</anchor>
      <arglist>(&quot;CHyQMOM&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CHyQMOM</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a8a223864db0256c9b25522d4dbc48490</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CHyQMOM</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a53c1bf223b338cb1b40ed2b5769bd094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>ae6813b534d14729b1f14771df0910a87</anchor>
      <arglist>(const multivariateMomentSet &amp;moments)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>getNMoments</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>aaa655c8c6599e9ad46d3da21f2a1a4b0</anchor>
      <arglist>(const label nDims)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static labelListList</type>
      <name>getMomentOrders</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a47af36a3f14ab5022505835e01b0bb57</anchor>
      <arglist>(const label nDims)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>getNNodes</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a9e99ea7b755503d2a0792a2b5d48a15b</anchor>
      <arglist>(const label nDims)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static labelListList</type>
      <name>getNodeIndexes</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a77ec9921c7c2e3f38cab975b740b75d0</anchor>
      <arglist>(const label nDims)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const labelListList</type>
      <name>twoDimMomentOrders</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a4665bb35d7bf9c2a5d8ef25b47a82628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const labelListList</type>
      <name>threeDimMomentOrders</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a529099c4cb01da3011d690d3aa549185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const labelListList</type>
      <name>twoDimNodeIndexes</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a1f51f2f6c674f027bff2c57274df4c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const labelListList</type>
      <name>threeDimNodeIndexes</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a4ba72fc1f60919e1eaddbb58b622063f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernel</name>
    <filename>a02376.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a2ad788052d660d8469b33dec12e3bd46</anchor>
      <arglist>(&quot;coalescenceEfficiencyKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a5de2cb09bf0722bce90f145e8fb37cff</anchor>
      <arglist>(autoPtr, coalescenceEfficiencyKernel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>coalescenceEfficiencyKernel</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>ab555166ee52c0c964bfdceee3c9c2199</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>coalescenceEfficiencyKernel</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a0ec1e1e7d2da144554cb7ce4ac25a0a9</anchor>
      <arglist>(const coalescenceEfficiencyKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~coalescenceEfficiencyKernel</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a55ce94d618bcde7bc102e8cac4990f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a99b02345a8a15d3c5ea2844a2253f510</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a2054b516925f4b065b744e3d0b28dee3</anchor>
      <arglist>(const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a9ffb2a2111671a42b4cc8489099b886f</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a4d4849cdcc49bbc19c2fc2a8a5ade628</anchor>
      <arglist>(const coalescenceEfficiencyKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; coalescenceEfficiencyKernel &gt;</type>
      <name>New</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>ac19468a1d6c1775ccc70f945e8af33ac</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02376.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::coalescenceEfficiencyKernel</name>
    <filename>a02980.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceFrequencyKernel</name>
    <filename>a02400.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>aa8aa9545d5ea03f1ab3e8ac49d3d84b3</anchor>
      <arglist>(&quot;coalescenceFrequencyKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a62ba297f3ace2599d3bfc1bd23e0ddee</anchor>
      <arglist>(autoPtr, coalescenceFrequencyKernel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>coalescenceFrequencyKernel</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a79aaa016bb9e4ecdb8dfc2a4862d8036</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>coalescenceFrequencyKernel</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>ac7c826b9f6b0e4df3dc7bdd993c4df53</anchor>
      <arglist>(const coalescenceFrequencyKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~coalescenceFrequencyKernel</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>aeaefb22a638db083e663d5b3aea9a80a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a99b02345a8a15d3c5ea2844a2253f510</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>omega</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a839958b3ce61d4ab002c27c7a0127f48</anchor>
      <arglist>(const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>omega</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>ab6b6f92acbbf1162ec54404c485f87da</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a0465e53069a6e8d38a4e561d0013d33f</anchor>
      <arglist>(const coalescenceFrequencyKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; coalescenceFrequencyKernel &gt;</type>
      <name>New</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>aa94b56b38216609b8669136597edf9f9</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02400.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::coalescenceFrequencyKernel</name>
    <filename>a02992.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceKernel</name>
    <filename>a02416.html</filename>
    <member kind="function">
      <type></type>
      <name>coalescenceKernel</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>aa87620c766d257dd9b08a9a78f0478e0</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>coalescenceKernel</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>aa810e0e1b1f91ea8a60009128a89466c</anchor>
      <arglist>(const coalescenceKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~coalescenceKernel</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>a73d07f539bb7ba68d7fa8558a34105af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Ka</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>a4f595c030f234d9e2730e6632a7e0aae</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Ka</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>af65b7fdd710099fe6ebe96db60e4e9ff</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02416.html</anchorfile>
      <anchor>a7a67c153774a3c2dd6f9b260b2c8ff1c</anchor>
      <arglist>(const coalescenceKernel &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::coalescenceKernel</name>
    <filename>a03008.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::collisionKernel</name>
    <filename>a02140.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a40ddbb04632513977fae1c4f058d84d8</anchor>
      <arglist>(&quot;collisionKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a79b3db9d1e367d72453c84dbf00ddda2</anchor>
      <arglist>(autoPtr, collisionKernel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature),(dict, mesh, quadrature))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>collisionKernel</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a43b8744f342d2e41977b0c94ca71d19b</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>collisionKernel</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a4c17fd781349406a9e669a6a4d2601c5</anchor>
      <arglist>(const collisionKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~collisionKernel</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aed27f7f90d42f0364d8310fc437e7a9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>implicit</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a0fba4d436b57c1c8b57cc8594c2093b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preUpdate</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a67bcb430d7ad566b61c43fbdb2ef7eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateCells</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aa801741fe66ed3c4c01a91734f8f15c3</anchor>
      <arglist>(const label celli)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFields</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aa1ae41ebd7f9d7d95ff41f69045699d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>explicitCollisionSource</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aada8ec4ad55dabad48631f346e6df0bf</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitCollisionSource</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aead05a6266281c9e01b60f68ee316653</anchor>
      <arglist>(const volVelocityMoment &amp;m) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>ad2d19adce62c8cb07e45358138e50bae</anchor>
      <arglist>(const collisionKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; collisionKernel &gt;</type>
      <name>New</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a354ef986698f118c2183285d6c6207f1</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>d</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a1ef47a613eee69d20538e2c791b691d0</anchor>
      <arglist>(const label node, const label celli) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static tmp&lt; volScalarField &gt;</type>
      <name>lookupOrInitialize</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a91ec7c1b0b8917ab34e2300dae88a141</anchor>
      <arglist>(const fvMesh &amp;mesh, const word &amp;name, const dictionary &amp;dict, const word &amp;entryName, const dimensionSet &amp;dims)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const velocityQuadratureApproximation &amp;</type>
      <name>quadrature_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aa176419c5d1e952082a38ed55f7772cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList &amp;</type>
      <name>momentOrders_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a10e2d510d6c05b79ac2073876ffa6f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList &amp;</type>
      <name>nodeIndexes_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aacc38e739c6e636e6cba5799a6742c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelList &amp;</type>
      <name>velocityIndexes_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a20ff0892fd62e1008536c8f5a98b37fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDimensions_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a22a7e22a470f736e5a4561cd9d2fa5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>velocityMomentOrders_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aa700192773833c1e948ac2527a03f5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>velocityNodeIndexes_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>ae73646ffc0b75b5255f9e657f6eaadea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>sizeIndex_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a7846c8b26f4e52a4939c0e77e8c8c362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nSizes_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>ab28aadbd33f15cf8a7839c1baeef5691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>dp_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>ae9440a0dd99c26f1fcbbfbcceb5da6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>rhos_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a01f12dd2788d20fde1f5095679b5b8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>minD_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>a7cf932094d0c80383d9fdfa5bed7b0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>implicit_</name>
      <anchorfile>a02140.html</anchorfile>
      <anchor>aa02fe811f9ab9cfcf3e10b8eca4db425</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::compressibleSystem</name>
    <filename>a02296.html</filename>
    <member kind="function">
      <type></type>
      <name>compressibleSystem</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a53504c597d8b8a0f9530d31b177eaa89</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~compressibleSystem</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ad6d3f1e19cb88b1b4c13229396b49466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>speedOfSound</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>af6c6165e2fb3d4d969cb4a8003714f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a0da96c2aea8379f12279d75c5855767f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a8120c0125eb94d4c908cf1d974d27cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>rho</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a58d03d702fd6e77c90cc1fe4b4ac6e57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>rho</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ad8531b1a106c138ee490f95320e0ca5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>E</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a3cddee9a637b7f52d2f13f7f113b5e0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>E</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>af114ae59555c986745160c9665578014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>H</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a9cf006ed15bfd06a961c2469b9290c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>H</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a46b38e77b80f6e34fd020740c590cb98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a4f0b1d724eb6f69d547d2a659dab6763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a9041d3db0970869a294094ec95780dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a309de8d77b1b6bc71272d02fd018be3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a7ccfa750ea7a0623efe7790b5cfc955d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ad9c01d718ca3d215725e533347c2c25b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a559539638a23431ca4b538c03b46e746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>rhoU</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a4a33ad2f6738a8169f52293d224ad9e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>rhoU</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>aff8fb4f6f4d8f51bf2e9c6e3ff7af3a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>rhoE</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a913c75cccf817742eaf064267712375e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>rhoE</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a826cd5b309b54577d9219b7d6b7e604d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>massFlux</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>afe6835d6e3435c9658c38d02e98e65cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>massFlux</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a365f2e2d59a1131106d363ec1baa655a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceVectorField &amp;</type>
      <name>momentumFlux</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ad3b1774202dae342f757b6bc6438daf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceVectorField &amp;</type>
      <name>momentumFlux</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>adea5611e3ebf2ca6bb1f5de9b72b2222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>energyFlux</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a1cd22081d7a631109f43f5ba1b823ad4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>energyFlux</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ae6080d5e7e1ed43bb4ce294072140a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNSteps</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a8ccf7d358362fe30d5ff7d9031d64d31</anchor>
      <arglist>(const boolList &amp;storeCoeffs, const boolList &amp;storeFcoeffs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advect</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a7a0bc9c499d58255a07d983078d90c8a</anchor>
      <arglist>(const label stepi, const scalarList &amp;coeffs, const scalarList &amp;Fcoeffs, const dimensionedScalar &amp;deltaT, const dimensionedVector &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateFluxes</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a147753cfb048847df0bc01e78d0aaf66</anchor>
      <arglist>(const dimensionedVector &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFluxes</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a22505ea66c6eb79fad16ca3843cb969a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correctThermo</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a384d6b2a16c5f5fdbaf7412b0f0157f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encode</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a983efb9188e4573a470b3ec367342fe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>abaca1023f5b99e4444f66e3b59836537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>af816873151ddb0126e98bb2f914d8ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>phaseName_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a365437f6491c62469c28404017d2117f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; rhoThermo &gt;</type>
      <name>thermoPtr_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>acff3f4ef187de4f75efc9da38469eff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>rho_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a074e4dd0196964d1c3865f6a96d9551b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volVectorField</type>
      <name>U_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a188c58d01aed5b71cf5711278581adeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; surfaceScalarField &gt;</type>
      <name>phiPtr_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a497673767745b44b26977e35496c55df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField &amp;</type>
      <name>p_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a9328e381d10c3b775291e42b677bebe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>E_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a4d7fe2c6c4c8e7a01d9169972ba02b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>H_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a11bb668d8685ae8451a2ca05f0b654dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volVectorField</type>
      <name>rhoU_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a62e78b1834ea9f2a23dabd7ab4a0a719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>rhoE_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a451d3400ddfbf12827e81fa9e9b16d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>massFlux_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a750aba384dd0969e805ff2ec186d5189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceVectorField</type>
      <name>momentumFlux_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ae7ddfc5a7e8e45c7e8dad78c6185e2f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>energyFlux_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a91465011d28815a2544200073cf11d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fluxIntegrator &gt;</type>
      <name>integrator_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>add4e8719cef4fa810c9d6ae63a20f1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>storedFieldIndexes_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ae4cb7ea0fc6ab7a5a3b8b6a13bd33b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>storedDeltaIndexes_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>aa9a0455b94369259a74b202c153a7034</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>rhos_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a0c3d959d49213747823613377cb8b657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>deltaRhos_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a44a21e8431bb7f3a4afac2e85835e335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volVectorField &gt;</type>
      <name>rhoUs_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a8c79a80158ca6c584d279ac37b096772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volVectorField &gt;</type>
      <name>deltaRhoUs_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a12171609f19e500ab7e1c1473218efb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>rhoEs_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a65e055719b29deddc34b0055afe75624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>deltaRhoEs_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>a18bee7afb8e9cf3a5192abe10f3ad2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fluxFunction &gt;</type>
      <name>fluxFunction_</name>
      <anchorfile>a02296.html</anchorfile>
      <anchor>ad45be0b91bde3f8e7d800b9ab8157527</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentInversions::conditional</name>
    <filename>a01972.html</filename>
    <base>Foam::multivariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a1573dd472750424af95288c2b28665b5</anchor>
      <arglist>(&quot;conditional&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conditional</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>af526c6adb15012a50745dacd1adb4822</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~conditional</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a398af45b01b3af87917807a62e2c6cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>ae6813b534d14729b1f14771df0910a87</anchor>
      <arglist>(const multivariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModel</name>
    <filename>a02660.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a89ef7b0434555578ece218c438ff74fe</anchor>
      <arglist>(&quot;conductivityModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a36e6991a8170801326cbce86a65d7bab</anchor>
      <arglist>(autoPtr, conductivityModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conductivityModel</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a6e10d6d049c82c8a16079f7606131d78</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conductivityModel</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a33362591e66279555279fca6c8497e42</anchor>
      <arglist>(const conductivityModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~conductivityModel</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a27922e15045f2be7cf059bf87e8fc9bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a07311e298fe5e7b9c6bb4440841f5890</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a220c0409fbeeb8709f5f61ad91a06ee1</anchor>
      <arglist>(const conductivityModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; conductivityModel &gt;</type>
      <name>New</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a69b9489f71079b9c7e7c6c01c2a30547</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02660.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernels::constant</name>
    <filename>a02380.html</filename>
    <base>Foam::coalescenceEfficiencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02380.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constant</name>
      <anchorfile>a02380.html</anchorfile>
      <anchor>ab1e5d11d2d89ae5b6d8166db0be7667d</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constant</name>
      <anchorfile>a02380.html</anchorfile>
      <anchor>a4c0b4ac091f31d044388ec654d4d9c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02380.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02380.html</anchorfile>
      <anchor>aa4f6d3411e9f9168ecb7d78572be6520</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02380.html</anchorfile>
      <anchor>a35a2484b126b3a30d82fbce52ebf5725</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::coalescenceEfficiencyKernels::constant</name>
    <filename>a02984.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::constantAggregation</name>
    <filename>a02088.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02088.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantAggregation</name>
      <anchorfile>a02088.html</anchorfile>
      <anchor>a3d9eab6d02320111723f0725a2ef06fd</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantAggregation</name>
      <anchorfile>a02088.html</anchorfile>
      <anchor>a8f95da283d65bcd70fad3f015ff2dfd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02088.html</anchorfile>
      <anchor>a3a5510fce9094461685717d84f4fe6fe</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::constantAspectRatio</name>
    <filename>a02952.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::constantAspectRatio</name>
    <filename>a02332.html</filename>
    <base>Foam::aspectRatioModel</base>
    <base>Foam::aspectRatioModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantAspectRatio</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a01c823930bcaf0814e9697b4118b35ca</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantAspectRatio</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a094026f88f0f95649f59375f3cf4ab49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a7adbc789902978053017ef7a87189551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantAspectRatio</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a01c823930bcaf0814e9697b4118b35ca</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantAspectRatio</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a094026f88f0f95649f59375f3cf4ab49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02332.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::constantBreakup</name>
    <filename>a02116.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantBreakup</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a0a870758489c808541712fef4848004a</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantBreakup</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a4301ded8dfbbd776391943d59b7fdb28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a946b65699921072f6210c5f83054e8a1</anchor>
      <arglist>(const scalar &amp;abscissa, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::growthModels::constantGrowth</name>
    <filename>a02200.html</filename>
    <base>Foam::populationBalanceSubModels::growthModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02200.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantGrowth</name>
      <anchorfile>a02200.html</anchorfile>
      <anchor>a41f1e1e078c35159653a11c684be29b0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantGrowth</name>
      <anchorfile>a02200.html</anchorfile>
      <anchor>af00385dc3e6aa76de6adb4cff11350b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kg</name>
      <anchorfile>a02200.html</anchorfile>
      <anchor>ab80625062d5ead8d9ba2dcca0e918421</anchor>
      <arglist>(const scalar &amp;abscissa, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::constantLiftCoefficient</name>
    <filename>a02476.html</filename>
    <base>Foam::liftModel</base>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantLiftCoefficient</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>a793ccb5fa6b0f442879aef564161485e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantLiftCoefficient</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>ae78c7f829dd298d6eb15a4b27fc1bd49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantLiftCoefficient</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>a793ccb5fa6b0f442879aef564161485e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantLiftCoefficient</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>ae78c7f829dd298d6eb15a4b27fc1bd49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02476.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::heatTransferModels::constantNuHeatTransfer</name>
    <filename>a02816.html</filename>
    <base>Foam::heatTransferModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>abebd04d2f9bfb2a0dc04395dd34c1705</anchor>
      <arglist>(&quot;constantNu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantNuHeatTransfer</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>a396b4043f13b8c9ed21d3d73083ecba0</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantNuHeatTransfer</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>a27aab659cb8adb7d9aceedea82c4c12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>a762cdd365d30ec1880df9df100ae8a88</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</name>
    <filename>a02520.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantTurbulentDispersionCoefficient</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>abff9dc535a1b0ff0fc04db1844ccdea3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantTurbulentDispersionCoefficient</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>a3bc61581d3b3fe2a3c1a1e7a2bab81ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantTurbulentDispersionCoefficient</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>abff9dc535a1b0ff0fc04db1844ccdea3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantTurbulentDispersionCoefficient</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>a3bc61581d3b3fe2a3c1a1e7a2bab81ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02520.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::constantVirtualMassCoefficient</name>
    <filename>a02548.html</filename>
    <base>Foam::virtualMassModel</base>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantVirtualMassCoefficient</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>afeb16f652c46330b455d29bb90bd36ac</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantVirtualMassCoefficient</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>a54ae44e71e4c68181d6f27f0c134f53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>a44448421a9a019b82ba27811e9c5f40c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantVirtualMassCoefficient</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>afeb16f652c46330b455d29bb90bd36ac</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantVirtualMassCoefficient</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>a54ae44e71e4c68181d6f27f0c134f53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02548.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::cosine</name>
    <filename>a02568.html</filename>
    <base>Foam::wallDampingModels::interpolated</base>
    <base>Foam::wallDampingModels::interpolated</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>a5ca8cd4cc19cd02aad3f320c04f1d02c</anchor>
      <arglist>(&quot;cosine&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cosine</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>a883947a3b0e074dba07fd97db34d8bb4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cosine</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>aa683640bc4d1d53d242dc4f36e7c6337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>a5ca8cd4cc19cd02aad3f320c04f1d02c</anchor>
      <arglist>(&quot;cosine&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cosine</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>a883947a3b0e074dba07fd97db34d8bb4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cosine</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>aa683640bc4d1d53d242dc4f36e7c6337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>a544a6b65a82dd422f9b35fee1c8a2831</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02568.html</anchorfile>
      <anchor>a544a6b65a82dd422f9b35fee1c8a2831</anchor>
      <arglist>(const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernels::CoulaloglouAndTavlarides</name>
    <filename>a02384.html</filename>
    <base>Foam::coalescenceEfficiencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02384.html</anchorfile>
      <anchor>aba55be5b4edeb385df3e073c0aa47839</anchor>
      <arglist>(&quot;CoulaloglouAndTavlarides&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulaloglouAndTavlarides</name>
      <anchorfile>a02384.html</anchorfile>
      <anchor>a79756fc7435c51c83c8b008a83460cc2</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoulaloglouAndTavlarides</name>
      <anchorfile>a02384.html</anchorfile>
      <anchor>a9d875e26330ba097bc6c8dcfd6a54f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02384.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02384.html</anchorfile>
      <anchor>aa4f6d3411e9f9168ecb7d78572be6520</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02384.html</anchorfile>
      <anchor>a35a2484b126b3a30d82fbce52ebf5725</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceFrequencyKernels::CoulaloglouAndTavlarides</name>
    <filename>a02404.html</filename>
    <base>Foam::coalescenceFrequencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02404.html</anchorfile>
      <anchor>aba55be5b4edeb385df3e073c0aa47839</anchor>
      <arglist>(&quot;CoulaloglouAndTavlarides&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulaloglouAndTavlarides</name>
      <anchorfile>a02404.html</anchorfile>
      <anchor>a79756fc7435c51c83c8b008a83460cc2</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoulaloglouAndTavlarides</name>
      <anchorfile>a02404.html</anchorfile>
      <anchor>a9d875e26330ba097bc6c8dcfd6a54f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02404.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>omega</name>
      <anchorfile>a02404.html</anchorfile>
      <anchor>a24e44c622256717a0b96b50452b9b70f</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>omega</name>
      <anchorfile>a02404.html</anchorfile>
      <anchor>aeb501baeeb65912923d5e950872b3182</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::coalescenceEfficiencyKernels::CoulaloglouAndTavlarides</name>
    <filename>a02988.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::CoulaloglouAndTavlarides</name>
    <filename>a02996.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistribution</name>
    <filename>a02152.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a82911bf276379ac9d1978f3e59b5a2da</anchor>
      <arglist>(&quot;daughterDistribution&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a7129465ae9c57fdc0727a7c9ce916b1c</anchor>
      <arglist>(autoPtr, daughterDistribution, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>daughterDistribution</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a24ef98904209a2fdb76d456f36fb7433</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>daughterDistribution</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a0cf1bae0dee720b13e48f6a990d52a92</anchor>
      <arglist>(const daughterDistribution &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~daughterDistribution</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a82d94b9042834125e095b863b9b1d2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>aa677f33915dc98f8aa4df5bc4d8dc33f</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>mDMass</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>acd70d202bbbda50dd8bf42e242b440ed</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a3b709d3800f2c05bc27fa11388145407</anchor>
      <arglist>(const daughterDistribution &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; daughterDistribution &gt;</type>
      <name>New</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>aae6ec3b92070a02ab63d7193760e4cb4</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02152.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Davidson</name>
    <filename>a02524.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a10ea756adf27fc1db4cbefca872e46b6</anchor>
      <arglist>(&quot;Davidson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Davidson</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>ad5245e0c74d2dbc5984f7716038c3ce6</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Davidson</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a8b91468d395275ec67deb3eb84fb54e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a10ea756adf27fc1db4cbefca872e46b6</anchor>
      <arglist>(&quot;Davidson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Davidson</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>ad5245e0c74d2dbc5984f7716038c3ce6</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Davidson</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a8b91468d395275ec67deb3eb84fb54e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::differentialForceAggregation</name>
    <filename>a02092.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02092.html</anchorfile>
      <anchor>a36b4b16775fb11ddc9dc3aa051f015d1</anchor>
      <arglist>(&quot;differentialForce&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>differentialForceAggregation</name>
      <anchorfile>a02092.html</anchorfile>
      <anchor>a05c80bd86eb232b2d727b7a7d6656e7e</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~differentialForceAggregation</name>
      <anchorfile>a02092.html</anchorfile>
      <anchor>ab500dc560ba25bcea373d41739d6429b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02092.html</anchorfile>
      <anchor>a3a5510fce9094461685717d84f4fe6fe</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModel</name>
    <filename>a02176.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>aac5e53b16b5d306f767a3ac9c82018fe</anchor>
      <arglist>(&quot;diffusionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>a9593fc891ae88dcefca52e375bbaebe0</anchor>
      <arglist>(autoPtr, diffusionModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diffusionModel</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>a9ddf42daebca521ed9b1836083a7c90a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diffusionModel</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>aae918c917608cecb8ebf6674930e817a</anchor>
      <arglist>(const diffusionModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~diffusionModel</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>af2348e708346160fd55cb63f0a48dfa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>aabae74dfa57a1da79979191d20e9dc36</anchor>
      <arglist>(const volScalarField &amp;moment) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>a1ddc79d186d785b39a0e3195a02dbc9d</anchor>
      <arglist>(const diffusionModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; diffusionModel &gt;</type>
      <name>New</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>a4979734dfbad3055a0ebcb03224a6cf3</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02176.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModel</name>
    <filename>a02420.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a676cab8ef1a30a2de2568bd0e1676e01</anchor>
      <arglist>(&quot;dragModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a762c24623b04dd01ee8e4bf4e57e02c5</anchor>
      <arglist>(autoPtr, dragModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject),(dict, pair, registerObject))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dragModel</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a1ed05cfa648855b91ecd3d1e8e5c5bb8</anchor>
      <arglist>(const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dragModel</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>ac7f8d6ce7ea2bab6446a4f0d69b7f512</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~dragModel</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>ac79b52a0efbfdce3c2d93318aa7fb635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a421a9601d4b3474381126899a8c8ae5b</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a6f0ca0f0fa6174a288ee26cbe6e9b4b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a6a9b9c581fa49fd06c6bb8b16d0adcb5</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>af5baff0849cf8745b27a4f9c2973811f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a123a2f0759e7cd4e8d0092806b4b71b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a5ee445a07b37d6697e74b5a59bfb6e50</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a5bda2bd8bcc2018ba9c901aa8fd7bd6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeData</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a4c658e15d7e8f5819cdc0eedbbbeb85e</anchor>
      <arglist>(Ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a676cab8ef1a30a2de2568bd0e1676e01</anchor>
      <arglist>(&quot;dragModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a762c24623b04dd01ee8e4bf4e57e02c5</anchor>
      <arglist>(autoPtr, dragModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject),(dict, pair, registerObject))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dragModel</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a1ed05cfa648855b91ecd3d1e8e5c5bb8</anchor>
      <arglist>(const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dragModel</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>ac7f8d6ce7ea2bab6446a4f0d69b7f512</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~dragModel</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>ac79b52a0efbfdce3c2d93318aa7fb635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a421a9601d4b3474381126899a8c8ae5b</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a6a9b9c581fa49fd06c6bb8b16d0adcb5</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a5ee445a07b37d6697e74b5a59bfb6e50</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeData</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a4c658e15d7e8f5819cdc0eedbbbeb85e</anchor>
      <arglist>(Ostream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; dragModel &gt;</type>
      <name>New</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>ae1aa0fa2c61bfd36de42468952efddbe</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; dragModel &gt;</type>
      <name>New</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>ae1aa0fa2c61bfd36de42468952efddbe</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimK</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a2c84e5d26057962c2f78708f5d34e15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimKa</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a9af67d23f81186151f78206b5553333b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; swarmCorrection &gt;</type>
      <name>swarmCorrection_</name>
      <anchorfile>a02420.html</anchorfile>
      <anchor>a21ac1f4c3a7249406383415e45421761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::eigenSolver</name>
    <filename>a01864.html</filename>
    <member kind="function">
      <type></type>
      <name>eigenSolver</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ade4e6ff9a67eb861e728ad561d045027</anchor>
      <arglist>(const scalarSquareMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigenSolver</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ac19d211d97c70922835cc795f9b2e242</anchor>
      <arglist>(const scalarSquareMatrix &amp;A, bool symmetric)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigenSolver</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>aba9ead1532cf5573fe12f8a0acab73da</anchor>
      <arglist>(const eigenSolver &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const scalarDiagonalMatrix &amp;</type>
      <name>eigenvaluesRe</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>af533174e2c646309068506a0fa634a19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarDiagonalMatrix &amp;</type>
      <name>eigenvaluesIm</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ab8288dd31024c8935fdc0f3f525a9545</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarSquareMatrix &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ac18c68a10596e49e29923d3947596a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ae933f42fad8a87eaf168952ac85daac5</anchor>
      <arglist>(const eigenSolver &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::environmentMixingModel</name>
    <filename>a02192.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::environmentMixingModel::IEM</class>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>ac0cb768515d471c0fe4b2acbec20db9b</anchor>
      <arglist>(&quot;environmentMixingModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a199d8c30920755e327a72ba4fea1930c</anchor>
      <arglist>(autoPtr, environmentMixingModel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>environmentMixingModel</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>af370db2ce3723f2e65a7c8587c322f8d</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>environmentMixingModel</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a088f9499ee876a01fbdcaafa08061751</anchor>
      <arglist>(const environmentMixingModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~environmentMixingModel</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a69ec03a0b8fa8f25d69a776df32649ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a7464008a5b8e9a54fa136892a3f185f3</anchor>
      <arglist>(const volScalarField &amp;meanMoment, const volScalarField &amp;meanMomentVariance, const volScalarField &amp;meanMixtureFraction) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>ad999fb7e466644a7c8980c25ac3b21da</anchor>
      <arglist>(const environmentMixingModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; environmentMixingModel &gt;</type>
      <name>New</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a0505c0dbd5fe750fe20d2bedc67a6205</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cphi_</name>
      <anchorfile>a02192.html</anchorfile>
      <anchor>a88b4336f953c90f0d28a80db8fa28857</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::equilibrium</name>
    <filename>a03032.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::equilibrium</name>
    <filename>a02648.html</filename>
    <base>Foam::kineticTheoryModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02648.html</anchorfile>
      <anchor>acf3a6ca3797b3eb4859dbbd83c80fbb9</anchor>
      <arglist>(&quot;equilibrium&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>equilibrium</name>
      <anchorfile>a02648.html</anchorfile>
      <anchor>adab101e7c98eaa27d4a86ef93624c695</anchor>
      <arglist>(const dictionary &amp;dict, const phaseModel &amp;phase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~equilibrium</name>
      <anchorfile>a02648.html</anchorfile>
      <anchor>a11289e584d23cec18ec0495cb441b657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02648.html</anchorfile>
      <anchor>a292a3944ebf0a4acba8c14844ddfe780</anchor>
      <arglist>(const volScalarField &amp;beta, const volScalarField &amp;alpha, const volTensorField &amp;gradU, const volSymmTensorField D)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Ergun</name>
    <filename>a02424.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a08cc9411f50e6db63438ac6d642b7a26</anchor>
      <arglist>(&quot;Ergun&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ergun</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a2fb55814ce118e53613e2ff701062d98</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ergun</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a734bd321f41560ef9ac31f5bcb811e83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a08cc9411f50e6db63438ac6d642b7a26</anchor>
      <arglist>(&quot;Ergun&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ergun</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a2fb55814ce118e53613e2ff701062d98</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ergun</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a734bd321f41560ef9ac31f5bcb811e83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02424.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::erosion</name>
    <filename>a02156.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02156.html</anchorfile>
      <anchor>a62fb9ef190a5ffc161db6206dc8268c2</anchor>
      <arglist>(&quot;erosion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>erosion</name>
      <anchorfile>a02156.html</anchorfile>
      <anchor>a2b3867c760b6b4b9aa9d9498e244db7b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~erosion</name>
      <anchorfile>a02156.html</anchorfile>
      <anchor>a6dba80760a678d33471f4e4b6cd26a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a02156.html</anchorfile>
      <anchor>aa699955fa82d81b8bae2a63e1e80ee75</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mDMass</name>
      <anchorfile>a02156.html</anchorfile>
      <anchor>a1e2673712babed9c93a6d6a1b9a23979</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::errorEstimator</name>
    <filename>a02836.html</filename>
    <member kind="function">
      <type></type>
      <name>errorEstimator</name>
      <anchorfile>a02836.html</anchorfile>
      <anchor>a608b3a1d0c93a6df2b3fda8f6962701a</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~errorEstimator</name>
      <anchorfile>a02836.html</anchorfile>
      <anchor>aa0475671c9a0074f40bedb58e613c32d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimateError</name>
      <anchorfile>a02836.html</anchorfile>
      <anchor>a6f76427a8cd135e982a4b46bbdfaf4f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::collisionKernels::esBGKCollision</name>
    <filename>a02144.html</filename>
    <base>Foam::populationBalanceSubModels::collisionKernels::BGKCollision</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>ac40255d698a65c32f7a92f92dc7d0c4d</anchor>
      <arglist>(&quot;esBGK&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>esBGKCollision</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>a043bc156b66b1f5d40c5a0290f3e9b38</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~esBGKCollision</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>a9e12ee14aa7c07eb62e50a2c78fdfe05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>explicitCollisionSource</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>af171162507e90e184cc717f790994747</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitCollisionSource</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>a4b834804326a1b050c84469c05c232fc</anchor>
      <arglist>(const volVelocityMoment &amp;m) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual symmTensor</type>
      <name>covariance</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>aaa66ff45b513af474d38b4138817db43</anchor>
      <arglist>(const label celli, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual symmTensor</type>
      <name>covariance</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>ac90f33ae88e966850a62942b7cd610d7</anchor>
      <arglist>(const mappedScalarList &amp;moments, const scalar &amp;u, const scalar &amp;v, const scalar &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual scalar</type>
      <name>e</name>
      <anchorfile>a02144.html</anchorfile>
      <anchor>a40f05e08643e6a0d18761b89a8f24f03</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::Euler</name>
    <filename>a02268.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02268.html</anchorfile>
      <anchor>a8b44327f2dbbfb6bfc45394aee109c68</anchor>
      <arglist>(&quot;Euler&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Euler</name>
      <anchorfile>a02268.html</anchorfile>
      <anchor>adfc07b99c78b22f2862846763a5cc42e</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Euler</name>
      <anchorfile>a02268.html</anchorfile>
      <anchor>afaa91117a57b93d84666d863e11f30bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02268.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02268.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02268.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::exponentialBreakup</name>
    <filename>a02120.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a86ff92ca0beb621157b91eba8601746d</anchor>
      <arglist>(&quot;exponential&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exponentialBreakup</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>ab8c18aa51a2edf305a6043ff25a8e675</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~exponentialBreakup</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a3805c5cd8e532366720e40ab89e2d01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a946b65699921072f6210c5f83054e8a1</anchor>
      <arglist>(const scalar &amp;abscissa, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::extendedFieldMomentInversion</name>
    <filename>a01884.html</filename>
    <base>Foam::fieldMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a92d1d2c620a5376ba8e67121739b9a96</anchor>
      <arglist>(&quot;extendedFieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>extendedFieldMomentInversion</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a1bb81e663397f873c4332a0c7fb98037</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>extendedFieldMomentInversion</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a8b65377276a732dbf9db082ab7ae9253</anchor>
      <arglist>(const extendedFieldMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~extendedFieldMomentInversion</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>abcb2345daaefe093eab65b6cf91ad9c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a6eeb7834291cdecf8936918673636e44</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a4b2cd3c44f001f05df26f04b3c900cd3</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>ad60e180e66e91d1501774bf8ec2eda42</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a33eb19d3a03a570944d2a0483de911a7</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a5fa7f7ae82b0ffa37ab81e5c97aee5ee</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>a5a67470b8855db049035f297fbeb51aa</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01884.html</anchorfile>
      <anchor>ae12d878bc00d2396e47decb6e61dd9e7</anchor>
      <arglist>(const extendedFieldMomentInversion &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::extendedMomentInversion</name>
    <filename>a02020.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a3f90688f92c81e5818c2585b4451e43f</anchor>
      <arglist>(&quot;extendedMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a0b17c0aa14c335eda07934d0cc7349a6</anchor>
      <arglist>(autoPtr, extendedMomentInversion, dictionary,(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes),(dict, nMoments, nSecondaryNodes))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>extendedMomentInversion</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>afe89ce0884b636b5ace78d61605601af</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>extendedMomentInversion</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a2276b6d48ec8d2f2b7f78ae0f3d9a92e</anchor>
      <arglist>(const extendedMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~extendedMomentInversion</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a37ce62f65b4f4630243d90f31e47d25a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a45d56bb3ba42ace7670d4c68707abf5d</anchor>
      <arglist>(const univariateMomentSet &amp;moments)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a16bc2a1c0649f9428b6d1a89efd4e9d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nPrimaryNodes</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>addb843076e1ddf5cc3c709baa73756ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nSecondaryNodes</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>af326f16b872f54341e6fd95a1e8414c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>sigma</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a26e88c0588fbd3b2fb10164f23dd9e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>primaryWeights</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ac9a95640dd8e27c789f908f44888118a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>primaryAbscissae</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>aec3c432dc249fd7775497ec52db2b175</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarRectangularMatrix &amp;</type>
      <name>secondaryWeights</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a798bd5dcc80487287f46d776044d3094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarRectangularMatrix &amp;</type>
      <name>secondaryAbscissae</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>aa4ed0882c66502caf9c1b1630cdc29d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>f</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>acd89af06cf08ca89fed3a0956d9ce12c</anchor>
      <arglist>(const scalarField &amp;x) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ade116f42c89c2e2e19c83e0a42c22b6f</anchor>
      <arglist>(const extendedMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; extendedMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a404fcfd31812910b2629598402f2183d</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ad9ffbed9b29d5c51f202e690534149c6</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a6bdcc0b154191b3f68ade352d8f81786</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a45d093a1dba87ac5b3225bbec5cd48a3</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a05e365f57804aa13cd6bd279b552ea02</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>normalizedMomentError</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a21b737ce5ace3ad03f53c403f8e33127</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ad5f6b05480e05c31e0a50441261c3059</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a2acee07bc2cc5f9cc51b0b4b2c98f943</anchor>
      <arglist>(univariateMomentSet &amp;moments)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nMoments_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a2241219aa524be91ffd4ded3f42f582a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nPrimaryNodes_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a4f67ff7835ca0a0649bd0fc7df50293f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a40215782a1b76974e2398e5db8a42c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>primaryWeights_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>aedefe40f48ae03efde1bc63b09f905d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>primaryAbscissae_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ab603db57b174dc650c896e4ad2c09c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sigma_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a60ad044da1c5c5863dc3999beaf9ded6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarRectangularMatrix</type>
      <name>secondaryWeights_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a7ee069fff6b86877e0fea50151279f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarRectangularMatrix</type>
      <name>secondaryAbscissae_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a7181a7bcc88b4461f73692d3cf68b217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>minMean_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ace8d3904a17ec917d2c13e4fc5589881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>minVariance_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a34b2a8a03f3f44ac9346df9b0dab3fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>maxSigmaIter_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>aa78ff36606add0e3786c315268651929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>momentsTol_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>ae7deec167ce9b1e5dd3ec8cb8763a920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sigmaMin_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a75d8593d0b82f0767612d7fcdf64077f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sigmaTol_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>afac3a4fbf965a79a72058e61df5c748e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>targetFunctionTol_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a650aa5cf90bbd6acdd545a79a5bbbede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>foundUnrealizableSigma_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>aeb806194434667ed8302ae914a218ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nullSigma_</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a321aaf5fa452c684bea8e78de313a5df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fieldMomentInversion</name>
    <filename>a01888.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a78518bc7cbbbdd3e08d024a5776e9d2d</anchor>
      <arglist>(&quot;fieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>adbac84564759677b3953dbd8c965b092</anchor>
      <arglist>(autoPtr, fieldMomentInversion, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes, const label nSecondaryNodes),(dict, mesh, momentOrders, nodeIndexes, velocityIndexes, nSecondaryNodes))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fieldMomentInversion</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a60d8c9a5d602b6043d5983f4e674f888</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fieldMomentInversion</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>aa3fc60e9cb4aca20dc05f8c1acbb9a07</anchor>
      <arglist>(const fieldMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fieldMomentInversion</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>ac9514bda7486d306d89ac080c6b48a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a57f3b55504f144e4c34755464402d7a7</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a8a86422fb66c73920118c204ae6adb7f</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a9637e7fb3473285c3adb3a9d8004e94e</anchor>
      <arglist>(const volScalarMomentFieldSet &amp;moments, mappedPtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>aa49a73aa25c781166d6851487c3849f3</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a4b75588596161dd238189456bae6689e</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>ac190d5d82c9afe86de32f9a3797ec4d1</anchor>
      <arglist>(const volVelocityMomentFieldSet &amp;moments, mappedPtrList&lt; volVelocityNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extended</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>ab7b9ffa2fac0589fccaf727ecc4bf8ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a3fa032cdc85de9544e84120d7a488922</anchor>
      <arglist>(const fieldMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>ae5bebd4ea48c60aec60ece1283f6d3b5</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extended_</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a4bb40947fbadb3a714e5e3beb2824193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList &amp;</type>
      <name>momentOrders_</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>a10e2d510d6c05b79ac2073876ffa6f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList &amp;</type>
      <name>nodeIndexes_</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>aacc38e739c6e636e6cba5799a6742c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateAdvection::firstOrderKinetic</name>
    <filename>a01940.html</filename>
    <base>Foam::univariateMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>afbbdb9b30b57c240fc00b04c327e86eb</anchor>
      <arglist>(&quot;firstOrderKinetic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>firstOrderKinetic</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a09b383ad4cf87f6a2f3c699774a70e17</anchor>
      <arglist>(const dictionary &amp;dict, const scalarQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~firstOrderKinetic</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>aa065baddb341f0e3f1d89ef960bb7abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateNodes</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>aee1fc78125838d352f1209c771319fe7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::velocityAdvection::firstOrderKinetic</name>
    <filename>a01956.html</filename>
    <base>Foam::velocityMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>afbbdb9b30b57c240fc00b04c327e86eb</anchor>
      <arglist>(&quot;firstOrderKinetic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>firstOrderKinetic</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>ab9affcf3b3f4a0a453248eebbd1254b7</anchor>
      <arglist>(const dictionary &amp;dict, const velocityQuadratureApproximation &amp;quadrature, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~firstOrderKinetic</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>aa065baddb341f0e3f1d89ef960bb7abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a0dd74781fa35a806ee471cfbeb635a0a</anchor>
      <arglist>(const surfaceScalarField &amp;U, const bool wallCollisions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a221f6b6c6ff0c95548087b6ab793eac2</anchor>
      <arglist>(const mappedPtrList&lt; volVectorField &gt; &amp;Us, const bool wallCollisions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateNodes</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>aee1fc78125838d352f1209c771319fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const PtrList&lt; volVelocityNode &gt; &amp;</type>
      <name>nodes_</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a6ece0af8b8aa38b4e2bc874963f23afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; PtrList&lt; surfaceVelocityNode &gt; &gt;</type>
      <name>nodesNei_</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a4cafbef4bf2df2d5a90952235c21d464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; PtrList&lt; surfaceVelocityNode &gt; &gt;</type>
      <name>nodesOwn_</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a089e33a683e1d6a005040a43a906d678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>weightScheme_</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>aa5a33853e01d1a6c640fb20db6783098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>scalarAbscissaeScheme_</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>ada09eb56d533b9dd3e65bc7988149394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>velocityAbscissaeScheme_</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a2a6fa943d2d9a5717b81d66e9101bd96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::firstOrderKinetic</name>
    <filename>a02880.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::fluxFunction</name>
    <filename>a02308.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a26c9a5547912cc0bc915f3381e3c6c6d</anchor>
      <arglist>(&quot;fluxFunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>ae8dc54f4ddc87b99bb29d4201451c242</anchor>
      <arglist>(autoPtr, fluxFunction, dictionary,(const fvMesh &amp;mesh),(mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fluxFunction</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>acbba11c2d7e5fff6ce67723062352346</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fluxFunction</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>aebdeee25a4e085c0487d598f4d2546b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateFluxes</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a134ff6e882bba5e8351086f5f00fd495</anchor>
      <arglist>(surfaceScalarField &amp;massFlux, surfaceVectorField &amp;momentumFlux, surfaceScalarField &amp;energyFlux, const volScalarField &amp;rho, const volVectorField &amp;U, const volScalarField &amp;H, const volScalarField &amp;p, const volScalarField &amp;gamma)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; fluxFunction &gt;</type>
      <name>New</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a5695cd5a27522a56e2820a7024c6d579</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static word</type>
      <name>interpScheme</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>aa196bdc34e8bcce03caa92a26176315e</anchor>
      <arglist>(const word &amp;fieldName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>own_</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>ac6ebab407edaa9fb1bf07c163e389b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>nei_</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>af8b04d4daaf16b8ad52708b54b311c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>residualAlpha_</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a9e788d53e0135b25ac6f5f81da5ed251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>cutoffMa_</name>
      <anchorfile>a02308.html</anchorfile>
      <anchor>a9266625f4e7072270300acc4f98e86eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fluxIntegrator</name>
    <filename>a02324.html</filename>
    <member kind="function">
      <type></type>
      <name>fluxIntegrator</name>
      <anchorfile>a02324.html</anchorfile>
      <anchor>aba2fd73a7c845615fe90260f005947ba</anchor>
      <arglist>(compressibleSystem &amp;fluid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fluxIntegrator</name>
      <anchorfile>a02324.html</anchorfile>
      <anchor>ae958049ff8dcbdbb68d521f35a4b3a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>integrateFluxes</name>
      <anchorfile>a02324.html</anchorfile>
      <anchor>a990596142d3b6b1cfa05e5e679d4ae45</anchor>
      <arglist>(const dimensionedVector &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCoeffs</name>
      <anchorfile>a02324.html</anchorfile>
      <anchor>ab09516c4b8565b06ff7d47593cf2ae59</anchor>
      <arglist>(boolList &amp;setFields, boolList &amp;setDeltas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>compressibleSystem &amp;</type>
      <name>fluid_</name>
      <anchorfile>a02324.html</anchorfile>
      <anchor>ae2de72da436724b83e0e6846f3cbe26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; ButcherTable &gt;</type>
      <name>butcherTable_</name>
      <anchorfile>a02324.html</anchorfile>
      <anchor>a81e29fafeb01b6afd7a6efee76a45f44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fluxSplittingFunction</name>
    <filename>a03028.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::fluxSplittingFunction</name>
    <filename>a02640.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ae5250b98827eaf9e3e46dbfdc5f3f3ae</anchor>
      <arglist>(&quot;fluxSplittingFunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a248998532b76477b7916b847a0d8d59d</anchor>
      <arglist>(autoPtr, fluxSplittingFunction, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fluxSplittingFunction</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a9d9659533367bc9daa0681febfc406a3</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fluxSplittingFunction</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a7db87850d3d273b17c87f1643d999b35</anchor>
      <arglist>(const fluxSplittingFunction &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fluxSplittingFunction</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ad407a32fd89353d674930254ff7e976f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>h2</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ae01c2c6e984b18f50956b4ba15f5fa21</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const volScalarField &amp;ppfr, const dimensionedScalar &amp;e) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a5e3a95e2438f554b39132d6653553115</anchor>
      <arglist>(const fluxSplittingFunction &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; fluxSplittingFunction &gt;</type>
      <name>New</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aad19e7eb7c949201156ba0eb10960814</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const scalar</type>
      <name>h2Pow_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a7596a784a09e20e5040549367a59a664</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernels::FokkerPlanck</name>
    <filename>a01916.html</filename>
    <base>Foam::mixingSubModels::mixingKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>a744547cf1f8f8cab0775e6b41d928bda</anchor>
      <arglist>(&quot;FokkerPlanck&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FokkerPlanck</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>a718fc89d155ab44ff0ceab5edaebae42</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FokkerPlanck</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>a58e0c436828db3c5c2398eac07f00747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>aafaf4e06b7fe6f00e8e7f514ff539506</anchor>
      <arglist>(const volScalarMoment &amp;moment, const volScalarMomentFieldSet &amp;moments) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::Frank</name>
    <filename>a02600.html</filename>
    <base>Foam::wallLubricationModel</base>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>a152da4f74040fb11a7b1edcb75e56d21</anchor>
      <arglist>(&quot;Frank&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frank</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>afda02904b876255649385d4f33720944</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Frank</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>a7efad619c8f6a662560a93872b46604b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>a152da4f74040fb11a7b1edcb75e56d21</anchor>
      <arglist>(&quot;Frank&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frank</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>afda02904b876255649385d4f33720944</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Frank</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>a7efad619c8f6a662560a93872b46604b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModel</name>
    <filename>a02680.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>af94b60ff3239fa81ced4741c546de289</anchor>
      <arglist>(&quot;frictionalStressModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a78fd079ce6a06d7fd5c211cc35828dfd</anchor>
      <arglist>(autoPtr, frictionalStressModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>frictionalStressModel</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a10a490ec2de060d40877d7cd26f6577d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>frictionalStressModel</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>aff9231b677b1b453d928132325c21d20</anchor>
      <arglist>(const frictionalStressModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~frictionalStressModel</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a1f71b430053e2a10283db3dc6b8b96ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a78a698de7e4fc1f752747b1335fa0529</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>afa3fa87bedfa93b1b80530a1679735d0</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a29af736d71fa829f72210c2250f15452</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a2eeeaebe7e52f5d842385ce0b177150d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>acf88e5fded888e197e62d82e1786510c</anchor>
      <arglist>(const frictionalStressModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; frictionalStressModel &gt;</type>
      <name>New</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>af4b073000c3b3d6bba3ee4023f40aa98</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02680.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::fullFragmentation</name>
    <filename>a02160.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02160.html</anchorfile>
      <anchor>a9605c41753d122821a153bb82d936e9c</anchor>
      <arglist>(&quot;fullFragmentation&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fullFragmentation</name>
      <anchorfile>a02160.html</anchorfile>
      <anchor>aa3c53b21095cacbcf34c500cc696a3fa</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fullFragmentation</name>
      <anchorfile>a02160.html</anchorfile>
      <anchor>adb107a2c005595f4c614a4b15316b0e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a02160.html</anchorfile>
      <anchor>aa699955fa82d81b8bae2a63e1e80ee75</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mDMass</name>
      <anchorfile>a02160.html</anchorfile>
      <anchor>a1e2673712babed9c93a6d6a1b9a23979</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gammaEQMOM</name>
    <filename>a02024.html</filename>
    <base>Foam::extendedMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>afffec2f7f3e2436504686ee8fe86986f</anchor>
      <arglist>(&quot;gamma&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gammaEQMOM</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a41e161473baf15e743b15c1570ae7fee</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gammaEQMOM</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a89b0169394c5e2e3ed2587258b2f6b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a872602e3d9bce4c696be2c2684a05e5a</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a1eb2822d55fbaa8060321a24fc197329</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a88e521ae957743da06eec8e0ab777e2e</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>abee7f03ce3d0afa1dbc462ff6da2fff9</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a5831aae7a1d440271b5184f59f912503</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a479ec71576844909c5c0756350c24e2f</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>f</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>ae660e54162d92f5cea8aaded723ff23c</anchor>
      <arglist>(const scalarField &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gaussLobattoMomentInversion</name>
    <filename>a01996.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a82afeb74ebccf942227542383440ade1</anchor>
      <arglist>(&quot;GaussLobatto&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gaussLobattoMomentInversion</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a19f132e2fe6d20faf1a5a05768990c4b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gaussLobattoMomentInversion</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>ae6b87c401ec282458f44cea51931b47c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gaussMomentInversion</name>
    <filename>a02000.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>ab64427407045477aab2eb45b9f9efe1e</anchor>
      <arglist>(&quot;Gauss&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gaussMomentInversion</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>ab84059e01757095681a772d0021f9aac</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gaussMomentInversion</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a45dd9dc55811f1ddc792a320c2a283af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gaussRadauMomentInversion</name>
    <filename>a02004.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>af30711ded5ffb0a9c4feae46a978cc98</anchor>
      <arglist>(&quot;GaussRadau&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gaussRadauMomentInversion</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>aaa249ea77e932779c48df02a6ee4e382</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gaussRadauMomentInversion</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a1c10e28cb0b50ad94bb183aa98afcf05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Gibilaro</name>
    <filename>a02428.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>ab851bee6b3b0651f2957394fc183e00c</anchor>
      <arglist>(&quot;Gibilaro&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gibilaro</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>a7f4e3a8e5971a338fb56462eb6ff0170</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gibilaro</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>aaeb037bce5e7e24c2575f49d961ab996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>ab851bee6b3b0651f2957394fc183e00c</anchor>
      <arglist>(&quot;Gibilaro&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gibilaro</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>a7f4e3a8e5971a338fb56462eb6ff0170</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gibilaro</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>aaeb037bce5e7e24c2575f49d961ab996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02428.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::Gidaspow</name>
    <filename>a02664.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>ad2d65d02154bc44c919f16232a8a9b04</anchor>
      <arglist>(&quot;Gidaspow&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gidaspow</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a99a6cb9080f3159e7fc35cfa77f2f372</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gidaspow</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a9d1f845bcd7f32e6ac377ae81236f8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a00c7f0022b5ee5d1fa8d72b670921f9b</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModels::Gidaspow</name>
    <filename>a02728.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02728.html</anchorfile>
      <anchor>ad2d65d02154bc44c919f16232a8a9b04</anchor>
      <arglist>(&quot;Gidaspow&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gidaspow</name>
      <anchorfile>a02728.html</anchorfile>
      <anchor>a99a6cb9080f3159e7fc35cfa77f2f372</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gidaspow</name>
      <anchorfile>a02728.html</anchorfile>
      <anchor>a9d1f845bcd7f32e6ac377ae81236f8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02728.html</anchorfile>
      <anchor>ad7c5e15115875f60182d449907ad0ddc</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::GidaspowErgunWenYu</name>
    <filename>a02432.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>af9db2b83459be6cbcd78981faa4ecc7e</anchor>
      <arglist>(&quot;GidaspowErgunWenYu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GidaspowErgunWenYu</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>a62faf9144f49c46a463ca1c4c49c2430</anchor>
      <arglist>(const dictionary &amp;interfaceDict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GidaspowErgunWenYu</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>aefbf4c46366cc226cc69a611e96a52c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>af9db2b83459be6cbcd78981faa4ecc7e</anchor>
      <arglist>(&quot;GidaspowErgunWenYu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GidaspowErgunWenYu</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>a62faf9144f49c46a463ca1c4c49c2430</anchor>
      <arglist>(const dictionary &amp;interfaceDict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GidaspowErgunWenYu</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>aefbf4c46366cc226cc69a611e96a52c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02432.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::GidaspowSchillerNaumann</name>
    <filename>a02436.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>ae3e11a25058a3ce2460b9a0a33191e6f</anchor>
      <arglist>(&quot;GidaspowSchillerNaumann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GidaspowSchillerNaumann</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>abe030f4c056ca260d3fcb73543ca85de</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GidaspowSchillerNaumann</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>ab5d9d775fdc888b815b3300f91ff9cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>ae3e11a25058a3ce2460b9a0a33191e6f</anchor>
      <arglist>(&quot;GidaspowSchillerNaumann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GidaspowSchillerNaumann</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>abe030f4c056ca260d3fcb73543ca85de</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GidaspowSchillerNaumann</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>ab5d9d775fdc888b815b3300f91ff9cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02436.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Gosman</name>
    <filename>a02528.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>a692770c3dbf7f04069a2180f3b5a686d</anchor>
      <arglist>(&quot;Gosman&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gosman</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>aef7cab7bcc57d7203b4dfc17432a76fa</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gosman</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>af13143a9e4603179b282fbfc64066505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>a692770c3dbf7f04069a2180f3b5a686d</anchor>
      <arglist>(&quot;Gosman&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gosman</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>aef7cab7bcc57d7203b4dfc17432a76fa</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gosman</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>af13143a9e4603179b282fbfc64066505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02528.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModel</name>
    <filename>a02696.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a2aba49360c7f76bb36eb0020006414c4</anchor>
      <arglist>(&quot;granularPressureModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a70b220bda08cc7d9134c104b05da8366</anchor>
      <arglist>(autoPtr, granularPressureModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>granularPressureModel</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a5bf40c505c80f8322a78fe9318dec694</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>granularPressureModel</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a0a577475dacaf97e3355d1985c530528</anchor>
      <arglist>(const granularPressureModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~granularPressureModel</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>af438d46cca49e7b2ba5ac4705820ac64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a0ac44c0b119c3531fc5adb56d3aa708a</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a310d1f0ffb8194ad80ac60a347bfffee</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a74dd9ee888cd7865eec2faa282810249</anchor>
      <arglist>(const granularPressureModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; granularPressureModel &gt;</type>
      <name>New</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a930e3faa668f26dba20a832ed632f12a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02696.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::growthModel</name>
    <filename>a02204.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>ab1ef5bca2c86ba9151614ebeaffed754</anchor>
      <arglist>(&quot;growthModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a2fd8f560fb276de1b490ddbac9b50cfc</anchor>
      <arglist>(autoPtr, growthModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>growthModel</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>aa383495cbbb616e5138b6b5ce8a2630b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>growthModel</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>ab03c2f4aa71827156d67d23277880943</anchor>
      <arglist>(const growthModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~growthModel</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a2cbcf75a5aa3c9f8e8b9d40904732c29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Kg</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>afe6f84db36f2b69598666b7fe49227ac</anchor>
      <arglist>(const scalar &amp;abscissa, const label environment=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>phaseSpaceConvection</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>ac45301c39b1491be1ff2d9af4da6c539</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const scalarQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>phaseSpaceConvection</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a0ea8778355072b1b1770b9c941121c5b</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a185b7bfc3ebfdecdfe0bd0e606350fe6</anchor>
      <arglist>(const growthModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; growthModel &gt;</type>
      <name>New</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a7da088e2d1463d28793d9e080bf244a6</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cg_</name>
      <anchorfile>a02204.html</anchorfile>
      <anchor>a77eb6079970cf46157d09f0370132b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePairKey::hash</name>
    <filename>a02804.html</filename>
    <member kind="function">
      <type></type>
      <name>hash</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>af5d527ef2a6e3f43563ad4cb15872140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>operator()</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a321d4ec784483996fff7407eabaf588b</anchor>
      <arglist>(const phasePairKey &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hash</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>af5d527ef2a6e3f43563ad4cb15872140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>operator()</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a321d4ec784483996fff7407eabaf588b</anchor>
      <arglist>(const phasePairKey &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::heatTransferModel</name>
    <filename>a02820.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>ac974b03e410e13bd0a68556f0ae57363</anchor>
      <arglist>(&quot;heatTransferModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a04ebd25958866830d965b1eaf43ec380</anchor>
      <arglist>(autoPtr, heatTransferModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>heatTransferModel</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a6e98f7ab55fdecc569fefd25adfa8e3e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~heatTransferModel</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a0dbbb7e50a89fd795069d226bdbee458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a2bd468c3a715df158628a2cd4e8e1ae0</anchor>
      <arglist>(const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; heatTransferModel &gt;</type>
      <name>New</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a63c7797c3b23e437fbe2e7b409d5840e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimK</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>af5135bc8dd5edb6b0037af125aa01e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>residualAlpha_</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a80e4b957331ddeaf1ebe3d8a825cf24d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::hermiteQuadrature</name>
    <filename>a01892.html</filename>
    <member kind="function">
      <type></type>
      <name>hermiteQuadrature</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a54fda1eff92961a4338bb81d11e3eac7</anchor>
      <arglist>(const label &amp;nDim, const label &amp;nOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHermiteQuadrature</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a34322b582d3e8a8ffe6326d70f188fe7</anchor>
      <arglist>(const vector &amp;mu, const symmTensor &amp;Pp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hermiteQuadrature</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a71ae54f3714a54e8dd51bd9a428c6bc6</anchor>
      <arglist>(const hermiteQuadrature &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>hermiteWeights</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a87a6c41eaa39d348bce2de7e1cbb6ce3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vectorList &amp;</type>
      <name>hermiteAbscissas</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a86f1704995396df4ec04a946d5dfcf22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vectorList &amp;</type>
      <name>hermiteAbscissas</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>ae6bc6d9ffd3f3130f843fdbe7aa3fb0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vectorList &amp;</type>
      <name>hermiteOriginalAbscissas</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>af12f8b2eaf979c5d664442379baf1ca1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>maxAbs</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>aba0b6a8832fd3e0adabf037b8a3fa8ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a743263022b12c8849f719e6ce477117b</anchor>
      <arglist>(const hermiteQuadrature &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fluxFunctions::HLL</name>
    <filename>a02316.html</filename>
    <base>Foam::fluxFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02316.html</anchorfile>
      <anchor>aaec60fc6ce26a7b16e974467dbb0209a</anchor>
      <arglist>(&quot;HLL&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HLL</name>
      <anchorfile>a02316.html</anchorfile>
      <anchor>a681559dd0e80c66e746ccf2b90284f98</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HLL</name>
      <anchorfile>a02316.html</anchorfile>
      <anchor>a377a46db7720db38387261702ce967f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFluxes</name>
      <anchorfile>a02316.html</anchorfile>
      <anchor>a74cf37df2d9a52c5fc680df46be08b90</anchor>
      <arglist>(surfaceScalarField &amp;massFlux, surfaceVectorField &amp;momentumFlux, surfaceScalarField &amp;energyFlux, const volScalarField &amp;rho, const volVectorField &amp;U, const volScalarField &amp;H, const volScalarField &amp;p, const volScalarField &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fluxFunctions::HLLC</name>
    <filename>a02312.html</filename>
    <base>Foam::fluxFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02312.html</anchorfile>
      <anchor>a7dd980665a4a15f3216f6a308ac2ca23</anchor>
      <arglist>(&quot;HLLC&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HLLC</name>
      <anchorfile>a02312.html</anchorfile>
      <anchor>a6dc0168a6d57a5fb99be1040ede42473</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HLLC</name>
      <anchorfile>a02312.html</anchorfile>
      <anchor>a3893a036404848f975ea5e2430f3b955</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFluxes</name>
      <anchorfile>a02312.html</anchorfile>
      <anchor>a74cf37df2d9a52c5fc680df46be08b90</anchor>
      <arglist>(surfaceScalarField &amp;massFlux, surfaceVectorField &amp;momentumFlux, surfaceScalarField &amp;energyFlux, const volScalarField &amp;rho, const volVectorField &amp;U, const volScalarField &amp;H, const volScalarField &amp;p, const volScalarField &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::HLLCFlux</name>
    <filename>a02940.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::HLLFlux</name>
    <filename>a02944.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::HrenyaSinclair</name>
    <filename>a02668.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02668.html</anchorfile>
      <anchor>ac3738c27abc025a4d3ae9b60733d519e</anchor>
      <arglist>(&quot;HrenyaSinclair&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HrenyaSinclair</name>
      <anchorfile>a02668.html</anchorfile>
      <anchor>a355f9db3b98cb68e9fcfede9c56d12be</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HrenyaSinclair</name>
      <anchorfile>a02668.html</anchorfile>
      <anchor>ae22c53ae3cb16feeb82adb0e4c8f8c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02668.html</anchorfile>
      <anchor>a00c7f0022b5ee5d1fa8d72b670921f9b</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02668.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModels::HrenyaSinclair</name>
    <filename>a02732.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02732.html</anchorfile>
      <anchor>ac3738c27abc025a4d3ae9b60733d519e</anchor>
      <arglist>(&quot;HrenyaSinclair&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HrenyaSinclair</name>
      <anchorfile>a02732.html</anchorfile>
      <anchor>a355f9db3b98cb68e9fcfede9c56d12be</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HrenyaSinclair</name>
      <anchorfile>a02732.html</anchorfile>
      <anchor>ae22c53ae3cb16feeb82adb0e4c8f8c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02732.html</anchorfile>
      <anchor>ad7c5e15115875f60182d449907ad0ddc</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02732.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::hydrodynamicAggregation</name>
    <filename>a02096.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02096.html</anchorfile>
      <anchor>a40ce4cef678e15a0f33624e28b824edf</anchor>
      <arglist>(&quot;hydrodynamic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hydrodynamicAggregation</name>
      <anchorfile>a02096.html</anchorfile>
      <anchor>ac2d59e2e1b480844473b8c9e80544658</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~hydrodynamicAggregation</name>
      <anchorfile>a02096.html</anchorfile>
      <anchor>aa892ea992f56afc113c78780d52f9d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02096.html</anchorfile>
      <anchor>a3a5510fce9094461685717d84f4fe6fe</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::hyperbolic</name>
    <filename>a03068.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethods::hyperbolic</name>
    <filename>a02772.html</filename>
    <base>Foam::blendingMethod</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02772.html</anchorfile>
      <anchor>a023b41fe28b3789813386427d8a0fd77</anchor>
      <arglist>(&quot;hyperbolic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hyperbolic</name>
      <anchorfile>a02772.html</anchorfile>
      <anchor>aff47927a8a4c30d803dc782683ad2b9c</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~hyperbolic</name>
      <anchorfile>a02772.html</anchorfile>
      <anchor>aea3d7726a8ee88ac083cf73de5e2b74a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a02772.html</anchorfile>
      <anchor>ad97d6fe7262a5f6e448d7595475e5f07</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a02772.html</anchorfile>
      <anchor>a97b3b68a68068eaae01e522bc01f8766</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::hyperbolicMomentInversion</name>
    <filename>a02008.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a023b41fe28b3789813386427d8a0fd77</anchor>
      <arglist>(&quot;hyperbolic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hyperbolicMomentInversion</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a202db03b90040e5ee16de535355c3fbd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~hyperbolicMomentInversion</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a8e17a4c8ba89ad4fd6d8fa6df58e55bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>af2d72953108395e48c42760a2f79fa5b</anchor>
      <arglist>(univariateMomentSet &amp;moments, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::environmentMixingModel::IEM</name>
    <filename>a02916.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::environmentMixingModels::IEM</name>
    <filename>a02196.html</filename>
    <base>Foam::populationBalanceSubModels::environmentMixingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02196.html</anchorfile>
      <anchor>a1aa74a2a8e1a424bcbf1e400e8a4c504</anchor>
      <arglist>(&quot;IEM&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IEM</name>
      <anchorfile>a02196.html</anchorfile>
      <anchor>a5222f7e2d567388461b52dea31883834</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IEM</name>
      <anchorfile>a02196.html</anchorfile>
      <anchor>a997e52c6e4e36862421a083fced3f78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a02196.html</anchorfile>
      <anchor>a17f401f4032348b3bed07d8cb7502591</anchor>
      <arglist>(const volScalarField &amp;meanMoment, const volScalarField &amp;meanMomentVariance, const volScalarField &amp;meanMixtureFraction) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernels::IEM</name>
    <filename>a01920.html</filename>
    <base>Foam::mixingSubModels::mixingKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a1aa74a2a8e1a424bcbf1e400e8a4c504</anchor>
      <arglist>(&quot;IEM&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IEM</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a0889eb4694ebdfaf84d6835f64d09606</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IEM</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a997e52c6e4e36862421a083fced3f78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aafaf4e06b7fe6f00e8e7f514ff539506</anchor>
      <arglist>(const volScalarMoment &amp;moment, const volScalarMomentFieldSet &amp;moments) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::moment::iNew</name>
    <filename>a02036.html</filename>
    <member kind="function">
      <type></type>
      <name>iNew</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ac964958aa3687995a13af9694e7bed9a</anchor>
      <arglist>(const word &amp;distributionName, const fvMesh &amp;mesh, const autoPtr&lt; mappedPtrList&lt; nodeType &gt;&gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; moment&lt; fieldType, nodeType &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a68de9efd1e3208e7f397a649b9e2a873</anchor>
      <arglist>(Istream &amp;is) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::velocityQuadratureNode::iNew</name>
    <filename>a02252.html</filename>
    <member kind="function">
      <type></type>
      <name>iNew</name>
      <anchorfile>a02252.html</anchorfile>
      <anchor>ace3be15a7ff1da093c74069761b2e079</anchor>
      <arglist>(const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const PtrList&lt; dimensionSet &gt; &amp;abscissaeDimensions, const wordList &amp;boundaryTypes, const bool extended, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; velocityQuadratureNode&lt; scalarType, vectorType &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a02252.html</anchorfile>
      <anchor>a06baae4f6ce78acb8e79cd532d964395</anchor>
      <arglist>(Istream &amp;is) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::quadratureNode::iNew</name>
    <filename>a02244.html</filename>
    <member kind="function">
      <type></type>
      <name>iNew</name>
      <anchorfile>a02244.html</anchorfile>
      <anchor>ace3be15a7ff1da093c74069761b2e079</anchor>
      <arglist>(const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const PtrList&lt; dimensionSet &gt; &amp;abscissaeDimensions, const wordList &amp;boundaryTypes, const bool extended, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; quadratureNode&lt; scalarType, vectorType &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a02244.html</anchorfile>
      <anchor>a98ed8ad484815d304190b50654fc3e49</anchor>
      <arglist>(Istream &amp;is) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::interpolated</name>
    <filename>a02572.html</filename>
    <base>Foam::wallDampingModel</base>
    <base>Foam::wallDampingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>aacb668cf543a9f5aac54481b66db09f0</anchor>
      <arglist>(&quot;interpolated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>interpolated</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>ad92a30c3e8c1b95706d50a8884fe46ac</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~interpolated</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>a0074db41285b7d71b764ef377efadd07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>ab1029dcf1440253a59875b2c2b48ad8e</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>af4063aeeba0f32227bdab5f00ad6fe16</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>ac1e22254a87d41c984ca0c263f606602</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>aacb668cf543a9f5aac54481b66db09f0</anchor>
      <arglist>(&quot;interpolated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>interpolated</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>ad92a30c3e8c1b95706d50a8884fe46ac</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~interpolated</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>a0074db41285b7d71b764ef377efadd07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>ab1029dcf1440253a59875b2c2b48ad8e</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>af4063aeeba0f32227bdab5f00ad6fe16</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>ac1e22254a87d41c984ca0c263f606602</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>a876cc0d3d5a34ddb0c914135adcc962c</anchor>
      <arglist>(const label nodei) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02572.html</anchorfile>
      <anchor>a876cc0d3d5a34ddb0c914135adcc962c</anchor>
      <arglist>(const label nodei) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::IshiiZuber</name>
    <filename>a02440.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a27504886a2f81579eb29c198c0e196cf</anchor>
      <arglist>(&quot;IshiiZuber&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IshiiZuber</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a104e87581dd16bdd210bc2b262e92af4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IshiiZuber</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a9fe64a0408a35ff641b612470cf0b4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a27504886a2f81579eb29c198c0e196cf</anchor>
      <arglist>(&quot;IshiiZuber&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IshiiZuber</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a104e87581dd16bdd210bc2b262e92af4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IshiiZuber</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a9fe64a0408a35ff641b612470cf0b4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02440.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModels::JohnsonJackson</name>
    <filename>a02684.html</filename>
    <base>Foam::kineticTheoryModels::frictionalStressModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>ae1c4d53d4973b0f037e5b53bba3d5533</anchor>
      <arglist>(&quot;JohnsonJackson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJackson</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a7296bb86fc5f0eb4a870ac1887ad077d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JohnsonJackson</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a08dcf02c1cbca1f0acd83f74af2a3cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>add25d5d3e1ee0b1714f02a6a34f9a341</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a631595abb00aaed55167c56f636c12d0</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>ad7693bd27012ae20cc72acb451c2e76c</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::JohnsonJacksonParticleSlipFvPatchVectorField</name>
    <filename>a02616.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a2c785b359de0e5b11cdbe7c4c49d0469</anchor>
      <arglist>(&quot;JohnsonJacksonParticleSlip&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a42f0f792754bdd67df4cc8567525793b</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a0ec0ca4edd9b40d033bd3ebb91f0b4e0</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>aa97cbe08f1accba351481e330fce7ebd</anchor>
      <arglist>(const JohnsonJacksonParticleSlipFvPatchVectorField &amp;, const fvPatch &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a4308424ef4850dd6ced3b97e4203eb0b</anchor>
      <arglist>(const JohnsonJacksonParticleSlipFvPatchVectorField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchVectorField &gt;</type>
      <name>clone</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>af0f4bc68c73acc08f11adb3a8957d875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a91cb111fe011fb94983f881c454deaaf</anchor>
      <arglist>(const JohnsonJacksonParticleSlipFvPatchVectorField &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchVectorField &gt;</type>
      <name>clone</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a089f8c8dc7161cb741c2b911efc67d76</anchor>
      <arglist>(const DimensionedField&lt; vector, volMesh &gt; &amp;iF) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>autoMap</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a14e8e75907d10256d8a4ab61520e7e08</anchor>
      <arglist>(const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rmap</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a63e5d4ac1533d321010cd6f25fe08385</anchor>
      <arglist>(const fvPatchVectorField &amp;, const labelList &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCoeffs</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a578f7c989cf81854d45213ec3ee3062a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>aee7d874639b15522c4b683f23bbff5fd</anchor>
      <arglist>(Ostream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::JohnsonJacksonParticleThetaFvPatchScalarField</name>
    <filename>a02620.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a3503fab13eb0a7226df1231951df6089</anchor>
      <arglist>(&quot;JohnsonJacksonParticleTheta&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>ab4de2b6aeef0cd5aed0a94d42a80ca16</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>ad896ebd47fc1f2f92971dcefbdda839a</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>aa297c89153786acaae10e1c2710a3928</anchor>
      <arglist>(const JohnsonJacksonParticleThetaFvPatchScalarField &amp;, const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a7a91158a3117d8fcfab3cb29cc279b48</anchor>
      <arglist>(const JohnsonJacksonParticleThetaFvPatchScalarField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>abeb5f251f04d334f7f18704c9227d8aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a4cf6a9245c7d534d37bb0232004d294a</anchor>
      <arglist>(const JohnsonJacksonParticleThetaFvPatchScalarField &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a617bc55e78cf53196df9217431e5aa96</anchor>
      <arglist>(const DimensionedField&lt; scalar, volMesh &gt; &amp;iF) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>autoMap</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a14e8e75907d10256d8a4ab61520e7e08</anchor>
      <arglist>(const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rmap</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a1a69c2588e34c53c0a08a60930c964bc</anchor>
      <arglist>(const fvPatchScalarField &amp;, const labelList &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCoeffs</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a578f7c989cf81854d45213ec3ee3062a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>aee7d874639b15522c4b683f23bbff5fd</anchor>
      <arglist>(Ostream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModels::JohnsonJacksonSchaeffer</name>
    <filename>a02688.html</filename>
    <base>Foam::kineticTheoryModels::frictionalStressModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>ab83eda930b6195a385f23bec86134a83</anchor>
      <arglist>(&quot;JohnsonJacksonSchaeffer&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonSchaeffer</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>a00b7ef071ba9887dfd03409ab651af01</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JohnsonJacksonSchaeffer</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>a6b3e0a63ccb76de652e667f189df185f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>add25d5d3e1ee0b1714f02a6a34f9a341</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>a631595abb00aaed55167c56f636c12d0</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>ad7693bd27012ae20cc72acb451c2e76c</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02688.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheory</name>
    <filename>a03016.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::RASModels::kineticTheory</name>
    <filename>a02624.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>aeee3c97531d8416b36e10190a819c1ca</anchor>
      <arglist>(&quot;kineticTheory&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kineticTheory</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a4562396d267ff8ae93b81ce8c504bcf7</anchor>
      <arglist>(const volScalarField &amp;alpha, const volScalarField &amp;rho, const volVectorField &amp;U, const surfaceScalarField &amp;alphaRhoPhi, const surfaceScalarField &amp;phi, const phaseModel &amp;transport, const word &amp;propertiesName=turbulenceModel::propertiesName, const word &amp;type=typeName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kineticTheory</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a47af8a9ad0535cc75619e3fc38fc5283</anchor>
      <arglist>(const kineticTheory &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~kineticTheory</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>ad660fcabc8a0587f19fe8fdb9d202b46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a253447ded10e8fc7fceccbbea00f98ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a96bad7745a84df38388d0d0be6edfd8a</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>k</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a2cc3daa68147a9052c2b37e9ac37eca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>epsilon</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>ad79e047917669fbb490d351478651e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>R</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a577b084625b71e318cdd3a5375187925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pPrime</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a05d73539f9e240671bea29cf461dfd61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>pPrimef</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a43f4251b40e33ebde12511f7cdf6ffd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>devRhoReff</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a342a707ec61b66abf8819c9a6c71df72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>a70c6f2b264bc57f5151c900cb136bb20</anchor>
      <arglist>(volVectorField &amp;U) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02624.html</anchorfile>
      <anchor>aebd318c4e02aef9bcc9ee6d63cdc53d2</anchor>
      <arglist>(const kineticTheory &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModel</name>
    <filename>a02652.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a351493c22b69051dfa6284d86d90f8c4</anchor>
      <arglist>(&quot;kineticTheoryModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a093bb45d065abe0bcdf87017785a1d53</anchor>
      <arglist>(autoPtr, kineticTheoryModel, dictionary,(const dictionary &amp;dict, const phaseModel &amp;phase),(dict, phase))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kineticTheoryModel</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a7fd42936ed093e90632e665b58e3c1d2</anchor>
      <arglist>(const dictionary &amp;dict, const phaseModel &amp;phase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~kineticTheoryModel</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a482d1ce20e490a12c02976350499c8f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>Theta</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>af4b5383b62e2e114e58d83867c21b780</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>Sigma</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a37b097e50939f6f10311074ec7659007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const scalarField &amp;</type>
      <name>ThetaPatch</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>adc2da88fa1fb3bd88f6514544929a49e</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>nu</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a7d11ae9f428de099a31814f6e8b4c455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const scalarField &amp;</type>
      <name>nuPatch</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a5f3c9dd67be2e4be71e0ca12bc819951</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a253447ded10e8fc7fceccbbea00f98ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>lambda</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>ae70894a404fca6a5ed6b8d48187ac583</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>kappa</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a17552ab0a335226a76038b549bdf2713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const scalarField &amp;</type>
      <name>kappaPatch</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a26e21fa4924d004a2fd1341356581354</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>g0</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>ad51c85a6c9107ee34c7558a7cdfdbc47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const scalarField &amp;</type>
      <name>g0Patch</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a08d47768682cd9d34e41d527f24db40f</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>g0Prime</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a842145196129b9a386ae6d27f224a666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pPrime</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a05d73539f9e240671bea29cf461dfd61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>pPrimef</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a43f4251b40e33ebde12511f7cdf6ffd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dimensionedScalar &amp;</type>
      <name>alphaMax</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a0be7497da8e45b815510ff382b082fcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a9e230055b42bcb328be9779a17c8be53</anchor>
      <arglist>(const volScalarField &amp;beta, const volScalarField &amp;alpha, const volTensorField &amp;gradU, const volSymmTensorField D)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportMoments</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a0f535fd73305c563ea38d9ef28017251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>maxUxDx</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a877ed22fcda0ce6947e27c2f80d0e7ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>h2</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a07c12d7cf3505bd6e8696b86d45bd12c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>h2f</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>abdaab31fbb55d1781b7012bddf69b1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>ddtAlphaDilute</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a10faacebb1182c246c8dbdff7ffbf395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeData</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a73ace448c639d2e1c943852abe89af7c</anchor>
      <arglist>(Ostream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; kineticTheoryModel &gt;</type>
      <name>New</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>abcd4f375d354c74468abdaf28a7cfe04</anchor>
      <arglist>(const dictionary &amp;dict, const phaseModel &amp;phase)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phaseModel &amp;</type>
      <name>phase_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a881b39a8089f59d8d1571639726059c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; kineticTheoryModels::viscosityModel &gt;</type>
      <name>viscosityModel_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>ab4df3ae974acd170d11e23e2cc0b87b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; kineticTheoryModels::conductivityModel &gt;</type>
      <name>conductivityModel_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>af75300563bef9c2de4825b452918011a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; kineticTheoryModels::radialModel &gt;</type>
      <name>radialModel_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>add063d4a8a05dda97043f4ca21e8e46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; kineticTheoryModels::granularPressureModel &gt;</type>
      <name>granularPressureModel_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a9caf9ec5c166282c0ea9dd67a56f1590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; kineticTheoryModels::frictionalStressModel &gt;</type>
      <name>frictionalStressModel_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a2e0e60ac1fc5221fd18dc212f3e5dff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>equilibrium_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a7456df1247dbba8f90be75b3598bea40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>e_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a769fd2364db5a99793256c93d00d723d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>alphaMax_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a642252e68cea6a5ab78daab96f1f96a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>alphaMinFriction_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a7d0ecc0927abd177f97055e9c961f18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>residualAlpha_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a9e788d53e0135b25ac6f5f81da5ed251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>maxNut_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a84e929806471108a1bcccbfc62664ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>Theta_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>ae1ceb9ec3323b215b8d5c8d9a5c54664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>lambda_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a799814c3e9e79477198e1afc4c306737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>g0_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a8e36946c3d1e37008d19c372957ff24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>kappa_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a105e18c9ad83434f829b94b3c61fab15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>nu_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a3bd190eef3d0f9d315c80875787aea7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>nuFric_</name>
      <anchorfile>a02652.html</anchorfile>
      <anchor>a8489d32e326d180620c38ebceff24fb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::KongFox</name>
    <filename>a03040.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::KongFox</name>
    <filename>a02672.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02672.html</anchorfile>
      <anchor>ac6f4746a59fdfd116bb0319f60bcd6b1</anchor>
      <arglist>(&quot;KongFox&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KongFox</name>
      <anchorfile>a02672.html</anchorfile>
      <anchor>a6735e9abd1ffd21b90136adf2ece31e9</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KongFox</name>
      <anchorfile>a02672.html</anchorfile>
      <anchor>a9023cd44f5bf1bbafcd064ed66098d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02672.html</anchorfile>
      <anchor>a00c7f0022b5ee5d1fa8d72b670921f9b</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModels::KongFox</name>
    <filename>a02700.html</filename>
    <base>Foam::kineticTheoryModels::granularPressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02700.html</anchorfile>
      <anchor>ac6f4746a59fdfd116bb0319f60bcd6b1</anchor>
      <arglist>(&quot;KongFox&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KongFox</name>
      <anchorfile>a02700.html</anchorfile>
      <anchor>a6735e9abd1ffd21b90136adf2ece31e9</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KongFox</name>
      <anchorfile>a02700.html</anchorfile>
      <anchor>a9023cd44f5bf1bbafcd064ed66098d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a02700.html</anchorfile>
      <anchor>a0c8957490daa843f7605391a43a51863</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a02700.html</anchorfile>
      <anchor>a64b8b5635c84589b424c5c7652c732fc</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::KongFox</name>
    <filename>a02736.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>ac6f4746a59fdfd116bb0319f60bcd6b1</anchor>
      <arglist>(&quot;KongFox&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KongFox</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>a6735e9abd1ffd21b90136adf2ece31e9</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KongFox</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>a9023cd44f5bf1bbafcd064ed66098d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>ad7c5e15115875f60182d449907ad0ddc</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Lain</name>
    <filename>a02444.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>a3c704c34be4dc8dc0e01ba18081b4102</anchor>
      <arglist>(&quot;Lain&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lain</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>ada85dfe5c40eb96e07023787aa0ab745</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lain</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>ae36cdf91ddf180a64b9766fe5ae1496b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>a3c704c34be4dc8dc0e01ba18081b4102</anchor>
      <arglist>(&quot;Lain&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lain</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>ada85dfe5c40eb96e07023787aa0ab745</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lain</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>ae36cdf91ddf180a64b9766fe5ae1496b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02444.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::Lamb</name>
    <filename>a02552.html</filename>
    <base>Foam::virtualMassModel</base>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a12e2e2803bbf74bce46bd237011ea2c0</anchor>
      <arglist>(&quot;Lamb&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lamb</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a58a366133f549d84004e29bf8e011ace</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lamb</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a343c59311abd70dac8a6f71ab3ce54c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a44448421a9a019b82ba27811e9c5f40c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a12e2e2803bbf74bce46bd237011ea2c0</anchor>
      <arglist>(&quot;Lamb&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lamb</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a58a366133f549d84004e29bf8e011ace</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lamb</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a343c59311abd70dac8a6f71ab3ce54c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02552.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::LegendreMagnaudet</name>
    <filename>a02480.html</filename>
    <base>Foam::liftModel</base>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>abbb7ed6dfd12f682709bd4b2f2b59e87</anchor>
      <arglist>(&quot;LegendreMagnaudet&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LegendreMagnaudet</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>acc53debfcea5371b060430124fce95a1</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LegendreMagnaudet</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>a724cb76c34f9e6efb9180c387cd2042f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>abbb7ed6dfd12f682709bd4b2f2b59e87</anchor>
      <arglist>(&quot;LegendreMagnaudet&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LegendreMagnaudet</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>acc53debfcea5371b060430124fce95a1</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LegendreMagnaudet</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>a724cb76c34f9e6efb9180c387cd2042f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernels::Lehr</name>
    <filename>a02388.html</filename>
    <base>Foam::coalescenceEfficiencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02388.html</anchorfile>
      <anchor>a923ed5a133248a6225ae7788e07ad039</anchor>
      <arglist>(&quot;Lehr&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lehr</name>
      <anchorfile>a02388.html</anchorfile>
      <anchor>a260eeba380aeb98274bfe764f33ab5dc</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lehr</name>
      <anchorfile>a02388.html</anchorfile>
      <anchor>ad86e61b80202f26800e56adc91038f91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02388.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02388.html</anchorfile>
      <anchor>aa4f6d3411e9f9168ecb7d78572be6520</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02388.html</anchorfile>
      <anchor>a35a2484b126b3a30d82fbce52ebf5725</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModel</name>
    <filename>a02484.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a84a6419c00a3e5ce648c4a205646990d</anchor>
      <arglist>(&quot;liftModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>abd49926dea833d9a10460fba37062404</anchor>
      <arglist>(autoPtr, liftModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>liftModel</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>abebc651db42a156f1d5510f17d220e12</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~liftModel</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a2e3eccdec8e6ad676b2bb5c71250c4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a1f3c7376cc68888a439362308b9eec95</anchor>
      <arglist>(const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a94c1f5c4b84872c51949c29e0808ed0b</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ac57207a08fb3bc61d4ae7d30ab165103</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ad768dc8f571fc7fb95678ffe3c58b359</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a84a6419c00a3e5ce648c4a205646990d</anchor>
      <arglist>(&quot;liftModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>abd49926dea833d9a10460fba37062404</anchor>
      <arglist>(autoPtr, liftModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>liftModel</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>abebc651db42a156f1d5510f17d220e12</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~liftModel</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a2e3eccdec8e6ad676b2bb5c71250c4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a1f3c7376cc68888a439362308b9eec95</anchor>
      <arglist>(const label nodei, const label nodej) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a94c1f5c4b84872c51949c29e0808ed0b</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ac57207a08fb3bc61d4ae7d30ab165103</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ad768dc8f571fc7fb95678ffe3c58b359</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; liftModel &gt;</type>
      <name>New</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a15fc4d77eaee8828fa7f32cab598e0e9</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; liftModel &gt;</type>
      <name>New</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a15fc4d77eaee8828fa7f32cab598e0e9</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ae080efa852cff98918608f047c337d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::linear</name>
    <filename>a02576.html</filename>
    <base>Foam::wallDampingModels::interpolated</base>
    <base>Foam::wallDampingModels::interpolated</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>ab0fc4a9eb6b967007278346598d07480</anchor>
      <arglist>(&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linear</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>a666fca855c19bd135c536da260f23323</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linear</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>af3fe8bd0398e006d8f2a6e36b957b92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>ab0fc4a9eb6b967007278346598d07480</anchor>
      <arglist>(&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linear</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>a666fca855c19bd135c536da260f23323</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linear</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>af3fe8bd0398e006d8f2a6e36b957b92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>a544a6b65a82dd422f9b35fee1c8a2831</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02576.html</anchorfile>
      <anchor>a544a6b65a82dd422f9b35fee1c8a2831</anchor>
      <arglist>(const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::linear</name>
    <filename>a03072.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethods::linear</name>
    <filename>a02776.html</filename>
    <base>Foam::blendingMethod</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02776.html</anchorfile>
      <anchor>ab0fc4a9eb6b967007278346598d07480</anchor>
      <arglist>(&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linear</name>
      <anchorfile>a02776.html</anchorfile>
      <anchor>a79b60ebb16c571c744558873b82fd747</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~linear</name>
      <anchorfile>a02776.html</anchorfile>
      <anchor>a7c5860dbf7acb473278fab0d5d587c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a02776.html</anchorfile>
      <anchor>ad97d6fe7262a5f6e448d7595475e5f07</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a02776.html</anchorfile>
      <anchor>a97b3b68a68068eaae01e522bc01f8766</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::lognormalEQMOM</name>
    <filename>a02028.html</filename>
    <base>Foam::extendedMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a3a34900882fe6c779674da9f3acabe2b</anchor>
      <arglist>(&quot;lognormal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lognormalEQMOM</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a041c92a009ff5d815d4114f739c90671</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~lognormalEQMOM</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a5eae814d9bdd2c784867bb2fbd1fbb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a872602e3d9bce4c696be2c2684a05e5a</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a1eb2822d55fbaa8060321a24fc197329</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a88e521ae957743da06eec8e0ab777e2e</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>abee7f03ce3d0afa1dbc462ff6da2fff9</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a5831aae7a1d440271b5184f59f912503</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a479ec71576844909c5c0756350c24e2f</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>f</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>ae660e54162d92f5cea8aaded723ff23c</anchor>
      <arglist>(const scalarField &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::LopezDeBertodano</name>
    <filename>a02532.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a3ff04231151de420d6b879006395635d</anchor>
      <arglist>(&quot;LopezDeBertodano&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LopezDeBertodano</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a7db1f3275f09c34bd58efcb661a8c365</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LopezDeBertodano</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a807ce029e5de97d94ab7050539e2791f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a3ff04231151de420d6b879006395635d</anchor>
      <arglist>(&quot;LopezDeBertodano&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LopezDeBertodano</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a7db1f3275f09c34bd58efcb661a8c365</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LopezDeBertodano</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a807ce029e5de97d94ab7050539e2791f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::Lun</name>
    <filename>a03044.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModels::Lun</name>
    <filename>a02704.html</filename>
    <base>Foam::kineticTheoryModels::granularPressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02704.html</anchorfile>
      <anchor>a71ac58eefea271425c68a5b19fe89d5b</anchor>
      <arglist>(&quot;Lun&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lun</name>
      <anchorfile>a02704.html</anchorfile>
      <anchor>a23ee449d6527b7755a1da51eae89e357</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lun</name>
      <anchorfile>a02704.html</anchorfile>
      <anchor>a9195da2539df648c03a1538ca2e95854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a02704.html</anchorfile>
      <anchor>a0c8957490daa843f7605391a43a51863</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a02704.html</anchorfile>
      <anchor>a64b8b5635c84589b424c5c7652c732fc</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModels::LunSavage</name>
    <filename>a02716.html</filename>
    <base>Foam::kineticTheoryModels::radialModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>aa7326a112256126f745e25a13b058971</anchor>
      <arglist>(&quot;LunSavage&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LunSavage</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a7bce5061b72bd157fe880f9dbe40a463</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LunSavage</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a75468dcca744cce43224d29b1835f02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a5317f8cb29ac522c4d7b82ab1b7bc245</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a56b9b7860b3f308982fda10a9724be08</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernels::Luo</name>
    <filename>a02392.html</filename>
    <base>Foam::coalescenceEfficiencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02392.html</anchorfile>
      <anchor>adce3cb7413e90b35ee1990d4b8057ac1</anchor>
      <arglist>(&quot;Luo&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Luo</name>
      <anchorfile>a02392.html</anchorfile>
      <anchor>a25b55e93de13cc819ba864eee63b1320</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Luo</name>
      <anchorfile>a02392.html</anchorfile>
      <anchor>ab2a7e6510b1c3ad2f6804aa2bfbb2b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02392.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02392.html</anchorfile>
      <anchor>aa4f6d3411e9f9168ecb7d78572be6520</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02392.html</anchorfile>
      <anchor>a35a2484b126b3a30d82fbce52ebf5725</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceFrequencyKernels::Luo</name>
    <filename>a02408.html</filename>
    <base>Foam::coalescenceFrequencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02408.html</anchorfile>
      <anchor>adce3cb7413e90b35ee1990d4b8057ac1</anchor>
      <arglist>(&quot;Luo&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Luo</name>
      <anchorfile>a02408.html</anchorfile>
      <anchor>a25b55e93de13cc819ba864eee63b1320</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Luo</name>
      <anchorfile>a02408.html</anchorfile>
      <anchor>ab2a7e6510b1c3ad2f6804aa2bfbb2b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02408.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>omega</name>
      <anchorfile>a02408.html</anchorfile>
      <anchor>a24e44c622256717a0b96b50452b9b70f</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>omega</name>
      <anchorfile>a02408.html</anchorfile>
      <anchor>aeb501baeeb65912923d5e950872b3182</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::Luo</name>
    <filename>a03000.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::LuoSvendsen</name>
    <filename>a02124.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a7dabdef9e0dba98649b68dc7314a15f8</anchor>
      <arglist>(&quot;LuoSvendsen&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LuoSvendsen</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a54c8cbfbadc65214ec3705add2cfbab6</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LuoSvendsen</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a4550d3c84edbc1ad0d8f8a6701300eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a946b65699921072f6210c5f83054e8a1</anchor>
      <arglist>(const scalar &amp;abscissa, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::breakupKernels::LuoSvendsen</name>
    <filename>a02968.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::bubbleBreakupKernels::LuoSvendsen</name>
    <filename>a02356.html</filename>
    <base>Foam::bubbleBreakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a7dabdef9e0dba98649b68dc7314a15f8</anchor>
      <arglist>(&quot;LuoSvendsen&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LuoSvendsen</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a54c8cbfbadc65214ec3705add2cfbab6</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LuoSvendsen</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a49dd263d7b450e362a796382ccf1f3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Kb</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a0c36b2983a634da9e4dc3f4e93b54099</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ad476441e4b38a99e8eb1d06e603f57b7</anchor>
      <arglist>(const label celli, const label nodei) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mappedList</name>
    <filename>a01868.html</filename>
    <templarg>mappedType</templarg>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a26c9f78a6214239296c4c608c869df00</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a4e0c1ee1e761ffe537e9ae5ec9c9e781</anchor>
      <arglist>(const label size, const labelListList &amp;indexes, const mappedType &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a55531cc1ed7c2326ff2191e51e8ef2d0</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map, const mappedType &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a76ff49b434067ab0eace66c4b7e59c24</anchor>
      <arglist>(const List&lt; mappedType &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a17068b536b6a69f3aefa64b241b0764e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedList&lt; dimensionedScalar &gt;</name>
    <filename>a01868.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a26c9f78a6214239296c4c608c869df00</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a4e0c1ee1e761ffe537e9ae5ec9c9e781</anchor>
      <arglist>(const label size, const labelListList &amp;indexes, const dimensionedScalar &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a55531cc1ed7c2326ff2191e51e8ef2d0</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map, const dimensionedScalar &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a76ff49b434067ab0eace66c4b7e59c24</anchor>
      <arglist>(const List&lt; dimensionedScalar &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a17068b536b6a69f3aefa64b241b0764e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>dimensionedScalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>dimensionedScalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>dimensionedScalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedList&lt; scalar &gt;</name>
    <filename>a01868.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a26c9f78a6214239296c4c608c869df00</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a4e0c1ee1e761ffe537e9ae5ec9c9e781</anchor>
      <arglist>(const label size, const labelListList &amp;indexes, const scalar &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a55531cc1ed7c2326ff2191e51e8ef2d0</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map, const scalar &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a76ff49b434067ab0eace66c4b7e59c24</anchor>
      <arglist>(const List&lt; scalar &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a17068b536b6a69f3aefa64b241b0764e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedList&lt; scalarList &gt;</name>
    <filename>a01868.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a26c9f78a6214239296c4c608c869df00</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a4e0c1ee1e761ffe537e9ae5ec9c9e781</anchor>
      <arglist>(const label size, const labelListList &amp;indexes, const scalarList &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a55531cc1ed7c2326ff2191e51e8ef2d0</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map, const scalarList &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a76ff49b434067ab0eace66c4b7e59c24</anchor>
      <arglist>(const List&lt; scalarList &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a17068b536b6a69f3aefa64b241b0764e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedList&lt; vector &gt;</name>
    <filename>a01868.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a26c9f78a6214239296c4c608c869df00</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a4e0c1ee1e761ffe537e9ae5ec9c9e781</anchor>
      <arglist>(const label size, const labelListList &amp;indexes, const vector &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a55531cc1ed7c2326ff2191e51e8ef2d0</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map, const vector &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a76ff49b434067ab0eace66c4b7e59c24</anchor>
      <arglist>(const List&lt; vector &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedList</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a17068b536b6a69f3aefa64b241b0764e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>vector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const vector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const vector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>vector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const vector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>vector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mappedLists</name>
    <filename>a02872.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::mappedPtrList</name>
    <filename>a01872.html</filename>
    <templarg>mappedType</templarg>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; mappedType &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, mappedType *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, mappedType *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; mappedType &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; mappedType &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedPtrList&lt; momentType &gt;</name>
    <filename>a01872.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; momentType &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, momentType *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, momentType *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; momentType &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; momentType &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedPtrList&lt; surfaceScalarMoment &gt;</name>
    <filename>a01872.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; surfaceScalarMoment &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, surfaceScalarMoment *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, surfaceScalarMoment *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; surfaceScalarMoment &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; surfaceScalarMoment &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedPtrList&lt; volScalarField &gt;</name>
    <filename>a01872.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; volScalarField &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, volScalarField *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, volScalarField *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; volScalarField &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; volScalarField &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedPtrList&lt; volScalarMoment &gt;</name>
    <filename>a01872.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; volScalarMoment &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>volScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const volScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volScalarMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, volScalarMoment *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, volScalarMoment *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; volScalarMoment &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; volScalarMoment &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedPtrList&lt; volVectorField &gt;</name>
    <filename>a01872.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; volVectorField &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, volVectorField *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, volVectorField *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; volVectorField &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; volVectorField &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mappedPtrList&lt; volVelocityMoment &gt;</name>
    <filename>a01872.html</filename>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a318129ce4d6db1faa1bfb0bc908d8b8e</anchor>
      <arglist>(const label size, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a73d9369b2c3303e7885e69b7a847b62b</anchor>
      <arglist>(const label size, const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e5a364f52b11ac5fa6d21681136d3bd</anchor>
      <arglist>(const PtrList&lt; volVelocityMoment &gt; &amp;initList, const labelListList &amp;indexes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a60d24c3afb0a1653396fa58143e9effa</anchor>
      <arglist>(Istream &amp;, const INew &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mappedPtrList</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af095770b9f2a2193713c3e7d3053197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>volVelocityMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aff4afd3a0e6c2f80e1f353896efb99ba</anchor>
      <arglist>(ArgsT ...args)</arglist>
    </member>
    <member kind="function">
      <type>const volVelocityMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab776d751ab2f7f36015afdab9d137ee9</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>const volVelocityMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef6d43dc687d5f874053673ddbaada1b</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volVelocityMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const volVelocityMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9040783223aa8b865a7733201362ff81</anchor>
      <arglist>(const Foam::labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>volVelocityMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2bc82f920a4c568f4125d9d24224b2ce</anchor>
      <arglist>(const Foam::labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2e41df69eea5ceded1c6291489870f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5e4cd6ccd28b78373e00708d88532c78</anchor>
      <arglist>(const label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a138842f9c3d67e977cc7b3ab0b3dabba</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a51479d0e2bfeed98f0ad601693a62ed3</anchor>
      <arglist>(const label i, volVelocityMoment *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa7419debfee8880e9d41251af48d6c45</anchor>
      <arglist>(const labelList &amp;l, volVelocityMoment *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed698dc3dc9459fff83987e8a6898bc1</anchor>
      <arglist>(const labelList &amp;l, autoPtr&lt; volVelocityMoment &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afd67992a8444195ace451baf0461a2ac</anchor>
      <arglist>(const labelList &amp;l, tmp&lt; volVelocityMoment &gt; entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0ec37a790b2add925a95d89bed3c56dd</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a064094407b9dbd39bb013c447c60e555</anchor>
      <arglist>(ArgsT ...args) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa441747c6a8e0512c472d0783275b37d</anchor>
      <arglist>(ArgsT...args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a10361eeb8976eb97e116919362d4de10</anchor>
      <arglist>(const Map&lt; label &gt; &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a390665a2f71c4098246cf7a0b7c9c7d4</anchor>
      <arglist>(const labelList &amp;lst, const label nDims=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::nucleationModels::Miller</name>
    <filename>a02208.html</filename>
    <base>Foam::populationBalanceSubModels::nucleationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02208.html</anchorfile>
      <anchor>a0b7ab5f6ffe81765ac026923f92189f7</anchor>
      <arglist>(&quot;Miller&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Miller</name>
      <anchorfile>a02208.html</anchorfile>
      <anchor>a297db0a313fc404c8e65799a33e7767f</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Miller</name>
      <anchorfile>a02208.html</anchorfile>
      <anchor>afbcb41cd463fa394fe864ac5179ef537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>nucleationSource</name>
      <anchorfile>a02208.html</anchorfile>
      <anchor>ab4fc87da05181164d41778f7e9a2ed21</anchor>
      <arglist>(const label &amp;momentOrder, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingDiffusionModel</name>
    <filename>a01900.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a42ce8680028220f757ff388eb0ab71e6</anchor>
      <arglist>(&quot;mixingDiffusionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a52017961f931365f91b3cfa21ab05a43</anchor>
      <arglist>(autoPtr, mixingDiffusionModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingDiffusionModel</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>ad95198f8b1de041a59c41c0b114b09ee</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingDiffusionModel</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>ad6c030c2c49b2954b116268c0de03cdf</anchor>
      <arglist>(const mixingDiffusionModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~mixingDiffusionModel</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a648707fc5d1063b24ee4ee78e49a6774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>aabae74dfa57a1da79979191d20e9dc36</anchor>
      <arglist>(const volScalarField &amp;moment) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>ad5d3737c521c6749d498db881c1210d1</anchor>
      <arglist>(const mixingDiffusionModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; mixingDiffusionModel &gt;</type>
      <name>New</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a2bd8b7ea42af7fb10f6857a0958e15f5</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernel</name>
    <filename>a01924.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a3b42ca04bac2225aebf334ca0d1930d3</anchor>
      <arglist>(&quot;mixingKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a61a09ef038171718dcc7d25214035db2</anchor>
      <arglist>(autoPtr, mixingKernel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingKernel</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>aaca5d9c330f9d405dbba4c0a005e67b2</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingKernel</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>aafefd8c86fd87e3cb497c630970536c7</anchor>
      <arglist>(const mixingKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~mixingKernel</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a8187a8529b4c0530e7d8b8e65f567ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a7f3b07d9679a831fb158fdb7556bed0f</anchor>
      <arglist>(const volScalarMoment &amp;moment, const volScalarMomentFieldSet &amp;moments) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>ae12aee6007d6294125147b7a002babf6</anchor>
      <arglist>(const mixingKernel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; mixingKernel &gt;</type>
      <name>New</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>add8b3288d1baf0dccf98ad50e9c1a689</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cphi_</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a88b4336f953c90f0d28a80db8fa28857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cmixing_</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a1807597980604a41ccdbd2b34f9f4479</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingModel</name>
    <filename>a01896.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>ada378cf08f9571013cdc7e3c5363f46f</anchor>
      <arglist>(&quot;mixingModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>acc34c0456d09490dce3a77c7610da993</anchor>
      <arglist>(autoPtr, mixingModel, dictionary,(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi),(name, dict, phi))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingModel</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a48b036b0db3b72f28d8a9ad55fccf461</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingModel</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>aad5dfad60524e7504f00242f09993bf0</anchor>
      <arglist>(const mixingModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~mixingModel</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a0a94ee20d9626b89e9b072c1a6fffd47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>acf73b8eb8622b96b9a7af30fcfe4544a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>aacd6f92a174ec1ebe14983fc21ec498c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a7fae874d309a9661a1a7de5fba089c11</anchor>
      <arglist>(const mixingModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; mixingModel &gt;</type>
      <name>New</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a5d4cbf388886a9664347242d9a72b29c</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const surfaceScalarField &amp;</type>
      <name>phi_</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a5828da03a859a3aaa358802cd2daf505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingModels</name>
    <filename>a02876.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModels::mixingPopulationBalance</name>
    <filename>a02912.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::populationBalanceModels::mixingPopulationBalance</name>
    <filename>a02068.html</filename>
    <base>Foam::populationBalanceModel</base>
    <base protection="private">realizableOdeSolver&lt; volScalarMoment, volScalarNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>ab4e0befda2a915be2306eb6379df9b27</anchor>
      <arglist>(&quot;mixingPbe&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingPopulationBalance</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>aaf537d089e04d0c5715c2740efce7643</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~mixingPopulationBalance</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>a4311e7553c72ce5f66bd94c38fdbe291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readIfModified</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>ab3005060b61f06fc4dcee23a2597d20c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingDiffusionModels::molecularDiffusion</name>
    <filename>a01904.html</filename>
    <base>Foam::mixingSubModels::mixingDiffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>acccd9d711a961de8b7ddaa1f6582763a</anchor>
      <arglist>(&quot;molecularDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>molecularDiffusion</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a41d71a49f9ceacb5bcf471d389c4a71e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~molecularDiffusion</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a092563f81ebe7ddd529901dccc7c9728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a4184526af0681ab425928e56ffb3b826</anchor>
      <arglist>(const volScalarField &amp;moment) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModels::molecularDiffusion</name>
    <filename>a02180.html</filename>
    <base>Foam::populationBalanceSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02180.html</anchorfile>
      <anchor>acccd9d711a961de8b7ddaa1f6582763a</anchor>
      <arglist>(&quot;molecularDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>molecularDiffusion</name>
      <anchorfile>a02180.html</anchorfile>
      <anchor>a41d71a49f9ceacb5bcf471d389c4a71e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~molecularDiffusion</name>
      <anchorfile>a02180.html</anchorfile>
      <anchor>a092563f81ebe7ddd529901dccc7c9728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a02180.html</anchorfile>
      <anchor>a4184526af0681ab425928e56ffb3b826</anchor>
      <arglist>(const volScalarField &amp;moment) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::moment</name>
    <filename>a02032.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Foam::moment::iNew</class>
    <member kind="function">
      <type></type>
      <name>moment</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a52df18299eaa9bcac9d158bf6ee6be90</anchor>
      <arglist>(const word &amp;distributionName, const labelList &amp;cmptOrders, const fvMesh &amp;mesh, const autoPtr&lt; mappedPtrList&lt; nodeType &gt;&gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moment</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ab5e6a8421e52c7c70eb56aac959bcce4</anchor>
      <arglist>(const word &amp;distributionName, const labelList &amp;cmptOrders, const autoPtr&lt; mappedPtrList&lt; nodeType &gt;&gt; &amp;nodes, const fieldType &amp;initMoment, const word momentSetName=word::null)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; moment &gt;</type>
      <name>clone</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ac2032c96a45443d6c120b9918b104531</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~moment</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a1ee407ef1ef100cb57e2b2308495e6d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>momentName</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a50025d9dad0e07181355e54f54b0b074</anchor>
      <arglist>(const word &amp;momentSetName, const word &amp;order, const word &amp;distributionName)</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ade4113569ef0db70665fded275a5e38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>keyword</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>aa5c32aada4e7e6307f21ac86cc5c6a1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>order</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a6c09d12f47f2431735942b205b11c040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>cmptOrders</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>adccfb15210ceb2ebf4f622138124f907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaries</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a0a18ca11eed8a0a3e628ab57e160ae4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoment</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a7490ff7789ea684543eefa5a00bcd0b3</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ac027d0efa8c54ed71e47cf31f5553ecf</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentFieldSet</name>
    <filename>a02040.html</filename>
    <templarg>momentType</templarg>
    <templarg>nodeType</templarg>
    <base>mappedPtrList&lt; momentType &gt;</base>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a41052799be411c3fcf4967d26d0c84c8</anchor>
      <arglist>(const word &amp;distributionName, const dictionary &amp;dict, const fvMesh &amp;mesh, const autoPtr&lt; mappedPtrList&lt; nodeType &gt;&gt; &amp;nodes, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4db34f5a80706422b19867a70d19989e</anchor>
      <arglist>(const word &amp;distributionName, const label nMoments, const autoPtr&lt; mappedPtrList&lt; nodeType &gt;&gt; &amp;nodes, const label nDimensions, const Map&lt; label &gt; &amp;momentMap, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7b2182f0ab6f9b7bc857a33f445e1130</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2f005e83e4a818bb3704da88fbe068b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a18fcc56bcb1d633ef85217e8ec527ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaries</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a0a18ca11eed8a0a3e628ab57e160ae4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>aca46b3594884357388d4178490fb14e9</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2219016e115d2cac9d3a891105490f62</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>momentFieldSet&lt; surfaceScalarMoment, surfaceScalarNode &gt;</name>
    <filename>a02040.html</filename>
    <base>mappedPtrList&lt; surfaceScalarMoment &gt;</base>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a41052799be411c3fcf4967d26d0c84c8</anchor>
      <arglist>(const word &amp;distributionName, const dictionary &amp;dict, const fvMesh &amp;mesh, const autoPtr&lt; mappedPtrList&lt; surfaceScalarNode &gt;&gt; &amp;nodes, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4db34f5a80706422b19867a70d19989e</anchor>
      <arglist>(const word &amp;distributionName, const label nMoments, const autoPtr&lt; mappedPtrList&lt; surfaceScalarNode &gt;&gt; &amp;nodes, const label nDimensions, const Map&lt; label &gt; &amp;momentMap, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7b2182f0ab6f9b7bc857a33f445e1130</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2f005e83e4a818bb3704da88fbe068b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a18fcc56bcb1d633ef85217e8ec527ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaries</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a0a18ca11eed8a0a3e628ab57e160ae4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>aca46b3594884357388d4178490fb14e9</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2219016e115d2cac9d3a891105490f62</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>momentFieldSet&lt; volScalarMoment, volScalarNode &gt;</name>
    <filename>a02040.html</filename>
    <base>mappedPtrList&lt; volScalarMoment &gt;</base>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a41052799be411c3fcf4967d26d0c84c8</anchor>
      <arglist>(const word &amp;distributionName, const dictionary &amp;dict, const fvMesh &amp;mesh, const autoPtr&lt; mappedPtrList&lt; volScalarNode &gt;&gt; &amp;nodes, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4db34f5a80706422b19867a70d19989e</anchor>
      <arglist>(const word &amp;distributionName, const label nMoments, const autoPtr&lt; mappedPtrList&lt; volScalarNode &gt;&gt; &amp;nodes, const label nDimensions, const Map&lt; label &gt; &amp;momentMap, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7b2182f0ab6f9b7bc857a33f445e1130</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2f005e83e4a818bb3704da88fbe068b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a18fcc56bcb1d633ef85217e8ec527ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaries</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a0a18ca11eed8a0a3e628ab57e160ae4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>aca46b3594884357388d4178490fb14e9</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2219016e115d2cac9d3a891105490f62</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>momentFieldSet&lt; volVelocityMoment, volVelocityNode &gt;</name>
    <filename>a02040.html</filename>
    <base>mappedPtrList&lt; volVelocityMoment &gt;</base>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a41052799be411c3fcf4967d26d0c84c8</anchor>
      <arglist>(const word &amp;distributionName, const dictionary &amp;dict, const fvMesh &amp;mesh, const autoPtr&lt; mappedPtrList&lt; volVelocityNode &gt;&gt; &amp;nodes, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4db34f5a80706422b19867a70d19989e</anchor>
      <arglist>(const word &amp;distributionName, const label nMoments, const autoPtr&lt; mappedPtrList&lt; volVelocityNode &gt;&gt; &amp;nodes, const label nDimensions, const Map&lt; label &gt; &amp;momentMap, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7b2182f0ab6f9b7bc857a33f445e1130</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~momentFieldSet</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2f005e83e4a818bb3704da88fbe068b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a18fcc56bcb1d633ef85217e8ec527ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaries</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a0a18ca11eed8a0a3e628ab57e160ae4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>aca46b3594884357388d4178490fb14e9</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a2219016e115d2cac9d3a891105490f62</anchor>
      <arglist>(const momentFieldSet &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentFieldSets</name>
    <filename>a02896.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationModel</name>
    <filename>a02848.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a224beab0055b0782bb91e469d8041e05</anchor>
      <arglist>(&quot;momentGenerationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a47e7ff732c220ac154777f2a0901290e</anchor>
      <arglist>(autoPtr, momentGenerationModel, dictionary,(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentOrders, const label nNodes),(mesh, dict, momentOrders, nNodes))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentGenerationModel</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>ae36731bc33bc7bd200b346acb846e64b</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentsOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~momentGenerationModel</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a350da45c7a0a2dfc9022a4874e9db15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a9f723b264bd9ebf7da16903f6e7e2c0b</anchor>
      <arglist>(const dictionary &amp;dict)=0</arglist>
    </member>
    <member kind="function">
      <type>const mappedList&lt; dimensionedScalar &gt; &amp;</type>
      <name>moments</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a085fca7b18ad5843f730b090f957d8bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a59f333a4de9a1ab70e4f8c5fe6f1ce19</anchor>
      <arglist>(const label celli)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a90284884d7ebe3c3ff6e68ef69371bc3</anchor>
      <arglist>(const label patchi, const label facei)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; momentGenerationModel &gt;</type>
      <name>New</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>aa1ad386c5691dfb1b2252e01d7df2477</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentsOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDims_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a8bdc2be9c048ef156cf4571490f3c441</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nNodes_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>aab135301eefe7e9f9123fed12009ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>nodeIndexes_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>aec0f577b156be3134122bb2d727cf45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>ab0e2d1fe30234c743b258634abc400a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; scalar &gt;</type>
      <name>weights_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>ac674728b05b460e2deae14b122d5b309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; scalarList &gt;</type>
      <name>abscissae_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>abdb273a0552817ec2af3f43210534917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mappedList&lt; dimensionedScalar &gt;</type>
      <name>moments_</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a791207c8c9cb7b75727306961deb1264</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::moments</name>
    <filename>a02900.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::momentSet</name>
    <filename>a02044.html</filename>
    <base>mappedList&lt; scalar &gt;</base>
    <member kind="function">
      <type></type>
      <name>momentSet</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>af9be89d12318afde5f5379b2cfca61e3</anchor>
      <arglist>(const label nMoments, const label nDimensions, const labelListList &amp;momentOrders, const word &amp;support, const scalar initValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentSet</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a74355874c92bbf204ccccfc861548376</anchor>
      <arglist>(const scalarList &amp;m, const label nDimensions, const labelListList &amp;momentOrders, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~momentSet</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a2d461e8178aaecce7fc02ab43bee1230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>momentOrders</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a960466752388287e745144fb5bf03d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a9f1df760340bbe0bef437f40500d8e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a18fcc56bcb1d633ef85217e8ec527ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nMoments_</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a2241219aa524be91ffd4ded3f42f582a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nDimensions_</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a63b7139626299621e608e4a07a0def92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>ab0e2d1fe30234c743b258634abc400a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentInversions::monoKinetic</name>
    <filename>a01980.html</filename>
    <base>Foam::multivariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a7270fb8f27a3a441d9484c12f13c8406</anchor>
      <arglist>(&quot;monoKinetic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>monoKinetic</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a18a3107a2961ac6b545dd3a34c578bd8</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~monoKinetic</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>afa9e7f1fd6eba389913340fe3a0626f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ae6813b534d14729b1f14771df0910a87</anchor>
      <arglist>(const multivariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::monoKineticQuadratureApproximation</name>
    <filename>a02232.html</filename>
    <base>quadratureApproximation&lt; volScalarMoment, volScalarNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>monoKineticQuadratureApproximation</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>adaec91d5eba8cbd1753c60ccdfd995bf</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~monoKineticQuadratureApproximation</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a96a9798a7bc99c1c09c291c8c0ada9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocities</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a82fc0d54d2dba1302fd40b464d667776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocities</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a4f0ea905128215dbf8e3e89a2c1a1921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocityMoments</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a424eff58668fa355bdaf6dcd7338aaed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocityMoments</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a378f092fd2b31a01fa44c19e211ca883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceScalarNode &gt; &amp;</type>
      <name>nodesOwn</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a3dff48f77160acdd8cb1e4ba5bdd9188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceVectorField &gt; &amp;</type>
      <name>velocitiesOwn</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a80d758e781f4f160e3b6cfb66eed9298</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceScalarNode &gt; &amp;</type>
      <name>nodesNei</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a6bf620ef9d556ad74f420a5241c834ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceVectorField &gt; &amp;</type>
      <name>velocitiesNei</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a9801191e9386030abe8373e0278d2453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolateNodes</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>aee1fc78125838d352f1209c771319fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaryVelocities</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>aa539aa2c2d5c6521a45ef8a8c7aff7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateVelocities</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>ae605ec130ded2b61f6b78d19af264a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalVelocities</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a1fcf449c047afc1c23441af7f0d10328</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllQuadrature</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a3cf9b5640abcb3467999886d9cdb0633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateAllLocalQuadrature</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>af037223c93f98f3a9ad00bdc8e30dba2</anchor>
      <arglist>(const label celli, const bool failOnRealizability=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateVelocityMoments</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>af5f991b846c141a8219a9d55f53e27bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalVelocityMoments</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a46d7f44c5cdafd648b6671e3786c9718</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllMoments</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>abdcac0b11d8065805cb7abfc5dee64d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllLocalMoments</name>
      <anchorfile>a02232.html</anchorfile>
      <anchor>a7e5cdf20a9e7ca229b9dff6d0b28ec5e</anchor>
      <arglist>(const label celli)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::Moraga</name>
    <filename>a02488.html</filename>
    <base>Foam::liftModel</base>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a1ac95a1f554c83fd0790e927c225ab71</anchor>
      <arglist>(&quot;Moraga&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Moraga</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a2d4a2239141964d0bcffe226c7f6f70e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Moraga</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a5a9ba12b8cd36d1cca9fbcba962d9391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a1ac95a1f554c83fd0790e927c225ab71</anchor>
      <arglist>(&quot;Moraga&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Moraga</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a2d4a2239141964d0bcffe226c7f6f70e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Moraga</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a5a9ba12b8cd36d1cca9fbcba962d9391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentInversion</name>
    <filename>a01984.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a9f834555b20631262a6ca979749275c7</anchor>
      <arglist>(&quot;multivariateMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a42e66b59bd5fd1265d3eee9e2773823e</anchor>
      <arglist>(autoPtr, multivariateMomentInversion, dictionary,(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes),(dict, momentOrders, nodeIndexes, velocityIndexes))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multivariateMomentInversion</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a29806fac31773d6f708b4cd22920cffe</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~multivariateMomentInversion</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a2dde76b16d774ec6a6208357f4411af6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a4068aded9f610af636981650a0d7818f</anchor>
      <arglist>(const multivariateMomentSet &amp;moments)=0</arglist>
    </member>
    <member kind="function">
      <type>const mappedScalarList &amp;</type>
      <name>weights</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a7d45280e0a7dd89a48feb89f5ceaf6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const mappedList&lt; scalarList &gt; &amp;</type>
      <name>abscissae</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a2c769d26285748046ff402ca8fd5870c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const mappedVectorList &amp;</type>
      <name>velocityAbscissae</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a3239b4d0408b30dd47301fe9e54dabbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; multivariateMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a89945636342fc2b5668fa20bf8385d33</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>compare</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a59d50bdb5ac41b4d3d9b2b198d483202</anchor>
      <arglist>(const labelList &amp;index1, const labelList &amp;index2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>compare</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a77500cd190aac874eb03302454e045f5</anchor>
      <arglist>(const labelList &amp;index1, const labelList &amp;index2, const label size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDistributionDims_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>ab30096b52485c510d5a7dcc4da7fb64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nvelocityDimensions_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a3797c93e44c97f8947c704232d234edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList &amp;</type>
      <name>momentOrders_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a10e2d510d6c05b79ac2073876ffa6f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList &amp;</type>
      <name>nodeIndexes_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>aacc38e739c6e636e6cba5799a6742c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>velocityIndexes_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a1aac0aec9e5f889d2740b006b034139a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>nNodes_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a1647e11ae64ffecdd792bf62df4029bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mappedScalarList</type>
      <name>weights_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>afb354f9afe492c99eae8c461b987bf0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mappedList&lt; scalarList &gt;</type>
      <name>abscissae_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>ac100ac9d28f2ff426e7294fa6ad610a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mappedVectorList</type>
      <name>velocityAbscissae_</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>abf1f1f289e66dc0ef98e306a1692fde0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentSet</name>
    <filename>a02048.html</filename>
    <base>Foam::momentSet</base>
    <member kind="function">
      <type></type>
      <name>multivariateMomentSet</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ae8d381c67b4aa7428491ac0f36ceea02</anchor>
      <arglist>(const label nMoments, const labelListList &amp;momentOrders, const word &amp;support, const scalar initValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multivariateMomentSet</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a797e8246a2ca551c01e047150eb74759</anchor>
      <arglist>(const scalarList &amp;m, const labelListList &amp;momentOrders, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~multivariateMomentSet</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>adbb11b0f88e869140e92a5b03b52ccdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>momentMap</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ae7d47710ecafeced8843c63c5ef838fb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::noAdvection</name>
    <filename>a02884.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::univariateAdvection::noAdvection</name>
    <filename>a01944.html</filename>
    <base>Foam::univariateMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>ac9fd621576d492167ac6ee89eefe2dee</anchor>
      <arglist>(&quot;noAdvection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noAdvection</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a28974535fd6ff2ac4125498b660898d0</anchor>
      <arglist>(const dictionary &amp;dict, const scalarQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noAdvection</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>ab4e817c65492066d7b45f19fdfb5bad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::velocityAdvection::noAdvection</name>
    <filename>a01960.html</filename>
    <base>Foam::velocityMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>ac9fd621576d492167ac6ee89eefe2dee</anchor>
      <arglist>(&quot;noAdvection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noAdvection</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>a73ca9c8f6a423ad124809b8b1d6b9ede</anchor>
      <arglist>(const dictionary &amp;dict, const velocityQuadratureApproximation &amp;quadrature, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noAdvection</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>ab4e817c65492066d7b45f19fdfb5bad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>a0dd74781fa35a806ee471cfbeb635a0a</anchor>
      <arglist>(const surfaceScalarField &amp;U, const bool wallCollisions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01960.html</anchorfile>
      <anchor>a221f6b6c6ff0c95548087b6ab793eac2</anchor>
      <arglist>(const mappedPtrList&lt; volVectorField &gt; &amp;Us, const bool wallCollisions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::noBlending</name>
    <filename>a03076.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethods::noBlending</name>
    <filename>a02780.html</filename>
    <base>Foam::blendingMethod</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02780.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noBlending</name>
      <anchorfile>a02780.html</anchorfile>
      <anchor>ad2cebb26c76a9e0f0cb30934734c74fe</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~noBlending</name>
      <anchorfile>a02780.html</anchorfile>
      <anchor>a421f1757eb015d5f05913a0bca43c12c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a02780.html</anchorfile>
      <anchor>ad97d6fe7262a5f6e448d7595475e5f07</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a02780.html</anchorfile>
      <anchor>a97b3b68a68068eaae01e522bc01f8766</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModels::noBubblePressure</name>
    <filename>a02368.html</filename>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02368.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noBubblePressure</name>
      <anchorfile>a02368.html</anchorfile>
      <anchor>ac89d439c18aab1e2abcb79a88ba16081</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noBubblePressure</name>
      <anchorfile>a02368.html</anchorfile>
      <anchor>a640a29db0c39a64a92ad14f3af628785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02368.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02368.html</anchorfile>
      <anchor>a010ecad1729c3777e1a1dc9561182d6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::collisionKernels::noCollision</name>
    <filename>a02148.html</filename>
    <base>Foam::populationBalanceSubModels::collisionKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02148.html</anchorfile>
      <anchor>acafa6049d74cd88f01de541ad7df89fc</anchor>
      <arglist>(&quot;noCollision&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noCollision</name>
      <anchorfile>a02148.html</anchorfile>
      <anchor>ab4e31db3941a1eb5da9101919d268ac4</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh, const velocityQuadratureApproximation &amp;quadrature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noCollision</name>
      <anchorfile>a02148.html</anchorfile>
      <anchor>ae436f8928265e0fc29f7845381cc91bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCells</name>
      <anchorfile>a02148.html</anchorfile>
      <anchor>af9ee43eb1d9fead9bb95db6574ff3394</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>explicitCollisionSource</name>
      <anchorfile>a02148.html</anchorfile>
      <anchor>af171162507e90e184cc717f790994747</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitCollisionSource</name>
      <anchorfile>a02148.html</anchorfile>
      <anchor>a4b834804326a1b050c84469c05c232fc</anchor>
      <arglist>(const volVelocityMoment &amp;m) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingDiffusionModels::noDiffusion</name>
    <filename>a01908.html</filename>
    <base>Foam::mixingSubModels::mixingDiffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noDiffusion</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a790c8815b53962b66948569e5a37601e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noDiffusion</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>ab00319b0bec238d68ee3f4ae6b34b7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a4184526af0681ab425928e56ffb3b826</anchor>
      <arglist>(const volScalarField &amp;moment) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModels::noDiffusion</name>
    <filename>a02184.html</filename>
    <base>Foam::populationBalanceSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02184.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noDiffusion</name>
      <anchorfile>a02184.html</anchorfile>
      <anchor>a790c8815b53962b66948569e5a37601e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noDiffusion</name>
      <anchorfile>a02184.html</anchorfile>
      <anchor>ab00319b0bec238d68ee3f4ae6b34b7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a02184.html</anchorfile>
      <anchor>a4184526af0681ab425928e56ffb3b826</anchor>
      <arglist>(const volScalarField &amp;moment) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::noLift</name>
    <filename>a02492.html</filename>
    <base>Foam::liftModel</base>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noLift</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a884fb76efb1b19756cbccc90a6293b83</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noLift</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a9e1a2fad8ee34b13fa91bedd48ced9f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noLift</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a884fb76efb1b19756cbccc90a6293b83</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noLift</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a9e1a2fad8ee34b13fa91bedd48ced9f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingModels::noMixing</name>
    <filename>a01932.html</filename>
    <base>Foam::mixingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noMixing</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a6ecff56a57443f498ad578b8ed7b744d</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noMixing</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>af18366fcca2541617323cb6d4d640047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernels::noMixingKernel</name>
    <filename>a01928.html</filename>
    <base>Foam::mixingSubModels::mixingKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noMixingKernel</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>aed3f08f00713fdbb8d9671fbf575715f</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noMixingKernel</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>a4e88f03cd6256aa0ac06ec7251e71456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>aafaf4e06b7fe6f00e8e7f514ff539506</anchor>
      <arglist>(const volScalarMoment &amp;moment, const volScalarMomentFieldSet &amp;moments) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::noMomentGeneration</name>
    <filename>a02852.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>aca828a7b9dc2b90defafac2684177cc5</anchor>
      <arglist>(&quot;moments&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noMomentGeneration</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>ae0bc7a31a297c3e7e9748f49f6dd69df</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noMomentGeneration</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>aa4326a9e764ea0412511d68ecf67046b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>a37dae16347e7b02df93a34b5d02466f1</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>a135ad6906ed8cd07385bd3578c5026cb</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>a5708950b309ed94dc9f0bf223cb46533</anchor>
      <arglist>(const label patchi, const label facei)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::nonEquilibrium</name>
    <filename>a02656.html</filename>
    <base>Foam::kineticTheoryModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02656.html</anchorfile>
      <anchor>a638bb18342580893e5f7da97e71c9d42</anchor>
      <arglist>(&quot;nonEquilibrium&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonEquilibrium</name>
      <anchorfile>a02656.html</anchorfile>
      <anchor>a5878cc59c76ac7c410e3680174aa8416</anchor>
      <arglist>(const dictionary &amp;dict, const phaseModel &amp;phase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~nonEquilibrium</name>
      <anchorfile>a02656.html</anchorfile>
      <anchor>a6469ba309e6610d7a2e1f258cedfaa8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02656.html</anchorfile>
      <anchor>a292a3944ebf0a4acba8c14844ddfe780</anchor>
      <arglist>(const volScalarField &amp;beta, const volScalarField &amp;alpha, const volTensorField &amp;gradU, const volSymmTensorField D)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::nonEquilibrium</name>
    <filename>a03036.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::noneViscosity</name>
    <filename>a03056.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::noneViscosity</name>
    <filename>a02740.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noneViscosity</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a3f5bb1602107fc75155a91e639a2e944</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noneViscosity</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a2e3b3538f36529016e3a9f4d7917a8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>ad7c5e15115875f60182d449907ad0ddc</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::nucleationModels::noNucleation</name>
    <filename>a02212.html</filename>
    <base>Foam::populationBalanceSubModels::nucleationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02212.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noNucleation</name>
      <anchorfile>a02212.html</anchorfile>
      <anchor>ab3dbbe55baf67b8ce526009289270fc8</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noNucleation</name>
      <anchorfile>a02212.html</anchorfile>
      <anchor>a0590b871d4b962ed8418e27e9f3357ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>nucleationSource</name>
      <anchorfile>a02212.html</anchorfile>
      <anchor>ab4fc87da05181164d41778f7e9a2ed21</anchor>
      <arglist>(const label &amp;momentOrder, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModels::noPopulationBalance</name>
    <filename>a02072.html</filename>
    <base>Foam::populationBalanceModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noPopulationBalance</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>a81cc7bb7784505d09ef2dbf07b9d2a94</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noPopulationBalance</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>a879eaa74c53e210bfb1a1356cb30e06a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::swarmCorrections::noSwarm</name>
    <filename>a02504.html</filename>
    <base>Foam::swarmCorrection</base>
    <base>Foam::swarmCorrection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noSwarm</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a54d9670b423f7c20f5424b18009e8395</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noSwarm</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a0396b4cf8e52cbac1fb1d0d1ca28719e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a6735f61f60c28fe64d7cde98bd70ac47</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a288f1b891823865b6609a88616d750e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noSwarm</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a54d9670b423f7c20f5424b18009e8395</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noSwarm</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a0396b4cf8e52cbac1fb1d0d1ca28719e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02504.html</anchorfile>
      <anchor>a6735f61f60c28fe64d7cde98bd70ac47</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::noTurbulentDispersion</name>
    <filename>a02536.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noTurbulentDispersion</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a9e0659020eec31bcac868d0916dbb91d</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noTurbulentDispersion</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a67740d98103cac75776d20ea5c8a3203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>adbaedda8bb873d6368ebd9c877c4c60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noTurbulentDispersion</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a9e0659020eec31bcac868d0916dbb91d</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noTurbulentDispersion</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a67740d98103cac75776d20ea5c8a3203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02536.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::noVirtualMass</name>
    <filename>a02556.html</filename>
    <base>Foam::virtualMassModel</base>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noVirtualMass</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>aa743ff7b4e12c585c7854021dae7891a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noVirtualMass</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a5adce566f79f4cd0ce0aa266a476a253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a44448421a9a019b82ba27811e9c5f40c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a123a2f0759e7cd4e8d0092806b4b71b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noVirtualMass</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>aa743ff7b4e12c585c7854021dae7891a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noVirtualMass</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a5adce566f79f4cd0ce0aa266a476a253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02556.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::noWallDamping</name>
    <filename>a02580.html</filename>
    <base>Foam::wallDampingModel</base>
    <base>Foam::wallDampingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noWallDamping</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>a3d6f4dbadba1a1ecaeb9e9fa186dc446</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noWallDamping</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>a62d44b140fc3c6f4e572bd299325cd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>ab1029dcf1440253a59875b2c2b48ad8e</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>af4063aeeba0f32227bdab5f00ad6fe16</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>ac1e22254a87d41c984ca0c263f606602</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noWallDamping</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>a3d6f4dbadba1a1ecaeb9e9fa186dc446</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noWallDamping</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>a62d44b140fc3c6f4e572bd299325cd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>ab1029dcf1440253a59875b2c2b48ad8e</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>af4063aeeba0f32227bdab5f00ad6fe16</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02580.html</anchorfile>
      <anchor>ac1e22254a87d41c984ca0c263f606602</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::noWallLubrication</name>
    <filename>a02604.html</filename>
    <base>Foam::wallLubricationModel</base>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noWallLubrication</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a6ee2c6ae19e1bbbc2fef77312f110141</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noWallLubrication</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a6ba0829ceec7f226ad28fc4227a7c2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a010ecad1729c3777e1a1dc9561182d6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noWallLubrication</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a6ee2c6ae19e1bbbc2fef77312f110141</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noWallLubrication</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a6ba0829ceec7f226ad28fc4227a7c2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a010ecad1729c3777e1a1dc9561182d6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::nucleationModel</name>
    <filename>a02216.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a90992f6d2fd6ea0a8188a87b2e019ad7</anchor>
      <arglist>(&quot;nucleationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a48b60cbf2f56d97f537c5f687f705478</anchor>
      <arglist>(autoPtr, nucleationModel, dictionary,(const dictionary &amp;dict, const fvMesh &amp;mesh),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nucleationModel</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a0ac17d12d16b428f700ae92fe9416109</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nucleationModel</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a59bb503aed5f7af1a3ef68bd59955496</anchor>
      <arglist>(const nucleationModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~nucleationModel</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a5d14062dfa0b363acfe6bdefafd6c418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>nucleationSource</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a006b0d20d29caa08fed4354e4d343c78</anchor>
      <arglist>(const label &amp;momentOrder, const label celli, const label environment=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a40027b3d0fe0c0ecd26260ed4b2c0edf</anchor>
      <arglist>(const nucleationModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; nucleationModel &gt;</type>
      <name>New</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>ac2e910cf2638a653967c10d92c364d2a</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02216.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::oneQuarterMassRatio</name>
    <filename>a02164.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02164.html</anchorfile>
      <anchor>a7fb47156df4cac064c2b90cb0fc81675</anchor>
      <arglist>(&quot;oneQuarterMassRatio&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>oneQuarterMassRatio</name>
      <anchorfile>a02164.html</anchorfile>
      <anchor>a962d460d76cd33e02cf608ca4beacb77</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~oneQuarterMassRatio</name>
      <anchorfile>a02164.html</anchorfile>
      <anchor>a147fb07ac3fc0d40d665bba9391ef32d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a02164.html</anchorfile>
      <anchor>aa699955fa82d81b8bae2a63e1e80ee75</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mDMass</name>
      <anchorfile>a02164.html</anchorfile>
      <anchor>a1e2673712babed9c93a6d6a1b9a23979</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::orderedPhasePair</name>
    <filename>a02792.html</filename>
    <base>Foam::phasePair</base>
    <base>Foam::phasePair</base>
    <member kind="function">
      <type></type>
      <name>orderedPhasePair</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>a8b48710d2f1f7535a6039daeee2a33b2</anchor>
      <arglist>(const phaseModel &amp;dispersed, const phaseModel &amp;continuous, const dimensionedVector &amp;g, const scalarTable &amp;sigmaTable, const dictTable &amp;aspectRatioTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~orderedPhasePair</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>ae734d7f4a80a0fa4d468cbcc7ecca8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>dispersed</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>a3a4716fe4e876afe9e19df28d744a4c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>continuous</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>aa63c40e4c3da92e513e9d6fdbd59aac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>a73572f70de721e7793f801ae26c5a6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>adc8afac52d7bce115ac6d071af1d20a5</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>a7adbc789902978053017ef7a87189551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>orderedPhasePair</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>ac503cb9d5d008738757270f43f31f8ab</anchor>
      <arglist>(const phaseModel &amp;dispersed, const phaseModel &amp;continuous, const dimensionedVector &amp;g, const dimensionedScalar &amp;sigma, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~orderedPhasePair</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>ae734d7f4a80a0fa4d468cbcc7ecca8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>dispersed</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>a3a4716fe4e876afe9e19df28d744a4c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>continuous</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>aa63c40e4c3da92e513e9d6fdbd59aac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>a73572f70de721e7793f801ae26c5a6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02792.html</anchorfile>
      <anchor>adc8afac52d7bce115ac6d071af1d20a5</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Panicker</name>
    <filename>a02540.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a3f09dca04e698ee9c83b41f1373ab4dd</anchor>
      <arglist>(&quot;Panicker&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Panicker</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>aeed4d4e19757ba6ecce8aa0dbb1095ad</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Panicker</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a7aca6f83baccaac25201bfdc4e1b8bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a345b751e93da943723a80d301cc3c387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a3f09dca04e698ee9c83b41f1373ab4dd</anchor>
      <arglist>(&quot;Panicker&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Panicker</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>aeed4d4e19757ba6ecce8aa0dbb1095ad</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Panicker</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a7aca6f83baccaac25201bfdc4e1b8bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02540.html</anchorfile>
      <anchor>a1b53d39b5439325ac1118512a128486b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::fluxSplittingFunctions::particlePressure</name>
    <filename>a02644.html</filename>
    <base>Foam::kineticTheoryModels::fluxSplittingFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02644.html</anchorfile>
      <anchor>a2c91a0af4430d7151503edb1e77613af</anchor>
      <arglist>(&quot;particlePressure&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>particlePressure</name>
      <anchorfile>a02644.html</anchorfile>
      <anchor>af64b8f158fee1b6eb0f8d14ea9ea0cdc</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~particlePressure</name>
      <anchorfile>a02644.html</anchorfile>
      <anchor>ad9956e667316189901cbd6c35484f520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>h2</name>
      <anchorfile>a02644.html</anchorfile>
      <anchor>af71abecd883f59d2e3a599fe5d8677d2</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const volScalarField &amp;ppfr, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModel</name>
    <filename>a02056.html</filename>
    <member kind="function">
      <type></type>
      <name>PDFTransportModel</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a7a484ccf0035787e3f0694401128817a</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDFTransportModel</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a0ecec15800af8fada5ea76c8bd762cb0</anchor>
      <arglist>(const PDFTransportModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PDFTransportModel</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aa73779ffb5b8359a6463d7c93864fee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aacd6f92a174ec1ebe14983fc21ec498c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aae34f75b538808951a148933d7237016</anchor>
      <arglist>(const PDFTransportModel &amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fv::phaseCompressibleMeanVelocityForce</name>
    <filename>a02864.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>aaa7987d5d5767e722405ded6f4b79bab</anchor>
      <arglist>(&quot;phaseCompressibleMeanVelocityForce&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseCompressibleMeanVelocityForce</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a35645006308a56d604d2b05810e6e908</anchor>
      <arglist>(const word &amp;sourceName, const word &amp;modelType, const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseCompressibleMeanVelocityForce</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a84580e8f54a85dc240d9d97dafb21961</anchor>
      <arglist>(const phaseCompressibleMeanVelocityForce &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>aac9d933fa717e90f89ec56d68f9c7e16</anchor>
      <arglist>(volVectorField &amp;U)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSup</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a5650c4d5e892b4f74a6633f3459cd025</anchor>
      <arglist>(const volScalarField &amp;alpha, const volScalarField &amp;rho, fvMatrix&lt; vector &gt; &amp;eqn, const label fieldI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>constrain</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a8ab884c207f0e3a8535834a3d291365c</anchor>
      <arglist>(fvMatrix&lt; vector &gt; &amp;eqn, const label fieldI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a09b3358392d945ea73efb9634c7427b9</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a4f2c8a95e4ecf469c1fb6c669aa23e8a</anchor>
      <arglist>(const phaseCompressibleMeanVelocityForce &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PhaseCompressibleTurbulenceModel</name>
    <filename>a02752.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Foam::fv::phaseIncompressibleMeanVelocityForce</name>
    <filename>a02868.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a5cdfde9b87de6af485770a96ad052d78</anchor>
      <arglist>(&quot;phaseIncompressibleMeanVelocityForce&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseIncompressibleMeanVelocityForce</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a2e543a5fafea75fca43a8c59b6f0a521</anchor>
      <arglist>(const word &amp;sourceName, const word &amp;modelType, const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseIncompressibleMeanVelocityForce</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a712f97c6308f0184f7f54bcaddbdc77d</anchor>
      <arglist>(const phaseIncompressibleMeanVelocityForce &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>aac9d933fa717e90f89ec56d68f9c7e16</anchor>
      <arglist>(volVectorField &amp;U)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSup</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>ac6f2ef23bc9968797f735eaeabfb1c35</anchor>
      <arglist>(const volScalarField &amp;alpha, fvMatrix&lt; vector &gt; &amp;eqn, const label fieldI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>constrain</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a8ab884c207f0e3a8535834a3d291365c</anchor>
      <arglist>(fvMatrix&lt; vector &gt; &amp;eqn, const label fieldI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a09b3358392d945ea73efb9634c7427b9</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>ab396826dd8d3f94787be6aaaf8ccc545</anchor>
      <arglist>(const phaseIncompressibleMeanVelocityForce &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phaseModel</name>
    <filename>a02784.html</filename>
    <member kind="function">
      <type></type>
      <name>ClassName</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a17b426901c5e18365faeb5e668bbe75f</anchor>
      <arglist>(&quot;phaseModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a866b2ecadf1fd4900a4e0ea26dab7e54</anchor>
      <arglist>(autoPtr, phaseModel, dictionary,(const twoPhaseSystem &amp;fluid, const dictionary &amp;dict, const word &amp;phaseName),(fluid, dict, phaseName))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseModel</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ab251d077781c02756c40997105ae6ec5</anchor>
      <arglist>(const twoPhaseSystem &amp;fluid, const dictionary &amp;dict, const word &amp;phaseName)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; phaseModel &gt;</type>
      <name>clone</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ad611062017e9709fcb99c9d1c689cee6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phaseModel</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>add1670642cf0f4f12bbe2ed571ed6926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>acc80e00a8ac919288fb55bd14cc88bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BGviscosity</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a4a397e0feec239be3ca2505df0307ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const twoPhaseSystem &amp;</type>
      <name>fluid</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aeb0eb2643aabbc04d5d57d79371f62f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>otherPhase</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a71db3c445b7e9ba369fa6f2881c32c24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nNodes</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5fe0d579a26ebb7a0f23dc35b045239d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>residualAlpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ab5d03f3b6252094a1ebbbfc075520618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a71dbd372a922f087e4f0e9802468d22a</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ab4263b72d31ab6b16f672ebdac11d34e</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>d</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ac26191fc6b7e892358508d1b1d4d9180</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>ds</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ac30d47779092a2a50c4c2a4615d90111</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>alphaMax</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5168f07bc44a5b1290dd6a8e3b0e2309</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &amp;</type>
      <name>turbulence</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a46b3209e5acc63802072a89d0aff193e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &amp;</type>
      <name>turbulence</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a77ee4b87429ae81027f55c0dd846e853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a277e4a3765f9d795576a1ca213026477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a86ee829ee4c3ae48c2641b8938dabd4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa739f3daeda1884fecc84f2b36a24021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a6550d60214645412e7c3d6348d9389e5</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>mu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a0c617fab148934d2515792820fc80e12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>mu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a99c020b284bffb1468716a496a392d07</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5b55c7d42fa4d127fa1fc24feac6ce60</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a944106b98bf8fda2ae2b2fc3423f5095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a31db8b37dcd6ab6e307041e3c75c9978</anchor>
      <arglist>(const volScalarField &amp;alphat) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>kappaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a3fe3c98fe778533bdc0a9abba9a471ff</anchor>
      <arglist>(const scalarField &amp;alphat, const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae152223cca723abb64b0fb44574966cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>abdde3f51986e8a42b760069695dd9ebd</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alphaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a3e9e3e10308a2c1410badaf5d64748e7</anchor>
      <arglist>(const volScalarField &amp;alphat) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alphaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5efe625e5780fd9698702d5894a164d1</anchor>
      <arglist>(const scalarField &amp;alphat, const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alphahe</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae5d9fafcfb38b4a140238086c1680e41</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alphahe</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5092d8b79473e6829f1c865e94170574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cp</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aaeda1348bb50416b876bdb125014cf9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>rho</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a85451bc9acf825ab1d3c3c143714bc38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a536d168d7b335fe81f506f232b5b4872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a9152a436c08509f3f18e0298a7239d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a11d6e4eda74ba3b7314a231c46411e70</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a84e13a2ef3cff4ca530bc85559d4e1ef</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Vs</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>abe6e051a6335f5146245405d05facc55</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>afa376adc6cc59952d2f6f2ad38bba068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a66289cf9ede32ce672bb3c21f02ded40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>alphaPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae6984849624951f976129ba760f2cb3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ad4fa7eb1a78a64edddbfdefe090ffac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>alphaRhoPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aed70c38fb7edef9dea0159ce01de86f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ac84568157c5a273492634b3211bf990d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correctInflowOutflow</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ad188aee573f1aaa0ff6da346001d7f42</anchor>
      <arglist>(surfaceScalarField &amp;alphaPhi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>relativeTransport</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a98b8459f24c250f47616cdc5ce2f708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportAlpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>afdfe3d449f8ed343ff890abde7af140e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>averageTransport</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a05a00dd35d1744a056754b601c117136</anchor>
      <arglist>(const PtrList&lt; fvVectorMatrix &gt; &amp;AEqns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solveBreakupCoalesence</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5cb018ffd99f8b65963abd5eddd8c824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a685ecdb3d2dea6bff122925304fd6652</anchor>
      <arglist>(const bool readOK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassName</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a17b426901c5e18365faeb5e668bbe75f</anchor>
      <arglist>(&quot;phaseModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>adbf33ae2cc0ab0b5504c1cae8fee427d</anchor>
      <arglist>(autoPtr, phaseModel, dictionary,(const fvMesh &amp;mesh, const dictionary &amp;dict, const word &amp;phaseName),(mesh, dict, phaseName))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseModel</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a9ade55e0826fbbe2966d07c3e019b5c3</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const word &amp;phaseName=word::null)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; phaseModel &gt;</type>
      <name>clone</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ad611062017e9709fcb99c9d1c689cee6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phaseModel</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>add1670642cf0f4f12bbe2ed571ed6926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>acc80e00a8ac919288fb55bd14cc88bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nNodes</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5fe0d579a26ebb7a0f23dc35b045239d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &amp;</type>
      <name>turbulence</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a46b3209e5acc63802072a89d0aff193e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &amp;</type>
      <name>turbulence</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a77ee4b87429ae81027f55c0dd846e853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>residualAlpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ab5d03f3b6252094a1ebbbfc075520618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>volumeFraction</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5ca57ae67d43e34f8f3472785f1f8719</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>d</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa584bcce4a5f905f36cef1ff16995f14</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>alphaMax</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5168f07bc44a5b1290dd6a8e3b0e2309</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a277e4a3765f9d795576a1ca213026477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a86ee829ee4c3ae48c2641b8938dabd4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa739f3daeda1884fecc84f2b36a24021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a6550d60214645412e7c3d6348d9389e5</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>mu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a0c617fab148934d2515792820fc80e12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>mu</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a99c020b284bffb1468716a496a392d07</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae152223cca723abb64b0fb44574966cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alpha</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>abdde3f51986e8a42b760069695dd9ebd</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5b55c7d42fa4d127fa1fc24feac6ce60</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a944106b98bf8fda2ae2b2fc3423f5095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alphahe</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5092d8b79473e6829f1c865e94170574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alphahe</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae5d9fafcfb38b4a140238086c1680e41</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a31db8b37dcd6ab6e307041e3c75c9978</anchor>
      <arglist>(const volScalarField &amp;alphat) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>kappaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a3fe3c98fe778533bdc0a9abba9a471ff</anchor>
      <arglist>(const scalarField &amp;alphat, const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alphaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a3e9e3e10308a2c1410badaf5d64748e7</anchor>
      <arglist>(const volScalarField &amp;alphat) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alphaEff</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a5efe625e5780fd9698702d5894a164d1</anchor>
      <arglist>(const scalarField &amp;alphat, const label patchi) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cp</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aaeda1348bb50416b876bdb125014cf9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>rho</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a85451bc9acf825ab1d3c3c143714bc38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a581eca4f4b428164ba2f19e875b0ceba</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a045624d06cfcde894aff0c754b12ca29</anchor>
      <arglist>(const label nodei=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Vs</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a759a82061162463c79c3a6cea0819e42</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>afa376adc6cc59952d2f6f2ad38bba068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a66289cf9ede32ce672bb3c21f02ded40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>alphaPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae6984849624951f976129ba760f2cb3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ad4fa7eb1a78a64edddbfdefe090ffac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>alphaRhoPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aed70c38fb7edef9dea0159ce01de86f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ac84568157c5a273492634b3211bf990d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae8a6a52bab503db0773e00628a8eb950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>relativeTransport</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a98b8459f24c250f47616cdc5ce2f708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>averageTransport</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>af2ee20db7d0685b624a286bc5f1a4fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solveSource</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a93fa749aa27e28c20bd5248c6e3d55fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ae5c686d8699230a237bb9778c098257f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a232a98d1b1c5c31da6b51168026417c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a685ecdb3d2dea6bff122925304fd6652</anchor>
      <arglist>(const bool readOK)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; phaseModel &gt;</type>
      <name>New</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa7a2a90e594c47c3dee9c675e62667a7</anchor>
      <arglist>(const twoPhaseSystem &amp;fluid, const dictionary &amp;dict, const word &amp;phaseName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; phaseModel &gt;</type>
      <name>New</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ac302e4450f4718ee042cdcac813553ec</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const word &amp;phaseName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const twoPhaseSystem &amp;</type>
      <name>fluid_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a9a52eaf98a079f7b3b2e33ba12d2961d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>phaseDict_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a2550b891719ee4e38bd9a30f9f31dc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>residualAlpha_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a9e788d53e0135b25ac6f5f81da5ed251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>alphaMax_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a95bfda06070cd51f98da6bbd3d452243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; rhoThermo &gt;</type>
      <name>thermo_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a654fdbc3aa53708ac0fa0fb005a9444e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volVectorField</type>
      <name>U_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a188c58d01aed5b71cf5711278581adeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>alphaPhi_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aaa2a802e735d9dedd24961db740458b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>alphaRhoPhi_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a83a48ecb73896b66725a1ecdbd5c2b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; surfaceScalarField &gt;</type>
      <name>phiPtr_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aea45f25efc6e5b45e20d176fd53bc308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>d_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>aa844997362d9152966806ee2fe5fa115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &gt;</type>
      <name>turbulence_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>ade320ffd16d481b65bc7896900ac0d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>BGviscosity_</name>
      <anchorfile>a02784.html</anchorfile>
      <anchor>a94b0a37b5250844caacf14b29255ca24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePair</name>
    <filename>a02796.html</filename>
    <base>Foam::phasePairKey</base>
    <base>Foam::phasePairKey</base>
    <member kind="typedef">
      <type>HashTable&lt; dictionary, phasePairKey, phasePairKey::hash &gt;</type>
      <name>dictTable</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>af363db3b15b36bf4fa7997d250543a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashTable&lt; scalar, phasePairKey, phasePairKey::hash &gt;</type>
      <name>scalarTable</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acaeea9792724877a3bebe88ab0dff000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashTable&lt; dictionary, phasePairKey, phasePairKey::hash &gt;</type>
      <name>dictTable</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>af363db3b15b36bf4fa7997d250543a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashTable&lt; scalar, phasePairKey, phasePairKey::hash &gt;</type>
      <name>scalarTable</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acaeea9792724877a3bebe88ab0dff000</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePair</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a9986809af336722c0b627c876f8547da</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2, const dimensionedVector &amp;g, const scalarTable &amp;sigmaTable, const bool ordered=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePair</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acdbac428a23fdde9735401736b9e6c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>dispersed</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a3a4716fe4e876afe9e19df28d744a4c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>continuous</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aa63c40e4c3da92e513e9d6fdbd59aac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a73572f70de721e7793f801ae26c5a6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>rho</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a09fa143f8372daa6aa7929007f25e0e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>magUr</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aaa8f06567ab034e85dedf674c6705345</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>magUr</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a26b2d39ac26d54b0caac6857d680e220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Ur</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a567fad112df27c1e19b6683773c58641</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Ur</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ab7ae789de4e474ec9b42c25f51655ce3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Re</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac7b20c9fb4c0ed5ad5d225fa62211ffb</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Re</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac74e4b487f11d99189e09ec9341db2b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>We</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a52dbfd690dd7aeb73f2e5b83d2b9c26b</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>We</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a6d9659a950a4c1738d566a44d450d228</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Eo</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a074a04965224f5606718d470766f5bd9</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Eo</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ad6ea8396aeb9165072b19ff94c8e2a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH1</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acb59d1eaf81c61a29f9165f3fe65c7b4</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH1</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a241eea760e52e408710808b3b34bacae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH2</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac3eaaebb3093b9db64f869b667f72e13</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH2</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a5078e3e71687464dbf02b0abc1547fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Mo</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a259240c62cc7b550a386d78d663df887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Ta</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a338d941f8300491367230db391ab7729</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Ta</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a0ffb2efd10a60ca8d9170dc00146ba09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>adc8afac52d7bce115ac6d071af1d20a5</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a7adbc789902978053017ef7a87189551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aeb4e04c889563b7c9e388cee105e9b42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aeb856b611bb2f740db6b08a2c1ac004e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedVector &amp;</type>
      <name>g</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac3e3783d2bb513b921a2c7f860a2af10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>sigma</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acf44e5f9a941a732966899a12392b8f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePair</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a8024cea9a2054c98e58681428a678b57</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2, const dimensionedVector &amp;g, const dimensionedScalar &amp;sigma, const bool ordered=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePair</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acdbac428a23fdde9735401736b9e6c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>dispersed</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a3a4716fe4e876afe9e19df28d744a4c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>continuous</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aa63c40e4c3da92e513e9d6fdbd59aac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a73572f70de721e7793f801ae26c5a6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>rho</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a09fa143f8372daa6aa7929007f25e0e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>magUr</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aaa8f06567ab034e85dedf674c6705345</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Ur</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a567fad112df27c1e19b6683773c58641</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Re</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac7b20c9fb4c0ed5ad5d225fa62211ffb</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Pr</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a7cd90f8a70eded25d562c629fa1457a4</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>We</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a52dbfd690dd7aeb73f2e5b83d2b9c26b</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Eo</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a074a04965224f5606718d470766f5bd9</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH1</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>acb59d1eaf81c61a29f9165f3fe65c7b4</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH2</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac3eaaebb3093b9db64f869b667f72e13</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Mo</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a259240c62cc7b550a386d78d663df887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Ta</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a338d941f8300491367230db391ab7729</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>adc8afac52d7bce115ac6d071af1d20a5</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a4d1639aa9075a9e6c4305c5dbe9eb20c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>aea5c5938a4e6f98572b2f4402b20f865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedVector &amp;</type>
      <name>g</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>ac398cd3089810de45204224183fd332e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>sigma</name>
      <anchorfile>a02796.html</anchorfile>
      <anchor>a5d7c419aa22d8d901d5e50276a1d6cfa</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePairKey</name>
    <filename>a02800.html</filename>
    <class kind="class">Foam::phasePairKey::hash</class>
    <member kind="function">
      <type></type>
      <name>phasePairKey</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>aa4c7c18a40e8171472410ad7e3ceb300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePairKey</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>ad162a5b2f36f4065759e039e01bbef66</anchor>
      <arglist>(const word &amp;name1, const word &amp;name2, const bool ordered)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePairKey</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>acc4b4f5a6566aa68a9da2e6016c47a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePairKey</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>aa4c7c18a40e8171472410ad7e3ceb300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePairKey</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>ad162a5b2f36f4065759e039e01bbef66</anchor>
      <arglist>(const word &amp;name1, const word &amp;name2, const bool ordered)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePairKey</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>acc4b4f5a6566aa68a9da2e6016c47a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ordered</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a24aa798895d419f5383a799105f53067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a91accb4412907f2d3ebcca8af596b563</anchor>
      <arglist>(const phasePairKey &amp;a, const phasePairKey &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>aa76007e41e3c94407d13b750c4ce63c9</anchor>
      <arglist>(const phasePairKey &amp;a, const phasePairKey &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a7035ddf073ebfc93c76e99dba34993fd</anchor>
      <arglist>(Istream &amp;is, phasePairKey &amp;key)</arglist>
    </member>
    <member kind="friend">
      <type>friend Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a0bab83c012495f70dbf01f96caf556e1</anchor>
      <arglist>(Ostream &amp;os, const phasePairKey &amp;key)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a91accb4412907f2d3ebcca8af596b563</anchor>
      <arglist>(const phasePairKey &amp;a, const phasePairKey &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>aa76007e41e3c94407d13b750c4ce63c9</anchor>
      <arglist>(const phasePairKey &amp;a, const phasePairKey &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a7035ddf073ebfc93c76e99dba34993fd</anchor>
      <arglist>(Istream &amp;is, phasePairKey &amp;key)</arglist>
    </member>
    <member kind="friend">
      <type>friend Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02800.html</anchorfile>
      <anchor>a0bab83c012495f70dbf01f96caf556e1</anchor>
      <arglist>(Ostream &amp;os, const phasePairKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePressureModel</name>
    <filename>a03064.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::RASModels::phasePressureModel</name>
    <filename>a02760.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a0e32a1b5d46ed2b9e7c1538746636e0b</anchor>
      <arglist>(&quot;phasePressure&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePressureModel</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a78a833320687c7d513c172a6e3ed36a5</anchor>
      <arglist>(const volScalarField &amp;alpha, const volScalarField &amp;rho, const volVectorField &amp;U, const surfaceScalarField &amp;alphaRhoPhi, const surfaceScalarField &amp;phi, const phaseModel &amp;transport, const word &amp;propertiesName=turbulenceModel::propertiesName, const word &amp;type=typeName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePressureModel</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a6383acb3d5218a17d02d1c2f04a5c111</anchor>
      <arglist>(const phasePressureModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePressureModel</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a79c87b1e4c46a1c4d479547ca933845e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a253447ded10e8fc7fceccbbea00f98ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a96bad7745a84df38388d0d0be6edfd8a</anchor>
      <arglist>(const label patchi) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>k</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a2cc3daa68147a9052c2b37e9ac37eca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>epsilon</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>ad79e047917669fbb490d351478651e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>R</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a577b084625b71e318cdd3a5375187925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pPrime</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a05d73539f9e240671bea29cf461dfd61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>pPrimef</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a43f4251b40e33ebde12511f7cdf6ffd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>devRhoReff</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a342a707ec61b66abf8819c9a6c71df72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>a70c6f2b264bc57f5151c900cb136bb20</anchor>
      <arglist>(volVectorField &amp;U) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02760.html</anchorfile>
      <anchor>af6ab4f0d498bff6828739af64d8c39b9</anchor>
      <arglist>(const phasePressureModel &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::polydispersePhaseModel</name>
    <filename>a02788.html</filename>
    <base>Foam::phaseModel</base>
    <member kind="function">
      <type></type>
      <name>polydispersePhaseModel</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a819e51074dd87cb6c2394d4cf3956804</anchor>
      <arglist>(const twoPhaseSystem &amp;fluid, const dictionary &amp;phaseProperties, const word &amp;phaseName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~polydispersePhaseModel</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a5e40b6fbe145289e7e6d5ca63b0adc56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nNodes</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a5fe0d579a26ebb7a0f23dc35b045239d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a71dbd372a922f087e4f0e9802468d22a</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>ab4263b72d31ab6b16f672ebdac11d34e</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>ds</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>ac30d47779092a2a50c4c2a4615d90111</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a11d6e4eda74ba3b7314a231c46411e70</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a84e13a2ef3cff4ca530bc85559d4e1ef</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Vs</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>abe6e051a6335f5146245405d05facc55</anchor>
      <arglist>(const label nodei) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>relativeTransport</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a98b8459f24c250f47616cdc5ce2f708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>averageTransport</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a05a00dd35d1744a056754b601c117136</anchor>
      <arglist>(const PtrList&lt; fvVectorMatrix &gt; &amp;AEqns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02788.html</anchorfile>
      <anchor>a685ecdb3d2dea6bff122925304fd6652</anchor>
      <arglist>(const bool readOK)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModel</name>
    <filename>a02076.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a9723503cf97d2ad82b67092a7aa3e1f3</anchor>
      <arglist>(&quot;populationBalanceModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a4b5fe32ab2218bf665b0be814777329c</anchor>
      <arglist>(autoPtr, populationBalanceModel, dictionary,(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi),(name, dict, phi))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>populationBalanceModel</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a31d0f5b4494ff076cb81eed74ba4bce2</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>populationBalanceModel</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>af50dab74268221d68660eacbd4577f25</anchor>
      <arglist>(const populationBalanceModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~populationBalanceModel</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>ae05106936db1115c15304ded19972e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>ab0c8adedd5f18133f3b1ec3e7757b6fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a7bd34de7b328e6a62310a7b62c856007</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>aacd6f92a174ec1ebe14983fc21ec498c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readIfModified</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a8332ccd46e65642449ef6198415d1d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeData</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>ab51c6051806556654dc16796bf37619a</anchor>
      <arglist>(Ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a03712064dea58b4f16b12260ed5abd36</anchor>
      <arglist>(const populationBalanceModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; populationBalanceModel &gt;</type>
      <name>New</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a9209244e0920b05f98597bf3d105149d</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOdictionary &amp;</type>
      <name>populationBalanceProperties_</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a71cd4372c03c238d3ee30a1deb1de82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const surfaceScalarField &amp;</type>
      <name>phi_</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a5828da03a859a3aaa358802cd2daf505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::powerLawBreakup</name>
    <filename>a02128.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>ab1fbb32a962ed7ca607b766ec813333b</anchor>
      <arglist>(&quot;powerLaw&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>powerLawBreakup</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a11045d68f7b22d71a19150334861de52</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~powerLawBreakup</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>acfdcf8ac936fab910b034c20837198f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a946b65699921072f6210c5f83054e8a1</anchor>
      <arglist>(const scalar &amp;abscissa, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceFrequencyKernels::PrinceAndBlanch</name>
    <filename>a02412.html</filename>
    <base>Foam::coalescenceFrequencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02412.html</anchorfile>
      <anchor>a50af300c75b98f1178060adf971ad308</anchor>
      <arglist>(&quot;PrinceAndBlanch&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrinceAndBlanch</name>
      <anchorfile>a02412.html</anchorfile>
      <anchor>a7eff4cdc8a629aed6a81d98285cab76d</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrinceAndBlanch</name>
      <anchorfile>a02412.html</anchorfile>
      <anchor>aff25f364e9a29167e70a1fa4c143f972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02412.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>omega</name>
      <anchorfile>a02412.html</anchorfile>
      <anchor>a24e44c622256717a0b96b50452b9b70f</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>omega</name>
      <anchorfile>a02412.html</anchorfile>
      <anchor>aeb501baeeb65912923d5e950872b3182</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::PrinceAndBlanch</name>
    <filename>a03004.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::coalescenceEfficiencyKernels::PrinceAndBlanch</name>
    <filename>a02396.html</filename>
    <base>Foam::coalescenceEfficiencyKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02396.html</anchorfile>
      <anchor>a50af300c75b98f1178060adf971ad308</anchor>
      <arglist>(&quot;PrinceAndBlanch&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrinceAndBlanch</name>
      <anchorfile>a02396.html</anchorfile>
      <anchor>a7eff4cdc8a629aed6a81d98285cab76d</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrinceAndBlanch</name>
      <anchorfile>a02396.html</anchorfile>
      <anchor>aff25f364e9a29167e70a1fa4c143f972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02396.html</anchorfile>
      <anchor>acd36d7881ea8503d5c5824e7a5ad6c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Pc</name>
      <anchorfile>a02396.html</anchorfile>
      <anchor>aa4f6d3411e9f9168ecb7d78572be6520</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Pc</name>
      <anchorfile>a02396.html</anchorfile>
      <anchor>a35a2484b126b3a30d82fbce52ebf5725</anchor>
      <arglist>(const label celli, const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::quadratureApproximation</name>
    <filename>a02236.html</filename>
    <templarg>momentType</templarg>
    <templarg>nodeType</templarg>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a40c0d0bd5a41f07da2e5a713799502ff</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>aeff11df4531d27cd8235c9cf9fd6b59d</anchor>
      <arglist>(const word &amp;dictName, const word &amp;name, const momentFieldSetType &amp;mFieldSet, bool calcQuadratureOnCreation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>adb1b16ba7fd2128342b886ba9fce7537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>name</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ac43717d2e4761629e7ac876e0eb53102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>nNodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>aadca23daf27cbd615c4c6e4088ebd2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fieldMomentInversion &amp;</type>
      <name>momentFieldInverter</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ab35707f48144b6e8c377d530fda6958e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mappedPtrList&lt; nodeType &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3ca0cf6fb090ca543a630218046d29bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mappedPtrList&lt; nodeType &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>af23dce88fa6737e1778ab48c57fc07cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a71f52c09f27e0e02f43bb4aa305cfaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a9d4627836aef9dc040629f2184baf197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a9f1df760340bbe0bef437f40500d8e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>momentOrders</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a960466752388287e745144fb5bf03d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>nodeIndexes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a6e0fd3c8a8855d1faa8d46d67581af44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ac4aec727fcdd873ea78763aaeeb86e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaryQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3425ac299e562256ef384508e140f0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a57361ed63aa05333406727264ae648b6</anchor>
      <arglist>(label celli)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateLocalQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a177dde920f33639945218c2c55bc83f8</anchor>
      <arglist>(label celli, bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const word</type>
      <name>propertiesName</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1bd8bb0fb60b71d271b25c14b5d66b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>momentFieldSet&lt; momentType, nodeType &gt;</type>
      <name>momentFieldSetType</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a29cb565361cb270d098a3361c00b9a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ae94623e873d276440e024c1103c40379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList</type>
      <name>nodeIndexes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3bdbade62c9d8495c652ff150056d356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>nNodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1647e11ae64ffecdd792bf62df4029bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; mappedPtrList&lt; nodeType &gt; &gt;</type>
      <name>nodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>af2c826246c4975533732d3c52b75cc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>momentFieldSetType</type>
      <name>moments_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a258d174491c53d664745568f9dca5924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDimensions_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a22a7e22a470f736e5a4561cd9d2fa5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ad99a5dcc1a9e45d5267031edef42012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>momentFieldInverter_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a2884c8660ba88930f5bcf3f3c1293634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>quadratureApproximation&lt; volScalarMoment, volScalarNode &gt;</name>
    <filename>a02236.html</filename>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a40c0d0bd5a41f07da2e5a713799502ff</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>aeff11df4531d27cd8235c9cf9fd6b59d</anchor>
      <arglist>(const word &amp;dictName, const word &amp;name, const momentFieldSetType &amp;mFieldSet, bool calcQuadratureOnCreation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>adb1b16ba7fd2128342b886ba9fce7537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>name</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ac43717d2e4761629e7ac876e0eb53102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>nNodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>aadca23daf27cbd615c4c6e4088ebd2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fieldMomentInversion &amp;</type>
      <name>momentFieldInverter</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ab35707f48144b6e8c377d530fda6958e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mappedPtrList&lt; volScalarNode &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3ca0cf6fb090ca543a630218046d29bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mappedPtrList&lt; volScalarNode &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>af23dce88fa6737e1778ab48c57fc07cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a71f52c09f27e0e02f43bb4aa305cfaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a9d4627836aef9dc040629f2184baf197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a9f1df760340bbe0bef437f40500d8e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>momentOrders</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a960466752388287e745144fb5bf03d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>nodeIndexes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a6e0fd3c8a8855d1faa8d46d67581af44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ac4aec727fcdd873ea78763aaeeb86e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaryQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3425ac299e562256ef384508e140f0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a57361ed63aa05333406727264ae648b6</anchor>
      <arglist>(label celli)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateLocalQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a177dde920f33639945218c2c55bc83f8</anchor>
      <arglist>(label celli, bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const word</type>
      <name>propertiesName</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1bd8bb0fb60b71d271b25c14b5d66b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>momentFieldSet&lt; volScalarMoment, volScalarNode &gt;</type>
      <name>momentFieldSetType</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a29cb565361cb270d098a3361c00b9a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ae94623e873d276440e024c1103c40379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList</type>
      <name>nodeIndexes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3bdbade62c9d8495c652ff150056d356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>nNodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1647e11ae64ffecdd792bf62df4029bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; mappedPtrList&lt; volScalarNode &gt; &gt;</type>
      <name>nodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>af2c826246c4975533732d3c52b75cc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>momentFieldSetType</type>
      <name>moments_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a258d174491c53d664745568f9dca5924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDimensions_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a22a7e22a470f736e5a4561cd9d2fa5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ad99a5dcc1a9e45d5267031edef42012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>momentFieldInverter_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a2884c8660ba88930f5bcf3f3c1293634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>quadratureApproximation&lt; volVelocityMoment, volVelocityNode &gt;</name>
    <filename>a02236.html</filename>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a40c0d0bd5a41f07da2e5a713799502ff</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>aeff11df4531d27cd8235c9cf9fd6b59d</anchor>
      <arglist>(const word &amp;dictName, const word &amp;name, const momentFieldSetType &amp;mFieldSet, bool calcQuadratureOnCreation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureApproximation</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>adb1b16ba7fd2128342b886ba9fce7537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>name</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ac43717d2e4761629e7ac876e0eb53102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>nNodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>aadca23daf27cbd615c4c6e4088ebd2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fieldMomentInversion &amp;</type>
      <name>momentFieldInverter</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ab35707f48144b6e8c377d530fda6958e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mappedPtrList&lt; volVelocityNode &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3ca0cf6fb090ca543a630218046d29bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mappedPtrList&lt; volVelocityNode &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>af23dce88fa6737e1778ab48c57fc07cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a71f52c09f27e0e02f43bb4aa305cfaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a9d4627836aef9dc040629f2184baf197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a158e2815642032d316412644551b3d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a9f1df760340bbe0bef437f40500d8e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>momentOrders</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a960466752388287e745144fb5bf03d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>nodeIndexes</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a6e0fd3c8a8855d1faa8d46d67581af44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ac4aec727fcdd873ea78763aaeeb86e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaryQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3425ac299e562256ef384508e140f0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a57361ed63aa05333406727264ae648b6</anchor>
      <arglist>(label celli)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateLocalQuadrature</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a177dde920f33639945218c2c55bc83f8</anchor>
      <arglist>(label celli, bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const word</type>
      <name>propertiesName</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1bd8bb0fb60b71d271b25c14b5d66b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>momentFieldSet&lt; volVelocityMoment, volVelocityNode &gt;</type>
      <name>momentFieldSetType</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a29cb565361cb270d098a3361c00b9a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ae94623e873d276440e024c1103c40379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const labelListList</type>
      <name>nodeIndexes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a3bdbade62c9d8495c652ff150056d356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>nNodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1647e11ae64ffecdd792bf62df4029bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; mappedPtrList&lt; volVelocityNode &gt; &gt;</type>
      <name>nodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>af2c826246c4975533732d3c52b75cc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>momentFieldSetType</type>
      <name>moments_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a258d174491c53d664745568f9dca5924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDimensions_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a22a7e22a470f736e5a4561cd9d2fa5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>ad99a5dcc1a9e45d5267031edef42012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>momentFieldInverter_</name>
      <anchorfile>a02236.html</anchorfile>
      <anchor>a2884c8660ba88930f5bcf3f3c1293634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::quadratureNode</name>
    <filename>a02240.html</filename>
    <templarg>scalarType</templarg>
    <templarg>vectorType</templarg>
    <class kind="class">Foam::quadratureNode::iNew</class>
    <member kind="function">
      <type></type>
      <name>quadratureNode</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a910c0176c1586b821d568c8cf641ec1c</anchor>
      <arglist>(const word &amp;name, const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const PtrList&lt; dimensionSet &gt; &amp;abscissaeDimensions, const wordList &amp;boundaryTypes, const bool extended=false, const label nSecondaryNodes=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quadratureNode</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>af173f65742a5ad1babcc141b1d281f67</anchor>
      <arglist>(const word &amp;name, const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const PtrList&lt; dimensionSet &gt; &amp;abscissaeDimensions, const bool extended=false, const label nSecondaryNodes=0)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; quadratureNode&lt; scalarType, vectorType &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>aa573bf5b378bb114f54bffb9c0ca336c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureNode</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ad65970595fbbbcb000b0192eb41d7416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ade4113569ef0db70665fded275a5e38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>scalarIndexes</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>abc03e1012f6daada425c85edc8c58376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>velocityIndexes</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a1cdd863e6e245eb97a16d26e891d12c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>sizeIndex</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>aed4141c7d0b66645ba40763a3490e1d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lengthBased</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a390335593e82620a7268f49990e121a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useVolumeFraction</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a00e88c97aee53180c3b7add3d24caf37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extended</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ab1a1fca09a7606ab0aa051b60ecf9482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nSecondaryNodes</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a1225f4e952fddfbb5f6f198f88ac8017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const weightType &amp;</type>
      <name>primaryWeight</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ae744e0be2351d524d75803ea51fe5f69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>weightType &amp;</type>
      <name>primaryWeight</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a506afb611772e391499d7702c5fd4b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const abscissaeType &amp;</type>
      <name>primaryAbscissae</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a44294a401aa4b4cd33e56b6d61967ae6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>abscissaeType &amp;</type>
      <name>primaryAbscissae</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a88dff85da7b89e90b7a15e753463e3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const secondaryWeightsType &amp;</type>
      <name>secondaryWeights</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>afc068e8effa3c3cc13c9e15c22058214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>secondaryWeightsType &amp;</type>
      <name>secondaryWeights</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ab41ee35041bc97dad4863c1711ada34f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const secondaryAbscissaeType &amp;</type>
      <name>secondaryAbscissae</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a1ae11040ca975de93967d8f0452e6de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>secondaryAbscissaeType &amp;</type>
      <name>secondaryAbscissae</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>aaf46f33a112c54582754846622592472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sigmasType &amp;</type>
      <name>sigmas</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>afe3b61857d852262867c81e0cd0a68a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sigmasType &amp;</type>
      <name>sigmas</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a1713d432aa4ccd46d5282700612624f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const velocityAbscissaeType &amp;</type>
      <name>velocityAbscissae</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>af1246788ffe9fb394b0c4095f2322d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual velocityAbscissaeType &amp;</type>
      <name>velocityAbscissae</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a18e2396e6b02531d1de411179e11fa5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>scalarType</type>
      <name>weightType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ac9353062bd99eb2087a40d3e155b3101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PtrList&lt; PtrList&lt; weightType &gt; &gt;</type>
      <name>secondaryWeightsType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a7484f7300c91832d4ae246cdac4d1ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>scalarType</type>
      <name>abscissaType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a1fb76a2a2c3dc61b68236bf8c9424929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PtrList&lt; abscissaType &gt;</type>
      <name>abscissaeType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a34c58fd36c4dca035dbd66f860025dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PtrList&lt; abscissaeType &gt;</type>
      <name>secondaryAbscissaeType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ab3c61644ddcbc98570f7ef0203aab38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>vectorType</type>
      <name>velocityAbscissaeType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a85b6944652c46928e2c16736c51e2330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>scalarType</type>
      <name>sigmaType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a90438398b03a5f29f51a4d462a04ae82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PtrList&lt; sigmaType &gt;</type>
      <name>sigmasType</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>afd075517a242aeab266fa006852cbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>weightType</type>
      <name>weight_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a90a99fdb4f6aa37ecf46ac93a77f6ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>abscissaeType</type>
      <name>abscissae_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>af308d9f621f6f7231e083c1edab0631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>scalarIndexes_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a2416c878e72810c1d932a2f9b9705bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>velocityIndexes_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a1aac0aec9e5f889d2740b006b034139a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>sizeIndex_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a7846c8b26f4e52a4939c0e77e8c8c362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lengthBased_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>ab4e90e5d4205b260a6a4d7a77d68bf77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useVolumeFraction_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a5ed2ac62c803eb171b7e100026e40229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>secondaryWeightsType</type>
      <name>secondaryWeights_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>aa2de4d6d0688fa9e426d6a15b6d48a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>secondaryAbscissaeType</type>
      <name>secondaryAbscissae_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a71421decb61bc7f487e12b98b34bfd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sigmasType</type>
      <name>sigmas_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a39fa73f6c21129b608493ca618a2a558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a40215782a1b76974e2398e5db8a42c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extended_</name>
      <anchorfile>a02240.html</anchorfile>
      <anchor>a4bb40947fbadb3a714e5e3beb2824193</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModel</name>
    <filename>a02720.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>ad0f962111ba408a72779b839f52d828c</anchor>
      <arglist>(&quot;radialModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>a6cbd38b22a7de49d1cdae4f181a3e320</anchor>
      <arglist>(autoPtr, radialModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>radialModel</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>a1d0163d3e88e09dc7e977297d38d3bfe</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>radialModel</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>ae9259f65e2cf31e5507a021cc7321a16</anchor>
      <arglist>(const radialModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~radialModel</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>aa0b85a713931d79edd072b50f885bddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>a63bf7fcd1808fb632f8161a45ce94242</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>ae17f86dc1c8c334f7e79d9ad70b7a23d</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>a615294d42c6f4b71179b1a4e2687d1da</anchor>
      <arglist>(const radialModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; radialModel &gt;</type>
      <name>New</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>a95acce8586d3a570928fd57558cdf91d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02720.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::heatTransferModels::RanzMarshall</name>
    <filename>a02824.html</filename>
    <base>Foam::heatTransferModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>a91b1b4b506f8a5069c76f0955d10628d</anchor>
      <arglist>(&quot;RanzMarshall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanzMarshall</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>aa7963dc9cb4a76073ad9c9fb9babc549</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RanzMarshall</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>ad257dad6065567c65e89d1942b660548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>a762cdd365d30ec1880df9df100ae8a88</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::realizableOdeSolver</name>
    <filename>a02256.html</filename>
    <templarg>momentType</templarg>
    <templarg>nodeType</templarg>
    <member kind="function">
      <type></type>
      <name>realizableOdeSolver</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a647445a5e0ae0c5ba1ee65ef0ecdbdf3</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~realizableOdeSolver</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a483968a4430789464c47b580e9b124a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a21134eb2fde29b8e9cbcb0e80cca52af</anchor>
      <arglist>(quadratureType &amp;quadrature, const label enviroment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a428788b96f9f592ba1fa5b37c25ac749</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateCellMomentSource</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>ad8beae951d57b51d5e8d3824d210bee9</anchor>
      <arglist>(const label celli)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>cellMomentSource</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>aedb48dc8d4698a402e08946563e89e0e</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const quadratureType &amp;nodes, const label enviroment)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>solveSources_</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>ac4c5c7cf6b6504a41b502e4c9a500816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>solveOde_</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>aad5b7c946c9f2ff4c83ca2652369067b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>realizableOdeSolver&lt; volScalarMoment, volScalarNode &gt;</name>
    <filename>a02256.html</filename>
    <member kind="function">
      <type></type>
      <name>realizableOdeSolver</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a647445a5e0ae0c5ba1ee65ef0ecdbdf3</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~realizableOdeSolver</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a483968a4430789464c47b580e9b124a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a21134eb2fde29b8e9cbcb0e80cca52af</anchor>
      <arglist>(quadratureType &amp;quadrature, const label enviroment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a428788b96f9f592ba1fa5b37c25ac749</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateCellMomentSource</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>ad8beae951d57b51d5e8d3824d210bee9</anchor>
      <arglist>(const label celli)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>cellMomentSource</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>aedb48dc8d4698a402e08946563e89e0e</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const quadratureType &amp;nodes, const label enviroment)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>solveSources_</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>ac4c5c7cf6b6504a41b502e4c9a500816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>solveOde_</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>aad5b7c946c9f2ff4c83ca2652369067b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>realizableOdeSolver&lt; volVelocityMoment, volVelocityNode &gt;</name>
    <filename>a02256.html</filename>
    <member kind="function">
      <type></type>
      <name>realizableOdeSolver</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a647445a5e0ae0c5ba1ee65ef0ecdbdf3</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~realizableOdeSolver</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a483968a4430789464c47b580e9b124a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a21134eb2fde29b8e9cbcb0e80cca52af</anchor>
      <arglist>(quadratureType &amp;quadrature, const label enviroment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>a428788b96f9f592ba1fa5b37c25ac749</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateCellMomentSource</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>ad8beae951d57b51d5e8d3824d210bee9</anchor>
      <arglist>(const label celli)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>cellMomentSource</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>aedb48dc8d4698a402e08946563e89e0e</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const quadratureType &amp;nodes, const label enviroment)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>solveSources_</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>ac4c5c7cf6b6504a41b502e4c9a500816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>solveOde_</name>
      <anchorfile>a02256.html</anchorfile>
      <anchor>aad5b7c946c9f2ff4c83ca2652369067b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RK2</name>
    <filename>a02272.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02272.html</anchorfile>
      <anchor>aee4a63a76e238dac0f828bb8913d2fc4</anchor>
      <arglist>(&quot;RK2&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RK2</name>
      <anchorfile>a02272.html</anchorfile>
      <anchor>aa0fdeff2f26e5d186aef44d0616d8691</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RK2</name>
      <anchorfile>a02272.html</anchorfile>
      <anchor>a9e79fe08a5113cffcba7bd45a0cf73ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02272.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02272.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02272.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RK2SSP</name>
    <filename>a02276.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02276.html</anchorfile>
      <anchor>aac5a58b7f10693e37a2bd265c8599c3b</anchor>
      <arglist>(&quot;RK2SSP&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RK2SSP</name>
      <anchorfile>a02276.html</anchorfile>
      <anchor>a106e8960aa0f27e7d7644c24d5528751</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RK2SSP</name>
      <anchorfile>a02276.html</anchorfile>
      <anchor>ae6f82b7cf7bf207c0f901a4854c4ad46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02276.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02276.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02276.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RK3</name>
    <filename>a02928.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RK3SSP</name>
    <filename>a02280.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02280.html</anchorfile>
      <anchor>a6608c35ced0c335a39f777a04f022bcc</anchor>
      <arglist>(&quot;RK3SSP&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RK3SSP</name>
      <anchorfile>a02280.html</anchorfile>
      <anchor>a61303ed76d3bac144a462654d03e13c2</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RK3SSP</name>
      <anchorfile>a02280.html</anchorfile>
      <anchor>a64cf16f552c95efd21161af5ac82226b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02280.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02280.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02280.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RK45</name>
    <filename>a02284.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02284.html</anchorfile>
      <anchor>a6f857eb40c2ac33c0676c506fa887ef7</anchor>
      <arglist>(&quot;RK45&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RK45</name>
      <anchorfile>a02284.html</anchorfile>
      <anchor>a359c6cf56fb22d8b0be7e3fec70c0bb9</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RK45</name>
      <anchorfile>a02284.html</anchorfile>
      <anchor>a61dec189d6197b656f857661d41fb648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02284.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02284.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02284.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RK4SSP</name>
    <filename>a02288.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02288.html</anchorfile>
      <anchor>ae78533b4e9ae98532d0781b51049e66a</anchor>
      <arglist>(&quot;RK4SSP&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RK4SSP</name>
      <anchorfile>a02288.html</anchorfile>
      <anchor>ae2d8802b5d38355702108fcbe869ea5a</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RK4SSP</name>
      <anchorfile>a02288.html</anchorfile>
      <anchor>a143bbf1e6246ecdd368a0a6e442a9009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02288.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02288.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02288.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ButcherTables::RKF45</name>
    <filename>a02292.html</filename>
    <base>Foam::ButcherTable</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02292.html</anchorfile>
      <anchor>ac360f87a60175f83e5da759b1a807a80</anchor>
      <arglist>(&quot;RKF45&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RKF45</name>
      <anchorfile>a02292.html</anchorfile>
      <anchor>a37ef3a2e61b531de8c3bd4255d040761</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RKF45</name>
      <anchorfile>a02292.html</anchorfile>
      <anchor>a889bf4b2b00d9ea5d96022225167ad3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nSteps</name>
      <anchorfile>a02292.html</anchorfile>
      <anchor>a733313ab7e10857dc86dcdb31ce0773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>coeffs</name>
      <anchorfile>a02292.html</anchorfile>
      <anchor>a55fa014d753dccc66387b170ebe07622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual List&lt; scalarList &gt;</type>
      <name>Fcoeffs</name>
      <anchorfile>a02292.html</anchorfile>
      <anchor>a2d71774c89a08c9da17a3600fdf6f349</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fluxFunctions::Roe</name>
    <filename>a02320.html</filename>
    <base>Foam::fluxFunction</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02320.html</anchorfile>
      <anchor>a57a2b3178b75fb6b527d722f03eca144</anchor>
      <arglist>(&quot;Roe&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Roe</name>
      <anchorfile>a02320.html</anchorfile>
      <anchor>a923037e82b85569d0c7c1898b6158fd9</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Roe</name>
      <anchorfile>a02320.html</anchorfile>
      <anchor>abefbab8f80bbf0e8a2fcdb747ee8bdcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFluxes</name>
      <anchorfile>a02320.html</anchorfile>
      <anchor>a74cf37df2d9a52c5fc680df46be08b90</anchor>
      <arglist>(surfaceScalarField &amp;massFlux, surfaceVectorField &amp;momentumFlux, surfaceScalarField &amp;energyFlux, const volScalarField &amp;rho, const volVectorField &amp;U, const volScalarField &amp;H, const volScalarField &amp;p, const volScalarField &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::RoeFlux</name>
    <filename>a02948.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModels::Schaeffer</name>
    <filename>a02692.html</filename>
    <base>Foam::kineticTheoryModels::frictionalStressModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>a14d5c45df4dca1c0266e55ebfb4da5d0</anchor>
      <arglist>(&quot;Schaeffer&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Schaeffer</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>a77fabfee38cfbdfada387add9e9e2fb4</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Schaeffer</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>acd9186bf2c0b9430d0e8b52d15b45800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>add25d5d3e1ee0b1714f02a6a34f9a341</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>a631595abb00aaed55167c56f636c12d0</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>ad7693bd27012ae20cc72acb451c2e76c</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02692.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::SchillerNaumann</name>
    <filename>a02448.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a6d8702ad36d859b75df8183270d63db0</anchor>
      <arglist>(&quot;SchillerNaumann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SchillerNaumann</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>af25399d64dd267dfcbc6ea3ef58441a5</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SchillerNaumann</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a1ccb08c86b91c69b15f2641129841b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a6d8702ad36d859b75df8183270d63db0</anchor>
      <arglist>(&quot;SchillerNaumann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SchillerNaumann</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>af25399d64dd267dfcbc6ea3ef58441a5</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SchillerNaumann</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a1ccb08c86b91c69b15f2641129841b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::segregated</name>
    <filename>a02452.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>ab67b25112f6f86d04398a77176768bbc</anchor>
      <arglist>(&quot;segregated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segregated</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a3329fe0453f80577d3c3b6c1a4418833</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~segregated</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a375da7264b6238091673de917bb42084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a123a2f0759e7cd4e8d0092806b4b71b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a5ee445a07b37d6697e74b5a59bfb6e50</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a5bda2bd8bcc2018ba9c901aa8fd7bd6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>ab67b25112f6f86d04398a77176768bbc</anchor>
      <arglist>(&quot;segregated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segregated</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a3329fe0453f80577d3c3b6c1a4418833</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~segregated</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a375da7264b6238091673de917bb42084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a5ee445a07b37d6697e74b5a59bfb6e50</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::SinclairJackson</name>
    <filename>a03052.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModels::SinclairJackson</name>
    <filename>a02724.html</filename>
    <base>Foam::kineticTheoryModels::radialModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02724.html</anchorfile>
      <anchor>ae4f5e0722f1373329b3e5d6ecd305901</anchor>
      <arglist>(&quot;SinclairJackson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinclairJackson</name>
      <anchorfile>a02724.html</anchorfile>
      <anchor>a5305a7ba15e1d04d5bbb14529b1650e3</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SinclairJackson</name>
      <anchorfile>a02724.html</anchorfile>
      <anchor>ad223aad70fde71fd367770b4699981c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a02724.html</anchorfile>
      <anchor>a5317f8cb29ac522c4d7b82ab1b7bc245</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a02724.html</anchorfile>
      <anchor>a56b9b7860b3f308982fda10a9724be08</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::sine</name>
    <filename>a02584.html</filename>
    <base>Foam::wallDampingModels::interpolated</base>
    <base>Foam::wallDampingModels::interpolated</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>a33c7be900b7642a50de9fe3539ee19d7</anchor>
      <arglist>(&quot;sine&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sine</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>afbbd095848d37a8fd1b8aa033667dfb4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sine</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>aa1c45d97c843bcc584b269b6a527e6fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>a33c7be900b7642a50de9fe3539ee19d7</anchor>
      <arglist>(&quot;sine&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sine</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>afbbd095848d37a8fd1b8aa033667dfb4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sine</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>aa1c45d97c843bcc584b269b6a527e6fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>a544a6b65a82dd422f9b35fee1c8a2831</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a02584.html</anchorfile>
      <anchor>a544a6b65a82dd422f9b35fee1c8a2831</anchor>
      <arglist>(const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentInversions::sizeCHyQMOM</name>
    <filename>a01988.html</filename>
    <base>Foam::multivariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>a565682f1d3df34550688a79dd8cf0613</anchor>
      <arglist>(&quot;sizeCHyQMOM&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sizeCHyQMOM</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>ad7348eb6cc9a3a9bcb90b5fb1cbe5663</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sizeCHyQMOM</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>acaa6d9731e0d7d515ff6ffaca8b36bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>ae6813b534d14729b1f14771df0910a87</anchor>
      <arglist>(const multivariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::populationBalanceModels::sizeVelocityPopulationBalance</name>
    <filename>a02220.html</filename>
    <base>Foam::PDFTransportModels::populationBalanceModels::velocityPopulationBalance</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02220.html</anchorfile>
      <anchor>a2ef784b090c368b198a5a915974d891a</anchor>
      <arglist>(&quot;sizeVelocity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sizeVelocityPopulationBalance</name>
      <anchorfile>a02220.html</anchorfile>
      <anchor>ab655908698ea99a695b29e732dbb184d</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sizeVelocityPopulationBalance</name>
      <anchorfile>a02220.html</anchorfile>
      <anchor>aee7c267900b8318537d90dbfc7c45042</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::heatTransferModels::sphericalHeatTransfer</name>
    <filename>a02828.html</filename>
    <base>Foam::heatTransferModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>a3354cc6df1c1c6a06130c67f05c355cb</anchor>
      <arglist>(&quot;spherical&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphericalHeatTransfer</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>aa7581132bbbe748ae4eabf6313c0d43d</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sphericalHeatTransfer</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>a4f00d403eab01d5729bdf2df334a4ef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>a762cdd365d30ec1880df9df100ae8a88</anchor>
      <arglist>(const label nodei, const label nodej) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Stokes</name>
    <filename>a02812.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a7b343e10d2b70ba0b7deaffd7afc0954</anchor>
      <arglist>(&quot;Stokes&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stokes</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a15343981a7149c611e595f84215ef80b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Stokes</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a4ec63dc013798a713db06e004b9a0f0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a6a9b9c581fa49fd06c6bb8b16d0adcb5</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::sumAggregation</name>
    <filename>a02100.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02100.html</anchorfile>
      <anchor>a4175abdc1459fcf6820150c4e2ecf4da</anchor>
      <arglist>(&quot;sum&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sumAggregation</name>
      <anchorfile>a02100.html</anchorfile>
      <anchor>a2c16e4ffc6504984bf080838406a8de2</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sumAggregation</name>
      <anchorfile>a02100.html</anchorfile>
      <anchor>a8e3dea727d5bdc9cd286c349f6dfefff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02100.html</anchorfile>
      <anchor>a3a5510fce9094461685717d84f4fe6fe</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::swarmCorrection</name>
    <filename>a02508.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a5316e9d61d8dea54c06abeed52cfbf66</anchor>
      <arglist>(&quot;swarmCorrection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a6c4b0049bf3417c6ed5e40a01b2f460c</anchor>
      <arglist>(autoPtr, swarmCorrection, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>swarmCorrection</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>ab349f8b1c2d9ee7a45fece303bb5befc</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~swarmCorrection</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a4902330ff6741d8c343fd09897f77f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a066513d703c085f2bab6dbbe393b6438</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a059926cf76c21ae092846a1e0defb847</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a5316e9d61d8dea54c06abeed52cfbf66</anchor>
      <arglist>(&quot;swarmCorrection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a6c4b0049bf3417c6ed5e40a01b2f460c</anchor>
      <arglist>(autoPtr, swarmCorrection, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>swarmCorrection</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>ab349f8b1c2d9ee7a45fece303bb5befc</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~swarmCorrection</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a4902330ff6741d8c343fd09897f77f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a066513d703c085f2bab6dbbe393b6438</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; swarmCorrection &gt;</type>
      <name>New</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>aed46a8706b7f96382c52e67d774e2d3a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; swarmCorrection &gt;</type>
      <name>New</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>aed46a8706b7f96382c52e67d774e2d3a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02508.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModels::Syamlal</name>
    <filename>a02744.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02744.html</anchorfile>
      <anchor>aa4db53508077b9b23041dfc224e8e6ed</anchor>
      <arglist>(&quot;Syamlal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Syamlal</name>
      <anchorfile>a02744.html</anchorfile>
      <anchor>a993b24ab3eee501c8b5b6d11736607d0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Syamlal</name>
      <anchorfile>a02744.html</anchorfile>
      <anchor>a9ad88e77569a2b24c88ab07e1c000110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02744.html</anchorfile>
      <anchor>ad7c5e15115875f60182d449907ad0ddc</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::Syamlal</name>
    <filename>a02676.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02676.html</anchorfile>
      <anchor>aa4db53508077b9b23041dfc224e8e6ed</anchor>
      <arglist>(&quot;Syamlal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Syamlal</name>
      <anchorfile>a02676.html</anchorfile>
      <anchor>a993b24ab3eee501c8b5b6d11736607d0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Syamlal</name>
      <anchorfile>a02676.html</anchorfile>
      <anchor>a9ad88e77569a2b24c88ab07e1c000110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a02676.html</anchorfile>
      <anchor>a00c7f0022b5ee5d1fa8d72b670921f9b</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::SyamlalOBrien</name>
    <filename>a02456.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a6143f372a0045f3662e4906562b28893</anchor>
      <arglist>(&quot;SyamlalOBrien&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SyamlalOBrien</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a6fb12f758bcf97293d3d90b2b70a2c6f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SyamlalOBrien</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a41de66437495b16d31a6ed834dc60bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a6143f372a0045f3662e4906562b28893</anchor>
      <arglist>(&quot;SyamlalOBrien&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SyamlalOBrien</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a6fb12f758bcf97293d3d90b2b70a2c6f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SyamlalOBrien</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a41de66437495b16d31a6ed834dc60bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02456.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::SyamlalRogersOBrien</name>
    <filename>a03048.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModels::SyamlalRogersOBrien</name>
    <filename>a02708.html</filename>
    <base>Foam::kineticTheoryModels::granularPressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02708.html</anchorfile>
      <anchor>aa1910326595e8c75013d9aa5cde3d6bc</anchor>
      <arglist>(&quot;SyamlalRogersOBrien&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SyamlalRogersOBrien</name>
      <anchorfile>a02708.html</anchorfile>
      <anchor>aa78bf2c4309412069f5f7686411e5f73</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SyamlalRogersOBrien</name>
      <anchorfile>a02708.html</anchorfile>
      <anchor>ad7f0e0d76c579fdcc5186a1be41856ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a02708.html</anchorfile>
      <anchor>a0c8957490daa843f7605391a43a51863</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a02708.html</anchorfile>
      <anchor>a64b8b5635c84589b424c5c7652c732fc</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::symmetricFragmentation</name>
    <filename>a02168.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02168.html</anchorfile>
      <anchor>a999a81c4ca2504ee0ffe0b088c09ba85</anchor>
      <arglist>(&quot;symmetricFragmentation&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>symmetricFragmentation</name>
      <anchorfile>a02168.html</anchorfile>
      <anchor>a06ddb9d84a56a2e718822ea145ca1c01</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~symmetricFragmentation</name>
      <anchorfile>a02168.html</anchorfile>
      <anchor>a8d44e31c17c944f6a03e3abea48bbea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a02168.html</anchorfile>
      <anchor>aa699955fa82d81b8bae2a63e1e80ee75</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mDMass</name>
      <anchorfile>a02168.html</anchorfile>
      <anchor>a1e2673712babed9c93a6d6a1b9a23979</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::multivariateMomentInversions::TensorProduct</name>
    <filename>a01992.html</filename>
    <base>Foam::multivariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a459e4d033f402e92cd7479bdbb4c907b</anchor>
      <arglist>(&quot;TensorProduct&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TensorProduct</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a04490e9c18c42432d945703f75538819</anchor>
      <arglist>(const dictionary &amp;dict, const labelListList &amp;momentOrders, const labelListList &amp;nodeIndexes, const labelList &amp;velocityIndexes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TensorProduct</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a07fe20b917a29458f4756a41505d3968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ae6813b534d14729b1f14771df0910a87</anchor>
      <arglist>(const multivariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ThermalDiffusivity</name>
    <filename>a02756.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Tomiyama</name>
    <filename>a02460.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02460.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tomiyama</name>
      <anchorfile>a02460.html</anchorfile>
      <anchor>a83114994ac5b1a2ce4662704e559dca3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Tomiyama</name>
      <anchorfile>a02460.html</anchorfile>
      <anchor>a07fae9c371f900b810887176710705aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02460.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02460.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::TomiyamaAnalytic</name>
    <filename>a02464.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>ad22d12f6cbcf2b826114aecc726e321f</anchor>
      <arglist>(&quot;TomiyamaAnalytic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaAnalytic</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a86efed6beca852c2f847d4ca967ae71b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaAnalytic</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a19e6ceca2290c5dc8f87f49aad8d94e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>ad22d12f6cbcf2b826114aecc726e321f</anchor>
      <arglist>(&quot;TomiyamaAnalytic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaAnalytic</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a86efed6beca852c2f847d4ca967ae71b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaAnalytic</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a19e6ceca2290c5dc8f87f49aad8d94e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::TomiyamaAspectRatio</name>
    <filename>a02336.html</filename>
    <base>Foam::aspectRatioModels::VakhrushevEfremov</base>
    <base>Foam::wallDependentModel</base>
    <base>Foam::aspectRatioModels::VakhrushevEfremov</base>
    <base>Foam::wallDependentModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaAspectRatio</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>aac83abd8bd5e67cc8298fb1f59cf9393</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaAspectRatio</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a068a2605aaf36840d7fcfb91df884a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a7adbc789902978053017ef7a87189551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaAspectRatio</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>aac83abd8bd5e67cc8298fb1f59cf9393</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaAspectRatio</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a068a2605aaf36840d7fcfb91df884a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02336.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::TomiyamaCorrelated</name>
    <filename>a02468.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a9f104e7935b9334def5f303b3813bad0</anchor>
      <arglist>(&quot;TomiyamaCorrelated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaCorrelated</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a7ab60d734c797ebbbf3ad94391886ab4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaCorrelated</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>ace4693a4fae082b4f2f73b625c34c0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a9f104e7935b9334def5f303b3813bad0</anchor>
      <arglist>(&quot;TomiyamaCorrelated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaCorrelated</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a7ab60d734c797ebbbf3ad94391886ab4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaCorrelated</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>ace4693a4fae082b4f2f73b625c34c0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::TomiyamaLift</name>
    <filename>a02496.html</filename>
    <base>Foam::liftModel</base>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaLift</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>ab966bdc1a7a41b18e3a292633d3ab798</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaLift</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>a9957d3c2df680e78d31c58ed92097ff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaLift</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>ab966bdc1a7a41b18e3a292633d3ab798</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaLift</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>a9957d3c2df680e78d31c58ed92097ff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02496.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::TomiyamaSwarm</name>
    <filename>a03012.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::swarmCorrections::TomiyamaSwarm</name>
    <filename>a02512.html</filename>
    <base>Foam::swarmCorrection</base>
    <base>Foam::swarmCorrection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaSwarm</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a33d86d874765f719d97ef6d616a064e2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaSwarm</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>aed7c376de04de96e0c0c524828c98510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a9aab4f7bfc141f58ec6ced64707e607f</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a2eba82702cc6120eeac12ea685c860b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaSwarm</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a33d86d874765f719d97ef6d616a064e2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaSwarm</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>aed7c376de04de96e0c0c524828c98510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a02512.html</anchorfile>
      <anchor>a9aab4f7bfc141f58ec6ced64707e607f</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::TomiyamaWallLubrication</name>
    <filename>a02608.html</filename>
    <base>Foam::wallLubricationModel</base>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaWallLubrication</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>a4d31410b60b2379055eb33353a2301a9</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaWallLubrication</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>a579e0206457abf427a21a574b27336b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaWallLubrication</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>a4d31410b60b2379055eb33353a2301a9</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaWallLubrication</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>a579e0206457abf427a21a574b27336b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02608.html</anchorfile>
      <anchor>abaec7d1ee285f328383b9820db6b2f54</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::turbulentBrownian</name>
    <filename>a02104.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02104.html</anchorfile>
      <anchor>ad85b05c960956edb395072e9c0879d23</anchor>
      <arglist>(&quot;turbulentBrownian&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentBrownian</name>
      <anchorfile>a02104.html</anchorfile>
      <anchor>a69313e09fe86ca111b470eff033b395d</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentBrownian</name>
      <anchorfile>a02104.html</anchorfile>
      <anchor>a870db0e339e84ac084658eea637e60a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a02104.html</anchorfile>
      <anchor>a3a5510fce9094461685717d84f4fe6fe</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label celli, const label environment=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingDiffusionModels::turbulentDiffusion</name>
    <filename>a01912.html</filename>
    <base>Foam::mixingSubModels::mixingDiffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a7ed8525205e60ab2350365229650b6c9</anchor>
      <arglist>(&quot;turbulentDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDiffusion</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a53a87c43578f29144d9faa8a85d38ae0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDiffusion</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a4c6867b84e9f2bae67c952fe4e59c0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a4184526af0681ab425928e56ffb3b826</anchor>
      <arglist>(const volScalarField &amp;moment) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModels::turbulentDiffusion</name>
    <filename>a02188.html</filename>
    <base>Foam::populationBalanceSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02188.html</anchorfile>
      <anchor>a7ed8525205e60ab2350365229650b6c9</anchor>
      <arglist>(&quot;turbulentDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDiffusion</name>
      <anchorfile>a02188.html</anchorfile>
      <anchor>a53a87c43578f29144d9faa8a85d38ae0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDiffusion</name>
      <anchorfile>a02188.html</anchorfile>
      <anchor>a4c6867b84e9f2bae67c952fe4e59c0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a02188.html</anchorfile>
      <anchor>a4184526af0681ab425928e56ffb3b826</anchor>
      <arglist>(const volScalarField &amp;moment) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModel</name>
    <filename>a02544.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>aadc70cb8b5ed675d2d5dc4efcceffebe</anchor>
      <arglist>(&quot;turbulentDispersionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a53bec73805e033d07ee3531b6651eac6</anchor>
      <arglist>(autoPtr, turbulentDispersionModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDispersionModel</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>ae6e083687046f0e4da9d24e47f11c32f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDispersionModel</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>afb757b566135de9298b6328d52e15200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>aa4d60ce3045b392933489df2f0fc336c</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a73ae8f7e1c4fe4e38d0b54b31edbe22d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>adbaedda8bb873d6368ebd9c877c4c60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>aadc70cb8b5ed675d2d5dc4efcceffebe</anchor>
      <arglist>(&quot;turbulentDispersionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a53bec73805e033d07ee3531b6651eac6</anchor>
      <arglist>(autoPtr, turbulentDispersionModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDispersionModel</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>ae6e083687046f0e4da9d24e47f11c32f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDispersionModel</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>afb757b566135de9298b6328d52e15200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>aa4d60ce3045b392933489df2f0fc336c</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; turbulentDispersionModel &gt;</type>
      <name>New</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>ae28e9615b1f0e9e1f4a28697bd05c742</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; turbulentDispersionModel &gt;</type>
      <name>New</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>ae28e9615b1f0e9e1f4a28697bd05c742</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimD</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a9cb06d406831363f16c82a0693858157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>ae080efa852cff98918608f047c337d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02544.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::mixingModels::turbulentMixing</name>
    <filename>a01936.html</filename>
    <base>Foam::PDFTransportModels::univariatePDFTransportModel</base>
    <base>Foam::mixingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a07e393e8d7cbf999eaad113a4fc42314</anchor>
      <arglist>(&quot;turbulentMixing&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentMixing</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aa538c7e23461fc715edb1f17abbb4910</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentMixing</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>af371dd36dabac7b470898a187554a939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::twoPhaseSystem</name>
    <filename>a02808.html</filename>
    <member kind="function">
      <type></type>
      <name>twoPhaseSystem</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a38db7d4d3cda2cfe382cc379b1f6b370</anchor>
      <arglist>(const fvMesh &amp;, const dimensionedVector &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~twoPhaseSystem</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a299eb4cf30ad9b42eb5bdd8e7e1e1e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>rho</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a09fa143f8372daa6aa7929007f25e0e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>U</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a3025b6f75a6f03085eac14de686205fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Kd</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a24a78c034c2cb597215fe33d516f2db9</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Kd</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a56b5965b987a2508a72264799dfa19a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kdf</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a5b74787e338ea6b21a3276ea41ef42ad</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kdf</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>ac0ce78f9a00a2f1c1c42c3d5be9d6d5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Vm</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a9c1880f259f18056c3692c0087e73e30</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Vm</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a898be5bfd397b4e5568a6a734ff222eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Vmf</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>ab0bd5cf353ce14f13fa95fb814a4f1be</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Vmf</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>ae1aefe9497baf975721a06ab942f2221</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a3b11efbb9e43ee688effa3163e3b0e54</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a8ee30fbc69bb5dbedfab36795ebf4760</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>ac29821c0e842043d0dc370d526cf00b9</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>add8d839deaf547f51bb411f35af75509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>aaa021b9dd57cf16498f856ab160fcc7f</anchor>
      <arglist>(const label) const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>afc32666fde6f56000758afa8668d9518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff1</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a8d1fc873e6391857383050bf9d60c8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff2</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a5f1a3797019f72b2a3c720e83df6b91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>averageTransport</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a132d9471a477e405edccc8072f747673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransport</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a7ad2b66dfc25f442a9df3f8bccd4e681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correct</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a3ae44b28050c3aa494c1d8e18cf618c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correctTurbulence</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a894a3fecb5f9a994d803680e6ee51075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>af816873151ddb0126e98bb2f914d8ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const modelType &amp;</type>
      <name>lookupSubModel</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a3714325f306664b1562058096305f542</anchor>
      <arglist>(const phasePair &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>const modelType &amp;</type>
      <name>lookupSubModel</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>acd9ae1df303fd2dd5ae83fccf4b6ef0a</anchor>
      <arglist>(const phaseModel &amp;dispersed, const phaseModel &amp;continuous) const</arglist>
    </member>
    <member kind="function">
      <type>const dragModel &amp;</type>
      <name>drag</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>acf64aff7136c575353488f9f6d926062</anchor>
      <arglist>(const phaseModel &amp;phase) const</arglist>
    </member>
    <member kind="function">
      <type>const virtualMassModel &amp;</type>
      <name>virtualMass</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a74aa7f35d28d17db2666172dadf706b4</anchor>
      <arglist>(const phaseModel &amp;phase) const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedVector &amp;</type>
      <name>g</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>ac398cd3089810de45204224183fd332e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>sigma</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a5d7c419aa22d8d901d5e50276a1d6cfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const fvMesh &amp;</type>
      <name>mesh</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>acb31d92d519d673eae6328d85d16fa52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>aeb4e04c889563b7c9e388cee105e9b42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>aae2393c9a021227c42f0e5b557fd5539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>aeb856b611bb2f740db6b08a2c1ac004e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a28e5bc97bd0ce70b75636a70bd141c06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>otherPhase</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a21dba21eddc0728483db4760c08b11c6</anchor>
      <arglist>(const phaseModel &amp;phase) const</arglist>
    </member>
    <member kind="function">
      <type>const phasePair &amp;</type>
      <name>pair</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a60f8f25557242f42e8f3fcfcf05b4066</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const orderedPhasePair &amp;</type>
      <name>pair1In2</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a57acd89c36609b30607532e9d5963b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const orderedPhasePair &amp;</type>
      <name>pair2In1</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a7933fa8b67ce5cff99f45e183893cf34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a309de8d77b1b6bc71272d02fd018be3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a7ccfa750ea7a0623efe7790b5cfc955d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>dgdt</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a5d6dfe79f74902f2f39245ebee7ee143</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>dgdt</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>acd8c71f42e894434170427a613ea4a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt; &amp;</type>
      <name>pPrimeByA</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>a7890c3eaebf550c6caf7706678ca2199</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::uniform</name>
    <filename>a02172.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02172.html</anchorfile>
      <anchor>ac6db16878b991f0c033aa693d16e804d</anchor>
      <arglist>(&quot;uniform&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uniform</name>
      <anchorfile>a02172.html</anchorfile>
      <anchor>ac561847e384f201ac93f7f11fd889721</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~uniform</name>
      <anchorfile>a02172.html</anchorfile>
      <anchor>acc576355220747307ccd5b343af2e7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a02172.html</anchorfile>
      <anchor>aa699955fa82d81b8bae2a63e1e80ee75</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mDMass</name>
      <anchorfile>a02172.html</anchorfile>
      <anchor>a1e2673712babed9c93a6d6a1b9a23979</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateMomentAdvection</name>
    <filename>a01948.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a922fedbd9a4fa76566799abd43f071ca</anchor>
      <arglist>(&quot;univariateMomentAdvection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>ae1c81933db93afedd28547a8063026e3</anchor>
      <arglist>(autoPtr, univariateMomentAdvection, dictionary,(const dictionary &amp;dict, const scalarQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support),(dict, quadrature, phi, support))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentAdvection</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>aa0f6e93c6f7507cc74e643c7344d7d4c</anchor>
      <arglist>(const dictionary &amp;dict, const scalarQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentAdvection</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a06933c1e24fc5e547f05e4195414108e</anchor>
      <arglist>(const univariateMomentAdvection &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariateMomentAdvection</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>af7558438bb9fa34ba37ed51735b3a2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mappedPtrList&lt; volScalarField &gt; &amp;</type>
      <name>divMoments</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a657fc32e087e33934469052e854b2376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>ab0c8adedd5f18133f3b1ec3e7757b6fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a99b02345a8a15d3c5ea2844a2253f510</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a89ba8d54a3834a5a40bfdd29e7a920ed</anchor>
      <arglist>(const univariateMomentAdvection &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; univariateMomentAdvection &gt;</type>
      <name>New</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a68cd3a4d8a34e54240715eef5c2b0806</anchor>
      <arglist>(const dictionary &amp;dict, const scalarQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>word</type>
      <name>fieldName</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a982c9ac6d4c9cdb82a568ff9d0a3dee2</anchor>
      <arglist>(const word &amp;name, const labelList &amp;order) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const volScalarMomentFieldSet &amp;</type>
      <name>moments_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>ad13270493160a356f4c8d979a8b5be28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mappedPtrList&lt; volScalarField &gt;</type>
      <name>divMoments_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>ae49cb1473e13cce2ba9f9c782cfb5e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>own_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>ac6ebab407edaa9fb1bf07c163e389b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>nei_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>af8b04d4daaf16b8ad52708b54b311c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const surfaceScalarField &amp;</type>
      <name>phi_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a5828da03a859a3aaa358802cd2daf505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nDimensions_</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>a63b7139626299621e608e4a07a0def92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateMomentInversion</name>
    <filename>a02012.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ab4091ef353bbb2f6fc1c9b8bf3bb06ca</anchor>
      <arglist>(&quot;univariateMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>aaa5ab95e25966fa246062df7260976a9</anchor>
      <arglist>(autoPtr, univariateMomentInversion, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentInversion</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a2f27635231d56cc368aaa0f2cbdbf8e6</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentInversion</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a5af4b5db9b7a2c2e61ec51e8cd4ff317</anchor>
      <arglist>(const univariateMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariateMomentInversion</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a3d81ad6e9bef5d0e56c866331fea31a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a5b1a824ce74e64ee48d854d74ac8a305</anchor>
      <arglist>(univariateMomentSet &amp;moments)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>abc58435d4d523225c2de1f627315e1e5</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>af2d72953108395e48c42760a2f79fa5b</anchor>
      <arglist>(univariateMomentSet &amp;moments, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>abscissae</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ae0c0ecb6c68642dc0448c8786e362c78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nNodes</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a5d71c3a12ed6b1f5163a8e9fe14d942d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>weights</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a6068a77b43a6e9cfc3ec783469ca25cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a5a4de0c6afff6c0256a40e35415d6a9d</anchor>
      <arglist>(const univariateMomentInversion &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; univariateMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ad4fa6d0402a347ca7a48217bbebed6af</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>JacobiMatrix</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a7e65cdc9e809cd6a315bb1cc38135e3c</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarSquareMatrix &amp;z, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nInvertibleMoments_</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a042d2903aac945d2246df06b46bb8a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nNodes_</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ac0005b63850c8da82cb91f341a25ffd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>abscissae_</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a0bfebb14fe9a3d5c7a1293f6d92d1bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>weights_</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>af51ecc158e56aaae1fc774d6658e9b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateMomentSet</name>
    <filename>a02052.html</filename>
    <base>Foam::momentSet</base>
    <member kind="function">
      <type></type>
      <name>univariateMomentSet</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>ad00a756f64fc3a916ed12a28311ca0d8</anchor>
      <arglist>(const label nMoments, const word &amp;support, const scalar initValue=0, const label nFixedQuadraturePoints=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentSet</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>ad0210e9bd66f7a47538343809c285336</anchor>
      <arglist>(const scalarList &amp;m, const word &amp;support, const label nFixedQuadraturePoints=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariateMomentSet</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a1d22df074ca1399584587efd06cc562a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>alphaRecurrence</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>aedcf98c3aba901c54a0670c1297fbc8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>alphaRecurrence</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a5d692f80be2fae779e373513e263b6e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>betaRecurrence</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a7bc4a779c251dbf7190549724ef3c25e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>betaRecurrence</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a763a9605b171b40abbf64f0c13054dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>zetas</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a0553d9237ac569e5d66c666ae9ec8e64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a3049a5df266d0671853f077acf4c6975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullyRealizable</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a1955fd1ee1096cb91e27063baf97c4d4</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRealizable</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a58730b945c36dd3aa5042e95e1e9f098</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubsetRealizable</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a98ab2e587e2ae018f1c7b23a4a20168e</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnMomentSpaceBoundary</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a54a602fe9e0f6b808bf432ed0326ac46</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>labelListList</type>
      <name>makeUnivariateMomentOrders</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a89dcca1993079c88c25b07742cfd3abe</anchor>
      <arglist>(const label nMoments)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nRealizableMoments</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a2256488242f928209215b0a3221f6bb8</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>negativeZeta</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>ad8d84fb4b21bf63cdbb2b4ffff7b79cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>ab2d663e44a31918ddbad847b7894b995</anchor>
      <arglist>(const scalarList &amp;weights, const scalarList &amp;abscissae)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>abd2fbc37162daff20a5f217555a9f249</anchor>
      <arglist>(const label index) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a10a23068afc4374354b71724b9f334f9</anchor>
      <arglist>(const label index)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a64b0dbe27cb05cde3a1f3a22c882f35d</anchor>
      <arglist>(const label momentOrder) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>af09bfee193fa91a3c914671489f0347f</anchor>
      <arglist>(const label momentOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>ae697ea15032f01f89988bb8ada677832</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a3eb74b6b9f8c1346a09c49e3eade797c</anchor>
      <arglist>(const label newSize)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>realizabilityChecked_</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>ae90397e9f5eb1ce2b969b6223f3f1ab9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::univariatePDFTransportModel</name>
    <filename>a02060.html</filename>
    <base>Foam::PDFTransportModel</base>
    <member kind="function">
      <type></type>
      <name>univariatePDFTransportModel</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>ac76f0af150281544efbb317164c0075e</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const fvMesh &amp;mesh, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariatePDFTransportModel</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a7c2fb39b317ec861cc76f8a047fb2e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalarQuadratureApproximation &amp;</type>
      <name>quadrature</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>ab2236aaf0d12144c3879bf868e8eb5b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitMomentSource</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>ad9e45f5e26d41497ff42ff3a0787ce3e</anchor>
      <arglist>(const volScalarMoment &amp;moment)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>explicitMomentSource</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>aa04ab8d92ff8a7a65fc032e3785b894e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>solveMomentSources</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a0afcad7fc7f103d434dcc82e9f7ea9e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>solveMomentOde</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a6406128435a7285b9bb89736c76a17b9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarQuadratureApproximation</type>
      <name>quadrature_</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a361a5db58115527d309f685e0d9d3866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; univariateMomentAdvection &gt;</type>
      <name>momentAdvection_</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a26f0b04ce1fad57c9087a9186754623b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariatePDFTransportModel</name>
    <filename>a02904.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModels::univariatePopulationBalance</name>
    <filename>a02924.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::populationBalanceModels::univariatePopulationBalance</name>
    <filename>a02224.html</filename>
    <base>Foam::PDFTransportModels::univariatePDFTransportModel</base>
    <base>Foam::populationBalanceModel</base>
    <base protection="private">realizableOdeSolver&lt; volScalarMoment, volScalarNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>af984ca0b0b3be9ec6415ab5bc376f666</anchor>
      <arglist>(&quot;univariate&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariatePopulationBalance</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>ad103b4043b4f3e91b86ab100eb3705f9</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariatePopulationBalance</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>a91b7874c9f1109a0de2aa5366cb493cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readIfModified</name>
      <anchorfile>a02224.html</anchorfile>
      <anchor>ab3005060b61f06fc4dcee23a2597d20c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::VakhrushevEfremov</name>
    <filename>a02340.html</filename>
    <base>Foam::aspectRatioModel</base>
    <base>Foam::aspectRatioModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a5aab66d86d4ca62a3b027e96b8b98bf6</anchor>
      <arglist>(&quot;VakhrushevEfremov&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VakhrushevEfremov</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>ade76af5df6029c43099adbb1795071ce</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VakhrushevEfremov</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a14a9c4cbfa1918b639f08068c7f5d6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a7adbc789902978053017ef7a87189551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a5aab66d86d4ca62a3b027e96b8b98bf6</anchor>
      <arglist>(&quot;VakhrushevEfremov&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VakhrushevEfremov</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>ade76af5df6029c43099adbb1795071ce</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VakhrushevEfremov</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a14a9c4cbfa1918b639f08068c7f5d6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02340.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::VakhrushevEfremov</name>
    <filename>a02956.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::Vandermonde</name>
    <filename>a02260.html</filename>
    <member kind="function">
      <type></type>
      <name>Vandermonde</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>ad67ccfbb9cade9e7a4af8af247cbc760</anchor>
      <arglist>(const scalarDiagonalMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vandermonde</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>aa269448837b597fdbbc600d30d0ee801</anchor>
      <arglist>(const scalarSquareMatrix &amp;A, const bool checkVandermonde=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vandermonde</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>a56ad6e00f00ff1794e13eac202ba81dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>a0501062a3550e6d046dd2dca738ecfa1</anchor>
      <arglist>(scalarDiagonalMatrix &amp;x, const scalarDiagonalMatrix &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>scalarSquareMatrix</type>
      <name>inv</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>a41f917babb4e3753f9e48b975cb03b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalarSquareMatrix</type>
      <name>operator()</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>a5abda4d7d3085503b1326c880f77ad36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>operator()</name>
      <anchorfile>a02260.html</anchorfile>
      <anchor>aaed018d61a33bd73175c5c1fc3a6fd84</anchor>
      <arglist>(label i, label j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::vdfPhaseModel</name>
    <filename>a02832.html</filename>
    <base>Foam::phaseModel</base>
    <member kind="function">
      <type></type>
      <name>vdfPhaseModel</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a806ac3a3127694a50d4c04d22cd7eda4</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const word &amp;phaseName)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; vdfPhaseModel &gt;</type>
      <name>clone</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a2b503bc999999a31bd17ac561baa32a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~vdfPhaseModel</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a88afa3990646740eff526f4d23b110de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nNodes</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a5fe0d579a26ebb7a0f23dc35b045239d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>volumeFraction</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a5ca57ae67d43e34f8f3472785f1f8719</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>d</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>aa584bcce4a5f905f36cef1ff16995f14</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a581eca4f4b428164ba2f19e875b0ceba</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a045624d06cfcde894aff0c754b12ca29</anchor>
      <arglist>(const label nodei=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Vs</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a759a82061162463c79c3a6cea0819e42</anchor>
      <arglist>(const label nodei=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae8a6a52bab503db0773e00628a8eb950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>relativeTransport</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a98b8459f24c250f47616cdc5ce2f708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>averageTransport</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>af2ee20db7d0685b624a286bc5f1a4fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solveSource</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a93fa749aa27e28c20bd5248c6e3d55fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae5c686d8699230a237bb9778c098257f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a232a98d1b1c5c31da6b51168026417c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a685ecdb3d2dea6bff122925304fd6652</anchor>
      <arglist>(const bool readOK)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>sizeTypeEnum</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>length</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550aa7970bb5f1149f16a82922773632ebe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volume</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550a627ba5be940770a536a66f655349e97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>mass</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550afe1b18e2fd39f763316753b044fbdb78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>momentSetTypeEnum</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volumeFractionLength</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca8e51580fc19f34cf715953a4ec357e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volumeFractionVolume</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca9a388c11ade69472d6c75455aa57c0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volumeFractionMass</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca753e7b246f0d5fea809e60494e99ecc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberDensityLength</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca5900004978303621c27f35331a2d25d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberDensityVolume</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca839ee41e2082fd0bbe54c8c5d960711e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberDensityMass</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca703197cd8b6c8bde5402de4105f2fe7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>length</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550aa7970bb5f1149f16a82922773632ebe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volume</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550a627ba5be940770a536a66f655349e97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>mass</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ada0e9827adfe2fa887bc341255308550afe1b18e2fd39f763316753b044fbdb78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volumeFractionLength</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca8e51580fc19f34cf715953a4ec357e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volumeFractionVolume</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca9a388c11ade69472d6c75455aa57c0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>volumeFractionMass</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca753e7b246f0d5fea809e60494e99ecc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberDensityLength</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca5900004978303621c27f35331a2d25d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberDensityVolume</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca839ee41e2082fd0bbe54c8c5d960711e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberDensityMass</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae7b21aa9cadd52f33136e26fd5d30abca703197cd8b6c8bde5402de4105f2fe7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOdictionary</type>
      <name>pbeDict_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a46a745033d2fa3f0b9cf2adabbe04088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ae345e94a2467fd83802b93647876c0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>velocityQuadratureApproximation &amp;</type>
      <name>quadrature_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a8008fbe3b18240eb250d2803a5a3494c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>volumeFractions_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a2399c843896bbde63e9b87076404d557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>computeVariance_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>ad16de5210c24cfa518528efc19e5b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; volTensorField &gt;</type>
      <name>sigma_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a29a9faf2e14381df4336dc9659a21141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Theta_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>aec5cb67a0d5284e5acbdab2c2bc28ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>minD_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a0ab4993534a21c99f2b95e8a1e746320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>sizeIndex_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a7846c8b26f4e52a4939c0e77e8c8c362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>momentSetType_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a57aa54d8f00f54d1945f168f6a733e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m0VolumeFraction_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a0248b6b0fa6334441f77d58261872331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>sizeType_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>acacff93de0c76658b92e085aff505ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>volumeFractionMoment_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a26e0ebf2ec49ce08e7cd54259407110e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>sizeMoment_</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a238aac50b306ad6272faa19f664a654d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::velocity</name>
    <filename>a02856.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>ab72aac177b102be6ff595c5bf9119c80</anchor>
      <arglist>(&quot;velocity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>velocity</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>ab22038ef942b189a1b351d38629e7d7a</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentsOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~velocity</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>a485b1e40fbf2994733ca1a86a1a59022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>a37dae16347e7b02df93a34b5d02466f1</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>a135ad6906ed8cd07385bd3578c5026cb</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>a5708950b309ed94dc9f0bf223cb46533</anchor>
      <arglist>(const label patchi, const label facei)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::velocityMomentAdvection</name>
    <filename>a01964.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ae0e524d67df20a9362cde2b07638ec27</anchor>
      <arglist>(&quot;velocityMomentAdvection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ad740e31e51914cbe654a5c516040e144</anchor>
      <arglist>(autoPtr, velocityMomentAdvection, dictionary,(const dictionary &amp;dict, const velocityQuadratureApproximation &amp;quadrature, const word &amp;support),(dict, quadrature, support))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>velocityMomentAdvection</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a331d6fae72ac100d7488fc965770f637</anchor>
      <arglist>(const dictionary &amp;dict, const velocityQuadratureApproximation &amp;quadrature, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>velocityMomentAdvection</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abea675a460e10bf7d63009c333f1ea1b</anchor>
      <arglist>(const velocityMomentAdvection &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~velocityMomentAdvection</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a37a3bf65dc7c7e80b380ad298c7f1950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volScalarField &gt; &amp;</type>
      <name>divMoments</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ab69773c0bf5c0b76cfe4e35914d6ad1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ab0c8adedd5f18133f3b1ec3e7757b6fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a7bd34de7b328e6a62310a7b62c856007</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a99b02345a8a15d3c5ea2844a2253f510</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>afae1f9f7d906a3c157ea649153a56da9</anchor>
      <arglist>(const surfaceScalarField &amp;U, const bool wallCollisions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a4a8d53197d24b20bb4be35f7d941f923</anchor>
      <arglist>(const mappedPtrList&lt; volVectorField &gt; &amp;Us, const bool wallCollisions)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a831df9790b6096b33f6e63b94b5e9da6</anchor>
      <arglist>(const velocityMomentAdvection &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; velocityMomentAdvection &gt;</type>
      <name>New</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a6ae4cd4f219e8c74a9f26a5ab0252a50</anchor>
      <arglist>(const dictionary &amp;dict, const velocityQuadratureApproximation &amp;quadrature, const word &amp;support)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateWallCollisions</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>af54b0be4933924edab5d5a8c8530f886</anchor>
      <arglist>(const PtrList&lt; volVelocityNode &gt; &amp;nodes, PtrList&lt; surfaceVelocityNode &gt; &amp;nodesOwn, PtrList&lt; surfaceVelocityNode &gt; &amp;nodesNei)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const volVelocityMomentFieldSet &amp;</type>
      <name>moments_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>aa460d3ce582620afed8e89d5a3ae19dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>own_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ac6ebab407edaa9fb1bf07c163e389b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>nei_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>af8b04d4daaf16b8ad52708b54b311c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; surfaceInterpolationScheme&lt; scalar &gt; &gt;</type>
      <name>weightOwnScheme_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a3a3d0093f9cd66c7a1d28d9c41583b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; surfaceInterpolationScheme&lt; scalar &gt; &gt;</type>
      <name>weightNeiScheme_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ab4d1bd8cd86c588c051d6b3667944204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; surfaceInterpolationScheme&lt; scalar &gt; &gt;</type>
      <name>scalarAbscissaeOwnScheme_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>aca9d0473277613330aff938e4a16c262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; surfaceInterpolationScheme&lt; scalar &gt; &gt;</type>
      <name>scalarAbscissaeNeiScheme_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a435d5a632961ccad09d126a73b032d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; surfaceInterpolationScheme&lt; vector &gt; &gt;</type>
      <name>velocityAbscissaeOwnScheme_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a32214bf6a3e0f019854200e24aeccd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tmp&lt; surfaceInterpolationScheme&lt; vector &gt; &gt;</type>
      <name>velocityAbscissaeNeiScheme_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a8ab0f594e720a5c681623c1f4d5483e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ab0e2d1fe30234c743b258634abc400a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>nodeIndexes_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>aec0f577b156be3134122bb2d727cf45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>divMoments_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a2077495efed6bdb534dda0e84dd2cbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>fixedWalls_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a1905108c7247c86189accd986fbf0642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>wallTemperatures_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a54ceae0cabb658a7a437b1ed22f91349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>ew_</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a433f44cd5ca6f3f506ad6c26ea33a6e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::velocityPDFTransportModel</name>
    <filename>a02064.html</filename>
    <base>Foam::PDFTransportModel</base>
    <member kind="function">
      <type></type>
      <name>velocityPDFTransportModel</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ae44a248d2c50d3666f35e48e4288733c</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const fvMesh &amp;mesh, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~velocityPDFTransportModel</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a93e88e33faeff930d90895762db106d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const velocityQuadratureApproximation &amp;</type>
      <name>quadrature</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a182d17433b88b32ae946865a6d10599d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateImplicitMomentSource</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a952834cfbeea5f214c3f943a21a28e40</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitMomentSource</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ac8b3c04aa1debff4844017f3195e3099</anchor>
      <arglist>(const volVelocityMoment &amp;moment)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>explicitMomentSource</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa04ab8d92ff8a7a65fc032e3785b894e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>solveMomentSources</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a0afcad7fc7f103d434dcc82e9f7ea9e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>solveMomentOde</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a6406128435a7285b9bb89736c76a17b9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>velocityQuadratureApproximation</type>
      <name>quadrature_</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab475ee95b26fe6da9baaa60671c55c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; velocityMomentAdvection &gt;</type>
      <name>momentAdvection_</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>af9c68aa74df8a0ac7d9bae51fa2aeb16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::velocityPDFTransportModel</name>
    <filename>a02908.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::populationBalanceModels::velocityPopulationBalance</name>
    <filename>a02228.html</filename>
    <base>Foam::PDFTransportModels::velocityPDFTransportModel</base>
    <base>Foam::populationBalanceModel</base>
    <base>realizableOdeSolver&lt; volVelocityMoment, volVelocityNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>ab72aac177b102be6ff595c5bf9119c80</anchor>
      <arglist>(&quot;velocity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>velocityPopulationBalance</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a3db2f96f272b9c5f2f19abec5bf949bc</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~velocityPopulationBalance</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a3df793b4a36064fc963fa7704a41292d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>CoNum</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>ab99961f39048a62a24dfa4d50a1d9ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readIfModified</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>ab3005060b61f06fc4dcee23a2597d20c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>realizableOdeSolver&lt; volVelocityMoment, volVelocityNode &gt;</type>
      <name>odeType</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a7cb4af65743aca906d1eddf51e00b86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateImplicitMomentSource</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>aec547115dbf63090449efdaa41d643b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitMomentSource</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>ae6522a34391d10dfaa89922f05c5a9a0</anchor>
      <arglist>(const volVelocityMoment &amp;moment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>explicitMomentSource</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a85b0ae2fdf7934eb3a8fda32f8795fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>solveMomentSources</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>af0add224fe4975da357ab7a65b82280f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>solveMomentOde</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a9b3ec265fbac33bccf73f9b13271adbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCellMomentSource</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a3ccc55047e7795883a32ee101ac3817b</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual scalar</type>
      <name>cellMomentSource</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a603b9bd9f805b06549a298e6523d966e</anchor>
      <arglist>(const labelList &amp;momentOrder, const label celli, const velocityQuadratureApproximation &amp;quadrature, const label enviroment=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Switch</type>
      <name>collision_</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>ae3b7d9602ddc6122cfe1a8f04cfd9dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; Foam::populationBalanceSubModels::collisionKernel &gt;</type>
      <name>collisionKernel_</name>
      <anchorfile>a02228.html</anchorfile>
      <anchor>a694cfca12032791c4af24ade90311619</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModels::velocityPopulationBalance</name>
    <filename>a02920.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::velocityQuadratureNode</name>
    <filename>a02248.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Foam::quadratureNode</base>
    <class kind="class">Foam::velocityQuadratureNode::iNew</class>
    <member kind="function">
      <type></type>
      <name>velocityQuadratureNode</name>
      <anchorfile>a02248.html</anchorfile>
      <anchor>af91117e6ec7d7a542542bfe2fb00776a</anchor>
      <arglist>(const word &amp;name, const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const PtrList&lt; dimensionSet &gt; &amp;abscissaDimensions, const wordList &amp;boundaryTypes, const bool extended=false, const label nSecondaryNodes=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>velocityQuadratureNode</name>
      <anchorfile>a02248.html</anchorfile>
      <anchor>a4d0b539049be847cb74be0a769ad0ee1</anchor>
      <arglist>(const word &amp;name, const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const PtrList&lt; dimensionSet &gt; &amp;abscissaDimensions, const bool extended=false, const label nSecondaryNodes=0)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; velocityQuadratureNode&lt; scalarType, vectorType &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>a02248.html</anchorfile>
      <anchor>a570a39462760c516ca830097bb105fd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~velocityQuadratureNode</name>
      <anchorfile>a02248.html</anchorfile>
      <anchor>a5693994e4a3a42abe4e39e800b8e8090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const vectorType &amp;</type>
      <name>velocityAbscissae</name>
      <anchorfile>a02248.html</anchorfile>
      <anchor>af1246788ffe9fb394b0c4095f2322d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vectorType &amp;</type>
      <name>velocityAbscissae</name>
      <anchorfile>a02248.html</anchorfile>
      <anchor>a18e2396e6b02531d1de411179e11fa5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::velocityAdvection::VikasQuasiSecondOrder</name>
    <filename>a01968.html</filename>
    <base>Foam::velocityAdvection::firstOrderKinetic</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01968.html</anchorfile>
      <anchor>adbb2a33528814a56781ed3bf761af38a</anchor>
      <arglist>(&quot;Vikas&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VikasQuasiSecondOrder</name>
      <anchorfile>a01968.html</anchorfile>
      <anchor>a1b63a59bc5a8b5eb981273cba2987d9e</anchor>
      <arglist>(const dictionary &amp;dict, const velocityQuadratureApproximation &amp;quadrature, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VikasQuasiSecondOrder</name>
      <anchorfile>a01968.html</anchorfile>
      <anchor>aaabfb60f35a47191fc94543daad06bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01968.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateNodes</name>
      <anchorfile>a01968.html</anchorfile>
      <anchor>aee1fc78125838d352f1209c771319fe7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::VikasQuasiSecondOrder</name>
    <filename>a02892.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModel</name>
    <filename>a02560.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>af034dba881d47fe5ed61842254c7c908</anchor>
      <arglist>(&quot;virtualMassModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a66597c44c1818d3a373a9165df0125f2</anchor>
      <arglist>(autoPtr, virtualMassModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject),(dict, pair, registerObject))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>virtualMassModel</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>ad4522f0c8070d7390b8b6f99036c251a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~virtualMassModel</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a6a14c57de6b037531d91d65e1a360372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a064070722e0a66ec20a9214067171b3b</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>aa8035092d352bc4d77626b7132e69928</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a6a9b9c581fa49fd06c6bb8b16d0adcb5</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>af5baff0849cf8745b27a4f9c2973811f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a123a2f0759e7cd4e8d0092806b4b71b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a5ee445a07b37d6697e74b5a59bfb6e50</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a5bda2bd8bcc2018ba9c901aa8fd7bd6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeData</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a4c658e15d7e8f5819cdc0eedbbbeb85e</anchor>
      <arglist>(Ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>af034dba881d47fe5ed61842254c7c908</anchor>
      <arglist>(&quot;virtualMassModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a66597c44c1818d3a373a9165df0125f2</anchor>
      <arglist>(autoPtr, virtualMassModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject),(dict, pair, registerObject))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>virtualMassModel</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>ad4522f0c8070d7390b8b6f99036c251a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~virtualMassModel</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a6a14c57de6b037531d91d65e1a360372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a064070722e0a66ec20a9214067171b3b</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a6a9b9c581fa49fd06c6bb8b16d0adcb5</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a34b6b999f0deb01e4b97b9ab8ca7e9ec</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a5ee445a07b37d6697e74b5a59bfb6e50</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeData</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a4c658e15d7e8f5819cdc0eedbbbeb85e</anchor>
      <arglist>(Ostream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; virtualMassModel &gt;</type>
      <name>New</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>af6db7b8775ec18e56eb3c961c1be3866</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; virtualMassModel &gt;</type>
      <name>New</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>af6db7b8775ec18e56eb3c961c1be3866</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimK</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a2c84e5d26057962c2f78708f5d34e15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02560.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModel</name>
    <filename>a02748.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>ac0e08eba1e7a69731b23fbe94d2d9aa7</anchor>
      <arglist>(&quot;viscosityModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>a2e005a35b2baf18bc6ae67d59abc39e8</anchor>
      <arglist>(autoPtr, viscosityModel, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>viscosityModel</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>a67b2e2df07af44cb61c2c8c7eafeb52b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>viscosityModel</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>a73fbebd9c22cac818800c05ddaed5bf3</anchor>
      <arglist>(const viscosityModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~viscosityModel</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>aa3453f72f3e991f44922b1ccffde8c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>ac62e58d07520a8a36aa7345d338b87e1</anchor>
      <arglist>(const phaseModel &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>a8232254373d9111805accb1ee5aa9b36</anchor>
      <arglist>(const viscosityModel &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; viscosityModel &gt;</type>
      <name>New</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>a8e424f01eae19c718d22a9268198f8f8</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a02748.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::viscosityModel</name>
    <filename>a03060.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::wallDamped</name>
    <filename>a02500.html</filename>
    <base>Foam::liftModel</base>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a46fd1adac291507d2452ff03c5e76b6d</anchor>
      <arglist>(&quot;wallDamped&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDamped</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a82eda525b84042ddc79e5b81340f3267</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDamped</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a08bdf195425b77f0da3c3ee37601e253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a7d1c3b49efcebbcbdc45cb61df4fc74d</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a46fd1adac291507d2452ff03c5e76b6d</anchor>
      <arglist>(&quot;wallDamped&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDamped</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a82eda525b84042ddc79e5b81340f3267</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDamped</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a08bdf195425b77f0da3c3ee37601e253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>af4c1e8160947ce066a26b7c9112bfaad</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a7d1c3b49efcebbcbdc45cb61df4fc74d</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02500.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModel</name>
    <filename>a02588.html</filename>
    <base>Foam::wallDependentModel</base>
    <base>Foam::wallDependentModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>acad43cfacac9b1eed5c8603c270d7dd3</anchor>
      <arglist>(&quot;wallDampingModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a8fcdf22aa1bae8cf1c4eb45137df167d</anchor>
      <arglist>(autoPtr, wallDampingModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDampingModel</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>ad47fb06fd0cfd9a462db504f47c8080f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDampingModel</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a9866fa0b8b2da0a0629c4a6e35e46314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a21bb8967dd3305e2ae5915454b62582b</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a50c4ff917a44a9e4cac3accbdac9d66b</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a705f06c3e6eb543ddf513dbab3ff1ae8</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>acad43cfacac9b1eed5c8603c270d7dd3</anchor>
      <arglist>(&quot;wallDampingModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a8fcdf22aa1bae8cf1c4eb45137df167d</anchor>
      <arglist>(autoPtr, wallDampingModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDampingModel</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>ad47fb06fd0cfd9a462db504f47c8080f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDampingModel</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a9866fa0b8b2da0a0629c4a6e35e46314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a21bb8967dd3305e2ae5915454b62582b</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a50c4ff917a44a9e4cac3accbdac9d66b</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a705f06c3e6eb543ddf513dbab3ff1ae8</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; wallDampingModel &gt;</type>
      <name>New</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a43e188f0899ebe6a4d69f540c9a59f4b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; wallDampingModel &gt;</type>
      <name>New</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a43e188f0899ebe6a4d69f540c9a59f4b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>ae080efa852cff98918608f047c337d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02588.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDependentModel</name>
    <filename>a02592.html</filename>
    <member kind="function">
      <type></type>
      <name>wallDependentModel</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>a89eebd55d6bf5c29f8add1a9c7c60233</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDependentModel</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>a792e7d49a7c51c9e4f6c7c9ecba91c21</anchor>
      <arglist>(const wallDependentModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDependentModel</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>afc9fbc8fc5a704065f9e392563be0f0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>yWall</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>a7309dd20f3f8f1b057f5ed0a82e3cdac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>nWall</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>abbd4e9b304ac9f4c6d3059a116923833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>ac8d9447ed92d3fc9b6aaa9f7db52c428</anchor>
      <arglist>(const wallDependentModel &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDependentModel</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>a89eebd55d6bf5c29f8add1a9c7c60233</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDependentModel</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>a792e7d49a7c51c9e4f6c7c9ecba91c21</anchor>
      <arglist>(const wallDependentModel &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDependentModel</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>afc9fbc8fc5a704065f9e392563be0f0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>yWall</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>a7309dd20f3f8f1b057f5ed0a82e3cdac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>nWall</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>abbd4e9b304ac9f4c6d3059a116923833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02592.html</anchorfile>
      <anchor>ac8d9447ed92d3fc9b6aaa9f7db52c428</anchor>
      <arglist>(const wallDependentModel &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModel</name>
    <filename>a02612.html</filename>
    <base>Foam::wallDependentModel</base>
    <base>Foam::wallDependentModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a3097f0aed9c403b37776181e42f20a26</anchor>
      <arglist>(&quot;wallLubricationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>aed5de38b76957d7ad77521cdf79a9906</anchor>
      <arglist>(autoPtr, wallLubricationModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallLubricationModel</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a6ab1fb1094eae3fcb9312cbccb86a987</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallLubricationModel</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a741b1452a9056a3b7da3a68c382f2883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a6706dae3a5c7df22ee98b3d3308d1a1c</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a3097f0aed9c403b37776181e42f20a26</anchor>
      <arglist>(&quot;wallLubricationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>aed5de38b76957d7ad77521cdf79a9906</anchor>
      <arglist>(autoPtr, wallLubricationModel, dictionary,(const dictionary &amp;dict, const phasePair &amp;pair),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallLubricationModel</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a6ab1fb1094eae3fcb9312cbccb86a987</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallLubricationModel</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a741b1452a9056a3b7da3a68c382f2883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a6706dae3a5c7df22ee98b3d3308d1a1c</anchor>
      <arglist>(const label, const label) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a5a1e48210fa442af91a66ce0bc111eb6</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>ac98aaee2fdc48b541858d9de563b8b6b</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; wallLubricationModel &gt;</type>
      <name>New</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a20b8addd6b1958cab7b8712ecbe67207</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; wallLubricationModel &gt;</type>
      <name>New</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a20b8addd6b1958cab7b8712ecbe67207</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>ae080efa852cff98918608f047c337d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>zeroGradWalls</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>aecb61521d12dc7d19388e9bbbc1cb9ba</anchor>
      <arglist>(tmp&lt; volVectorField &gt;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>zeroGradWalls</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>aecb61521d12dc7d19388e9bbbc1cb9ba</anchor>
      <arglist>(tmp&lt; volVectorField &gt;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a02612.html</anchorfile>
      <anchor>a6d3dc5deb1044bd94f5c4351c6220c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::weightsAndAbscissae</name>
    <filename>a02860.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>ac700992118ba0b92b222db17f572e5e8</anchor>
      <arglist>(&quot;weightsAndAbscissae&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>weightsAndAbscissae</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>a5370d139b0a5f08417fd8687d4216dba</anchor>
      <arglist>(const fvMesh &amp;mesh, const dictionary &amp;dict, const labelListList &amp;momentsOrders, const label nNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~weightsAndAbscissae</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>a30eac4d9699c8a485d61ae9bc47987cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>a37dae16347e7b02df93a34b5d02466f1</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>a135ad6906ed8cd07385bd3578c5026cb</anchor>
      <arglist>(const label celli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMoments</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>a5708950b309ed94dc9f0bf223cb46533</anchor>
      <arglist>(const label patchi, const label facei)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::Wellek</name>
    <filename>a02344.html</filename>
    <base>Foam::aspectRatioModel</base>
    <base>Foam::aspectRatioModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a1d49d0dbd35da09d5d7787cf12fcce67</anchor>
      <arglist>(&quot;Wellek&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wellek</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a9636e6a11a60ed15222181bbf2b210c3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Wellek</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>ae0253b67464bd0dcd5397ca371faa272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a7adbc789902978053017ef7a87189551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a1d49d0dbd35da09d5d7787cf12fcce67</anchor>
      <arglist>(&quot;Wellek&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wellek</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a9636e6a11a60ed15222181bbf2b210c3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Wellek</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>ae0253b67464bd0dcd5397ca371faa272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a02344.html</anchorfile>
      <anchor>a9a3f7a7074462c93a6b4713717652c4a</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::WenYu</name>
    <filename>a02472.html</filename>
    <base>Foam::dragModel</base>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a869ff6d94ba360fbe59270e9e22af04e</anchor>
      <arglist>(&quot;WenYu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WenYu</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a33abcf0d65e93cedc71714dd3db81cd2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WenYu</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>af9fc4daf49db2977d3490175191690c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a878c585f4fb1cd4bbe41fba5c56dec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a869ff6d94ba360fbe59270e9e22af04e</anchor>
      <arglist>(&quot;WenYu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WenYu</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a33abcf0d65e93cedc71714dd3db81cd2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WenYu</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>af9fc4daf49db2977d3490175191690c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a02472.html</anchorfile>
      <anchor>a3082958d6afbbfe499a77def7279ee06</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateAdvection::zeta</name>
    <filename>a01952.html</filename>
    <base>Foam::univariateMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a7114c2f3d02cd6865ec5e6f05de73b5c</anchor>
      <arglist>(&quot;zeta&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>zeta</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>ad1f4fa41c7bb320c21a9e814750ad8d9</anchor>
      <arglist>(const dictionary &amp;dict, const scalarQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~zeta</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>ae5e0d10ed48b4a3daaa8e1fa571651a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a7e02c1a350fcf9ac17189e6b20c656bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>countFacesWithOutgoingFlux</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a8f7211cddf3661038d4eadb0a5015d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>limiter</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a5758241c9b969d6b3a1a96971aaf3e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateFields</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a2ff1f21f64db3ca3c70b31e7c3a15025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>limitZetas</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a57ca278410d45b803a532bfc4a1e99e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::zeta</name>
    <filename>a02888.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::Zuber</name>
    <filename>a02564.html</filename>
    <base>Foam::virtualMassModel</base>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>a628f94d72da54c847476fca7f9e43862</anchor>
      <arglist>(&quot;Zuber&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zuber</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>ab4201d130831189771d33335e0f1d13c</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Zuber</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>acd4235d62382e5a64b7b20e7a58921a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>a44448421a9a019b82ba27811e9c5f40c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>a628f94d72da54c847476fca7f9e43862</anchor>
      <arglist>(&quot;Zuber&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zuber</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>ab4201d130831189771d33335e0f1d13c</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Zuber</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>acd4235d62382e5a64b7b20e7a58921a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a02564.html</anchorfile>
      <anchor>a4832ff8d7844b7aa56132dd2483562ef</anchor>
      <arglist>(const label, const label) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam</name>
    <filename>a01814.html</filename>
    <namespace>Foam::aspectRatioModels</namespace>
    <namespace>Foam::blendingMethods</namespace>
    <namespace>Foam::breakupKernels</namespace>
    <namespace>Foam::bubbleBreakupKernels</namespace>
    <namespace>Foam::bubblePressureModels</namespace>
    <namespace>Foam::ButcherTables</namespace>
    <namespace>Foam::coalescenceEfficiencyKernels</namespace>
    <namespace>Foam::coalescenceFrequencyKernels</namespace>
    <namespace>Foam::dragModels</namespace>
    <namespace>Foam::fluxFunctions</namespace>
    <namespace>Foam::fv</namespace>
    <namespace>Foam::heatTransferModels</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::liftModels</namespace>
    <namespace>Foam::mixingModels</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
    <namespace>Foam::multivariateMomentInversions</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::populationBalanceModels</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::RASModels</namespace>
    <namespace>Foam::swarmCorrections</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
    <namespace>Foam::univariateAdvection</namespace>
    <namespace>Foam::velocityAdvection</namespace>
    <namespace>Foam::virtualMassModels</namespace>
    <namespace>Foam::wallDampingModels</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
    <class kind="class">Foam::AGmomentTransportModel</class>
    <class kind="class">Foam::anisotropicGaussian</class>
    <class kind="class">Foam::aspectRatioModel</class>
    <class kind="class">Foam::AUSM</class>
    <class kind="class">Foam::AUSMPlus</class>
    <class kind="class">Foam::basicFieldMomentInversion</class>
    <class kind="class">Foam::basicVelocityFieldMomentInversion</class>
    <class kind="class">Foam::betaEQMOM</class>
    <class kind="class">Foam::BlendedInterfacialModel</class>
    <class kind="class">Foam::blendingMethod</class>
    <class kind="class">Foam::bubbleBreakupKernel</class>
    <class kind="class">Foam::bubblePressureModel</class>
    <class kind="class">Foam::ButcherTable</class>
    <class kind="class">Foam::coalescenceEfficiencyKernel</class>
    <class kind="class">Foam::coalescenceFrequencyKernel</class>
    <class kind="class">Foam::coalescenceKernel</class>
    <class kind="class">Foam::compressibleSystem</class>
    <class kind="class">Foam::constantAspectRatio</class>
    <class kind="class">Foam::dragModel</class>
    <class kind="class">Foam::eigenSolver</class>
    <class kind="class">Foam::equilibrium</class>
    <class kind="class">Foam::errorEstimator</class>
    <class kind="class">Foam::extendedFieldMomentInversion</class>
    <class kind="class">Foam::extendedMomentInversion</class>
    <class kind="class">Foam::fieldMomentInversion</class>
    <class kind="class">Foam::firstOrderKinetic</class>
    <class kind="class">Foam::fluxFunction</class>
    <class kind="class">Foam::fluxIntegrator</class>
    <class kind="class">Foam::fluxSplittingFunction</class>
    <class kind="class">Foam::gammaEQMOM</class>
    <class kind="class">Foam::gaussLobattoMomentInversion</class>
    <class kind="class">Foam::gaussMomentInversion</class>
    <class kind="class">Foam::gaussRadauMomentInversion</class>
    <class kind="class">Foam::heatTransferModel</class>
    <class kind="class">Foam::hermiteQuadrature</class>
    <class kind="class">Foam::HLLCFlux</class>
    <class kind="class">Foam::HLLFlux</class>
    <class kind="class">Foam::hyperbolic</class>
    <class kind="class">Foam::hyperbolicMomentInversion</class>
    <class kind="class">Foam::JohnsonJacksonParticleSlipFvPatchVectorField</class>
    <class kind="class">Foam::JohnsonJacksonParticleThetaFvPatchScalarField</class>
    <class kind="class">Foam::kineticTheory</class>
    <class kind="class">Foam::kineticTheoryModel</class>
    <class kind="class">Foam::KongFox</class>
    <class kind="class">Foam::liftModel</class>
    <class kind="class">Foam::linear</class>
    <class kind="class">Foam::lognormalEQMOM</class>
    <class kind="class">Foam::Lun</class>
    <class kind="class">Foam::mappedList</class>
    <class kind="class">Foam::mappedLists</class>
    <class kind="class">Foam::mappedPtrList</class>
    <class kind="class">Foam::mixingModel</class>
    <class kind="class">Foam::mixingModels</class>
    <class kind="class">Foam::moment</class>
    <class kind="class">Foam::momentFieldSet</class>
    <class kind="class">Foam::momentFieldSets</class>
    <class kind="class">Foam::momentGenerationModel</class>
    <class kind="class">Foam::moments</class>
    <class kind="class">Foam::momentSet</class>
    <class kind="class">Foam::monoKineticQuadratureApproximation</class>
    <class kind="class">Foam::multivariateMomentInversion</class>
    <class kind="class">Foam::multivariateMomentSet</class>
    <class kind="class">Foam::noAdvection</class>
    <class kind="class">Foam::noBlending</class>
    <class kind="class">Foam::nonEquilibrium</class>
    <class kind="class">Foam::noneViscosity</class>
    <class kind="class">Foam::orderedPhasePair</class>
    <class kind="class">Foam::PDFTransportModel</class>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::phaseModel</class>
    <class kind="class">Foam::phasePair</class>
    <class kind="class">Foam::phasePairKey</class>
    <class kind="class">Foam::phasePressureModel</class>
    <class kind="class">Foam::polydispersePhaseModel</class>
    <class kind="class">Foam::populationBalanceModel</class>
    <class kind="class">Foam::quadratureApproximation</class>
    <class kind="class">Foam::quadratureNode</class>
    <class kind="class">Foam::realizableOdeSolver</class>
    <class kind="class">Foam::RoeFlux</class>
    <class kind="class">Foam::SinclairJackson</class>
    <class kind="class">Foam::swarmCorrection</class>
    <class kind="class">Foam::SyamlalRogersOBrien</class>
    <class kind="class">Foam::ThermalDiffusivity</class>
    <class kind="class">Foam::TomiyamaSwarm</class>
    <class kind="class">Foam::turbulentDispersionModel</class>
    <class kind="class">Foam::twoPhaseSystem</class>
    <class kind="class">Foam::univariateMomentAdvection</class>
    <class kind="class">Foam::univariateMomentInversion</class>
    <class kind="class">Foam::univariateMomentSet</class>
    <class kind="class">Foam::univariatePDFTransportModel</class>
    <class kind="class">Foam::VakhrushevEfremov</class>
    <class kind="class">Foam::Vandermonde</class>
    <class kind="class">Foam::vdfPhaseModel</class>
    <class kind="class">Foam::velocityMomentAdvection</class>
    <class kind="class">Foam::velocityPDFTransportModel</class>
    <class kind="class">Foam::velocityQuadratureNode</class>
    <class kind="class">Foam::VikasQuasiSecondOrder</class>
    <class kind="class">Foam::virtualMassModel</class>
    <class kind="class">Foam::viscosityModel</class>
    <class kind="class">Foam::wallDampingModel</class>
    <class kind="class">Foam::wallDependentModel</class>
    <class kind="class">Foam::wallLubricationModel</class>
    <class kind="class">Foam::zeta</class>
    <member kind="typedef">
      <type>mappedList&lt; label &gt;</type>
      <name>mappedLabelList</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>afdd07b2b76b6ef1763b3b3aa1cdf19bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mappedList&lt; scalar &gt;</type>
      <name>mappedScalarList</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aab7cb89c9371af8f82bcfcf6de44f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mappedList&lt; vector &gt;</type>
      <name>mappedVectorList</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ad363f991d8a68713e9986c33649ba655</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; volScalarMoment, volScalarNode &gt;</type>
      <name>volScalarMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae8c6e69db5d3a4adfe5726fd4ac6d4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; surfaceScalarMoment, surfaceScalarNode &gt;</type>
      <name>surfaceScalarMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ac6aab8cb980083359915ae1abc1088d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; volVelocityMoment, volVelocityNode &gt;</type>
      <name>volVelocityMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a22ab41b61fc45e5cac11a325fb1d06fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; surfaceVelocityMoment, surfaceVelocityNode &gt;</type>
      <name>surfaceVelocityMomentFieldSet</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a6906a30e0126920802c9beb5cd075845</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; volScalarField, volScalarNode &gt;</type>
      <name>volScalarMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae01d86485318664fbe834ffe3c8d0caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; surfaceScalarField, surfaceScalarNode &gt;</type>
      <name>surfaceScalarMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a1d66adfe479bed075edb081ba7bb175c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; volScalarField, volVelocityNode &gt;</type>
      <name>volVelocityMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a4d4dde06caf8725b1f19cbac0e521755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; surfaceScalarField, surfaceVelocityNode &gt;</type>
      <name>surfaceVelocityMoment</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a2936ce5f21c091d5c8e8b0dcc7f6566e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureApproximation&lt; volScalarMoment, volScalarNode &gt;</type>
      <name>scalarQuadratureApproximation</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae47349b38a289503b27cfe97a824ed63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureApproximation&lt; volVelocityMoment, volVelocityNode &gt;</type>
      <name>velocityQuadratureApproximation</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0a3f11530c04c4f135bb4129023ef3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; volScalarField, volVectorField &gt;</type>
      <name>volScalarNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0c5ea6f14ef0e7834b9afc29bbc5ae11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; surfaceScalarField, surfaceVectorField &gt;</type>
      <name>surfaceScalarNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae33c461ae999a3100baf44e6d288cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>velocityQuadratureNode&lt; volScalarField, volVectorField &gt;</type>
      <name>volVelocityNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a40123be7f8362b56042486292e12eb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>velocityQuadratureNode&lt; surfaceScalarField, surfaceVectorField &gt;</type>
      <name>surfaceVelocityNode</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ad3352d7ef15bba9eb1ed4f74960bbc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThermalDiffusivity&lt; PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &gt;</type>
      <name>phaseCompressibleTurbulenceModel</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aa5c1489fda8382d68abc884992704b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae421e805e1c811481923fc7b9556487b</anchor>
      <arglist>(basicFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>afb6d54b8864cf92eb887585f1fbd72b5</anchor>
      <arglist>(fieldMomentInversion, basicFieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ab79a491ad17cf94155478c12d011b70e</anchor>
      <arglist>(basicVelocityFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ac508fe993d44d4ca53bda35e1ea9d6d1</anchor>
      <arglist>(fieldMomentInversion, basicVelocityFieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0c214123cdb6bf17bd34e6ba3a78e85f</anchor>
      <arglist>(extendedFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a081c8abae783263ca5c2d8749b9cad86</anchor>
      <arglist>(fieldMomentInversion, extendedFieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ab5fa56c52c6ef16704a156e8c403a3cd</anchor>
      <arglist>(fieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>abb1c2e5ec33b7d24d9997b1e0c9e2a1b</anchor>
      <arglist>(fieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>adfa73918fc77af1ed8be0d92e9ee1703</anchor>
      <arglist>(mixingModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a147adac4350a271380c85ada44c2559e</anchor>
      <arglist>(mixingModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a2e031b2f48d8a0ab9406319748fe3375</anchor>
      <arglist>(univariateMomentAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a39775b46f08fcfec6aab7d577715ce8b</anchor>
      <arglist>(univariateMomentAdvection, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>acd5c6b3cdb05c7087c8b776ca4efa8b0</anchor>
      <arglist>(velocityMomentAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0063433e8c6a011d8e10c4518da61265</anchor>
      <arglist>(velocityMomentAdvection, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a7ae3fe011e8c002f96aaca3bd8f5a4c4</anchor>
      <arglist>(multivariateMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a1a5fdf9ffaed282a6817100059db7834</anchor>
      <arglist>(multivariateMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a1870f4400a3553172ddbd7b520d56e70</anchor>
      <arglist>(gaussLobattoMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>abcbde07469f4b6865f880188dfaaed03</anchor>
      <arglist>(univariateMomentInversion, gaussLobattoMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ab292baa664c0b1ffe9902ad93185b24f</anchor>
      <arglist>(gaussMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a819bba564847deaf815d6be3f1c72bac</anchor>
      <arglist>(univariateMomentInversion, gaussMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ae28a8693ec96aa0ce2f10a129012de21</anchor>
      <arglist>(gaussRadauMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a0b3e4d883035d960f7255cc8bed29329</anchor>
      <arglist>(univariateMomentInversion, gaussRadauMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aa1f538636ae75df9adfb5d95581c60c9</anchor>
      <arglist>(hyperbolicMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>afaa0ceddec025f9729083e33cd275864</anchor>
      <arglist>(univariateMomentInversion, hyperbolicMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a2bfa8c5752536cc7ec9c8af1ba407aef</anchor>
      <arglist>(univariateMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a986535dad0b0c7383cd3f0370fa94d7e</anchor>
      <arglist>(univariateMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aba3b5bd4e77aefe9210dac8bc85eaf71</anchor>
      <arglist>(betaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a48cb1021f5b67b9795c0f17ac2d5e2a6</anchor>
      <arglist>(extendedMomentInversion, betaEQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a9beec8ce64dc3eb33ed3ff09a52d34e5</anchor>
      <arglist>(extendedMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a40163a8d4828ced85dea8a29591c7942</anchor>
      <arglist>(extendedMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a5538d367d57069f3187e09fb0a7d2a9d</anchor>
      <arglist>(gammaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a58f6c31a874dc8c6ef95eb608f2301e0</anchor>
      <arglist>(extendedMomentInversion, gammaEQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>abc4d0b6de74a1649ffc1fb65e338c2d7</anchor>
      <arglist>(lognormalEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>ad5fccf27937c96a424dd25d4f637bcd8</anchor>
      <arglist>(extendedMomentInversion, lognormalEQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a5f1f6bb41c55fd770d1a82b1a3f616d1</anchor>
      <arglist>(populationBalanceModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a658da731d19646486da4cad759632bb0</anchor>
      <arglist>(populationBalanceModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a062275aa4823e90d1e79a058b82a4f5a</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a15a138b228eb91febb6f2ae10cf6d085</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>aca413c1881b6d4552ae0df9fe282fe89</anchor>
      <arglist>(Istream &amp;, phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>a6d7327e2036cf62b71ba0e454ae45409</anchor>
      <arglist>(Ostream &amp;, const phasePairKey &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::aspectRatioModels</name>
    <filename>a01837.html</filename>
    <class kind="class">Foam::aspectRatioModels::constantAspectRatio</class>
    <class kind="class">Foam::aspectRatioModels::TomiyamaAspectRatio</class>
    <class kind="class">Foam::aspectRatioModels::VakhrushevEfremov</class>
    <class kind="class">Foam::aspectRatioModels::Wellek</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::blendingMethods</name>
    <filename>a01857.html</filename>
    <class kind="class">Foam::blendingMethods::hyperbolic</class>
    <class kind="class">Foam::blendingMethods::linear</class>
    <class kind="class">Foam::blendingMethods::noBlending</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::breakupKernels</name>
    <filename>a03077.html</filename>
    <class kind="class">Foam::breakupKernels::Alopaeus</class>
    <class kind="class">Foam::breakupKernels::LuoSvendsen</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::bubbleBreakupKernels</name>
    <filename>a01838.html</filename>
    <class kind="class">Foam::bubbleBreakupKernels::Alopaeus</class>
    <class kind="class">Foam::bubbleBreakupKernels::LuoSvendsen</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::bubblePressureModels</name>
    <filename>a01839.html</filename>
    <class kind="class">Foam::bubblePressureModels::Beisheuvel</class>
    <class kind="class">Foam::bubblePressureModels::BeisheuvelBubblePressure</class>
    <class kind="class">Foam::bubblePressureModels::noBubblePressure</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::ButcherTables</name>
    <filename>a01835.html</filename>
    <class kind="class">Foam::ButcherTables::Euler</class>
    <class kind="class">Foam::ButcherTables::RK2</class>
    <class kind="class">Foam::ButcherTables::RK2SSP</class>
    <class kind="class">Foam::ButcherTables::RK3</class>
    <class kind="class">Foam::ButcherTables::RK3SSP</class>
    <class kind="class">Foam::ButcherTables::RK45</class>
    <class kind="class">Foam::ButcherTables::RK4SSP</class>
    <class kind="class">Foam::ButcherTables::RKF45</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::coalescenceEfficiencyKernels</name>
    <filename>a01840.html</filename>
    <class kind="class">Foam::coalescenceEfficiencyKernels::Chesters</class>
    <class kind="class">Foam::coalescenceEfficiencyKernels::constant</class>
    <class kind="class">Foam::coalescenceEfficiencyKernels::CoulaloglouAndTavlarides</class>
    <class kind="class">Foam::coalescenceEfficiencyKernels::Lehr</class>
    <class kind="class">Foam::coalescenceEfficiencyKernels::Luo</class>
    <class kind="class">Foam::coalescenceEfficiencyKernels::PrinceAndBlanch</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::coalescenceFrequencyKernels</name>
    <filename>a01841.html</filename>
    <class kind="class">Foam::coalescenceFrequencyKernels::CoulaloglouAndTavlarides</class>
    <class kind="class">Foam::coalescenceFrequencyKernels::Luo</class>
    <class kind="class">Foam::coalescenceFrequencyKernels::PrinceAndBlanch</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::dragModels</name>
    <filename>a01842.html</filename>
    <class kind="class">Foam::dragModels::Ergun</class>
    <class kind="class">Foam::dragModels::Gibilaro</class>
    <class kind="class">Foam::dragModels::GidaspowErgunWenYu</class>
    <class kind="class">Foam::dragModels::GidaspowSchillerNaumann</class>
    <class kind="class">Foam::dragModels::IshiiZuber</class>
    <class kind="class">Foam::dragModels::Lain</class>
    <class kind="class">Foam::dragModels::SchillerNaumann</class>
    <class kind="class">Foam::dragModels::segregated</class>
    <class kind="class">Foam::dragModels::Stokes</class>
    <class kind="class">Foam::dragModels::SyamlalOBrien</class>
    <class kind="class">Foam::dragModels::Tomiyama</class>
    <class kind="class">Foam::dragModels::TomiyamaAnalytic</class>
    <class kind="class">Foam::dragModels::TomiyamaCorrelated</class>
    <class kind="class">Foam::dragModels::WenYu</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::fluxFunctions</name>
    <filename>a01836.html</filename>
    <class kind="class">Foam::fluxFunctions::AUSM</class>
    <class kind="class">Foam::fluxFunctions::AUSMPlus</class>
    <class kind="class">Foam::fluxFunctions::HLL</class>
    <class kind="class">Foam::fluxFunctions::HLLC</class>
    <class kind="class">Foam::fluxFunctions::Roe</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::fv</name>
    <filename>a01860.html</filename>
    <class kind="class">Foam::fv::phaseCompressibleMeanVelocityForce</class>
    <class kind="class">Foam::fv::phaseIncompressibleMeanVelocityForce</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::heatTransferModels</name>
    <filename>a01858.html</filename>
    <class kind="class">Foam::heatTransferModels::constantNuHeatTransfer</class>
    <class kind="class">Foam::heatTransferModels::RanzMarshall</class>
    <class kind="class">Foam::heatTransferModels::sphericalHeatTransfer</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels</name>
    <filename>a01850.html</filename>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
    <namespace>Foam::kineticTheoryModels::fluxSplittingFunctions</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
    <class kind="class">Foam::kineticTheoryModels::anisotropicGaussian</class>
    <class kind="class">Foam::kineticTheoryModels::conductivityModel</class>
    <class kind="class">Foam::kineticTheoryModels::equilibrium</class>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunction</class>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModel</class>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModel</class>
    <class kind="class">Foam::kineticTheoryModels::KongFox</class>
    <class kind="class">Foam::kineticTheoryModels::nonEquilibrium</class>
    <class kind="class">Foam::kineticTheoryModels::noneViscosity</class>
    <class kind="class">Foam::kineticTheoryModels::radialModel</class>
    <class kind="class">Foam::kineticTheoryModels::viscosityModel</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::conductivityModels</name>
    <filename>a01852.html</filename>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Gidaspow</class>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::HrenyaSinclair</class>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::KongFox</class>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Syamlal</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::fluxSplittingFunctions</name>
    <filename>a01851.html</filename>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunctions::alphaG0</class>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunctions::alphG0</class>
    <class kind="class">Foam::kineticTheoryModels::fluxSplittingFunctions::particlePressure</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::frictionalStressModels</name>
    <filename>a01853.html</filename>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJackson</class>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJacksonSchaeffer</class>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::Schaeffer</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::granularPressureModels</name>
    <filename>a01854.html</filename>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::KongFox</class>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::Lun</class>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::SyamlalRogersOBrien</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::radialModels</name>
    <filename>a01855.html</filename>
    <class kind="class">Foam::kineticTheoryModels::radialModels::CarnahanStarling</class>
    <class kind="class">Foam::kineticTheoryModels::radialModels::LunSavage</class>
    <class kind="class">Foam::kineticTheoryModels::radialModels::SinclairJackson</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::viscosityModels</name>
    <filename>a01856.html</filename>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Gidaspow</class>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::HrenyaSinclair</class>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Syamlal</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::liftModels</name>
    <filename>a01843.html</filename>
    <class kind="class">Foam::liftModels::constantLiftCoefficient</class>
    <class kind="class">Foam::liftModels::LegendreMagnaudet</class>
    <class kind="class">Foam::liftModels::Moraga</class>
    <class kind="class">Foam::liftModels::noLift</class>
    <class kind="class">Foam::liftModels::TomiyamaLift</class>
    <class kind="class">Foam::liftModels::wallDamped</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingModels</name>
    <filename>a01818.html</filename>
    <class kind="class">Foam::mixingModels::noMixing</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01818.html</anchorfile>
      <anchor>acae4135f0a969e5c9ac08c46a86accc1</anchor>
      <arglist>(noMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01818.html</anchorfile>
      <anchor>ade9514ba79b25a6a811619ee6bf9114f</anchor>
      <arglist>(mixingModel, noMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingSubModels</name>
    <filename>a01815.html</filename>
    <namespace>Foam::mixingSubModels::mixingDiffusionModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModel</class>
    <class kind="class">Foam::mixingSubModels::mixingKernel</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ac0d594d7c8baef48ea1026cb4c8e594f</anchor>
      <arglist>(mixingDiffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a9d4968d5245eb7c4df3a444967096e71</anchor>
      <arglist>(mixingDiffusionModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>abf81d58a6669ac3c3505cc7bc83fc3ec</anchor>
      <arglist>(mixingKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>aefa5f150c6459c5dc6b9dd059c74f912</anchor>
      <arglist>(mixingKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingSubModels::mixingDiffusionModels</name>
    <filename>a01816.html</filename>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModels::molecularDiffusion</class>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModels::noDiffusion</class>
    <class kind="class">Foam::mixingSubModels::mixingDiffusionModels::turbulentDiffusion</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a41da1253f003db4f25b3cb3cdf35afbf</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ab346ecf672faa6346fbcc4161b3c047a</anchor>
      <arglist>(mixingDiffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ad26cd27015c30ac719d5391036ab7c68</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>af61572aa3c2df764365d3e063e935e1a</anchor>
      <arglist>(mixingDiffusionModel, noDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a75e56fb0c6f2395f45f9665720fb2261</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>aa6e1f6f5e3bbf100df1b074d01dfc233</anchor>
      <arglist>(mixingDiffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingSubModels::mixingKernels</name>
    <filename>a01817.html</filename>
    <class kind="class">Foam::mixingSubModels::mixingKernels::FokkerPlanck</class>
    <class kind="class">Foam::mixingSubModels::mixingKernels::IEM</class>
    <class kind="class">Foam::mixingSubModels::mixingKernels::noMixingKernel</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5ee518d2e777e92d55b5142322520192</anchor>
      <arglist>(FokkerPlanck, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a4f2ef8e6b8103aec93807cd5b8659911</anchor>
      <arglist>(mixingKernel, FokkerPlanck, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a17d0080ebb72975f91a6424916c1cb24</anchor>
      <arglist>(IEM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a9226eeb16fbe06bac390688bc780c047</anchor>
      <arglist>(mixingKernel, IEM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>abde6e8d44f323e5d4c27c8ba1754f2fa</anchor>
      <arglist>(noMixingKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a623dc75247e8a15fe9752084490948ca</anchor>
      <arglist>(mixingKernel, noMixingKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::momentGenerationSubModels</name>
    <filename>a01859.html</filename>
    <class kind="class">Foam::momentGenerationSubModels::alphaAndDiameter</class>
    <class kind="class">Foam::momentGenerationSubModels::alphaAndDiameterVelocity</class>
    <class kind="class">Foam::momentGenerationSubModels::noMomentGeneration</class>
    <class kind="class">Foam::momentGenerationSubModels::velocity</class>
    <class kind="class">Foam::momentGenerationSubModels::weightsAndAbscissae</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::multivariateMomentInversions</name>
    <filename>a01823.html</filename>
    <class kind="class">Foam::multivariateMomentInversions::CHyQMOM</class>
    <class kind="class">Foam::multivariateMomentInversions::conditional</class>
    <class kind="class">Foam::multivariateMomentInversions::monoKinetic</class>
    <class kind="class">Foam::multivariateMomentInversions::sizeCHyQMOM</class>
    <class kind="class">Foam::multivariateMomentInversions::TensorProduct</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a09497a6158d326aed90ddb122c61143c</anchor>
      <arglist>(conditional, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a0add58338bd5013be837dff391be6045</anchor>
      <arglist>(multivariateMomentInversion, conditional, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a0039f071da83af734213e794edc3d46c</anchor>
      <arglist>(CHyQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a83464b2eea013cbb957aa6ce6d33f121</anchor>
      <arglist>(multivariateMomentInversion, CHyQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>af67931e34fa290d02a41ef4f7fbf5708</anchor>
      <arglist>(monoKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>abb61c3d17b0b702bb9185b4f4b1a5bca</anchor>
      <arglist>(multivariateMomentInversion, monoKinetic, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a2ada5bd5cf9ed6cd03e5a07ee584a613</anchor>
      <arglist>(sizeCHyQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a550532f7f6133e003f17d0447d24abbf</anchor>
      <arglist>(multivariateMomentInversion, sizeCHyQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>acdfd33787416c46a1a62405707b256b0</anchor>
      <arglist>(TensorProduct, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a79a625f6b95b92a395b248756024c35b</anchor>
      <arglist>(multivariateMomentInversion, TensorProduct, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::PDFTransportModels</name>
    <filename>a01819.html</filename>
    <namespace>Foam::PDFTransportModels::mixingModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <class kind="class">Foam::PDFTransportModels::univariatePDFTransportModel</class>
    <class kind="class">Foam::PDFTransportModels::velocityPDFTransportModel</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::PDFTransportModels::mixingModels</name>
    <filename>a01820.html</filename>
    <class kind="class">Foam::PDFTransportModels::mixingModels::turbulentMixing</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a3a551541939d8bbcf9fdc374ce4ede08</anchor>
      <arglist>(turbulentMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a5bb611098ff24fdd12820b81036f0c9d</anchor>
      <arglist>(mixingModel, turbulentMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::PDFTransportModels::populationBalanceModels</name>
    <filename>a01824.html</filename>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::mixingPopulationBalance</class>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::sizeVelocityPopulationBalance</class>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::univariatePopulationBalance</class>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::velocityPopulationBalance</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a74953d00e1118e16322e9fbf9624da09</anchor>
      <arglist>(mixingPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>ac9becf1695f18e470b2d168190e0cda8</anchor>
      <arglist>(populationBalanceModel, mixingPopulationBalance, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a269893300cb6a6f95e28b28ad4543a00</anchor>
      <arglist>(sizeVelocityPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a2f96c855a59b1dae5737200ad23d841f</anchor>
      <arglist>(populationBalanceModel, sizeVelocityPopulationBalance, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a141d32d1d596c5abf5a48966fb726556</anchor>
      <arglist>(univariatePopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a908eacb72c5c2b3af99129191b55dc5f</anchor>
      <arglist>(populationBalanceModel, univariatePopulationBalance, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>ad73f6ae7319e6e2741acfc3bb4483ea9</anchor>
      <arglist>(velocityPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a8e8124ad30b94f850ea5c10e3a6d0322</anchor>
      <arglist>(populationBalanceModel, velocityPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceModels</name>
    <filename>a01825.html</filename>
    <class kind="class">Foam::populationBalanceModels::mixingPopulationBalance</class>
    <class kind="class">Foam::populationBalanceModels::noPopulationBalance</class>
    <class kind="class">Foam::populationBalanceModels::univariatePopulationBalance</class>
    <class kind="class">Foam::populationBalanceModels::velocityPopulationBalance</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a737c1912e0e9ef9a0d6b674272e44d7f</anchor>
      <arglist>(noPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>aa4c3c326869bceb4f53d5175577d7c8c</anchor>
      <arglist>(populationBalanceModel, noPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels</name>
    <filename>a01826.html</filename>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <namespace>Foam::populationBalanceSubModels::coalescenceEfficiencyKernels</namespace>
    <namespace>Foam::populationBalanceSubModels::collisionKernels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <namespace>Foam::populationBalanceSubModels::environmentMixingModels</namespace>
    <namespace>Foam::populationBalanceSubModels::growthModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::bubbleBreakupKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::coalescenceEfficiencyKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::coalescenceFrequencyKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::coalescenceKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistribution</class>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModel</class>
    <class kind="class">Foam::populationBalanceSubModels::environmentMixingModel</class>
    <class kind="class">Foam::populationBalanceSubModels::growthModel</class>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModel</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>abce02722c305557cb5730a9610ba0d51</anchor>
      <arglist>(aggregationKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a9dd0aa6f3fae81195037437f9fb2042f</anchor>
      <arglist>(aggregationKernel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>ab205061f0523b0c0145ab52cb5a15fa7</anchor>
      <arglist>(breakupKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a226d16ce92fe729b204a751b4b002599</anchor>
      <arglist>(breakupKernel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a87291bb07eaec7c8c8bddfe089ba5adb</anchor>
      <arglist>(collisionKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a2c6204605aea6f0bf0de943e30f85c3f</anchor>
      <arglist>(collisionKernel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a76416983309f14ff79252f78e2ba5f45</anchor>
      <arglist>(daughterDistribution, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a43b4a6fcc71e245c8ade315846b6d6a5</anchor>
      <arglist>(daughterDistribution, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a31a8f344b0539bd5cce6c4f4576aa297</anchor>
      <arglist>(diffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a448ce681381f516ef5a82ad59235caa1</anchor>
      <arglist>(diffusionModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a9531e9b50d9818d7f0779218c7e8f9ce</anchor>
      <arglist>(environmentMixingModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a0dbcc53bdc479497046c5537cd09ffb0</anchor>
      <arglist>(environmentMixingModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a808c3e596bb1cee3b5e795d38419b367</anchor>
      <arglist>(growthModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a7fcd4c8a5852e11ff67830a07a4cfe7b</anchor>
      <arglist>(growthModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>af6421a75bd0356deacdd72271b6f5e83</anchor>
      <arglist>(nucleationModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a0b6166697bbb54af81fb439a1105951e</anchor>
      <arglist>(nucleationModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::aggregationKernels</name>
    <filename>a01827.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::Brownian</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::constantAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::CoulaloglouAndTavlarides</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::differentialForceAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::hydrodynamicAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::Luo</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::PrinceAndBlanch</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::sumAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::turbulentBrownian</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a076221bfaf795356aff635f898ab8962</anchor>
      <arglist>(Brownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a4c6c4b45a7436ec7f10b0bcd7b9d3a75</anchor>
      <arglist>(aggregationKernel, Brownian, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>af835c9d013a20a975c6f4e57ee9149c8</anchor>
      <arglist>(constantAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ace2c634a7ff538fbb4744268b13a2c6a</anchor>
      <arglist>(aggregationKernel, constantAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a901fe18b45ba8ca91a036e0ca43a3916</anchor>
      <arglist>(differentialForceAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a61b52f2b3984830ce75e98417e4a1503</anchor>
      <arglist>(aggregationKernel, differentialForceAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a636ec3d763c8c887602ea04a51fad475</anchor>
      <arglist>(hydrodynamicAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>af83bce581ea73f24b1228b0fff351b56</anchor>
      <arglist>(aggregationKernel, hydrodynamicAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ae400872a78a4a9234d740ae66c007114</anchor>
      <arglist>(sumAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a60fb21d09528d9baad4a0d418f4b125f</anchor>
      <arglist>(aggregationKernel, sumAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a8aea8aa81c72d6cc9339bc773860a063</anchor>
      <arglist>(turbulentBrownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a4425f03c0f3a6b57d979366a338cda40</anchor>
      <arglist>(aggregationKernel, turbulentBrownian, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::breakupKernels</name>
    <filename>a01828.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::AyaziShamlou</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::constantBreakup</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::exponentialBreakup</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::LuoSvendsen</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::powerLawBreakup</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>aee88bb613072a5f64915965fd870f306</anchor>
      <arglist>(AyaziShamlou, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>ae91cc006297638cdc5e7a12a87ce8e8d</anchor>
      <arglist>(breakupKernel, AyaziShamlou, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a4338754b0aa20aed5a47b1d88f7fa364</anchor>
      <arglist>(constantBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a7337b8a9505305ea7461d4aa5aee0c6f</anchor>
      <arglist>(breakupKernel, constantBreakup, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a454f3683df96243c1c3df745293c4541</anchor>
      <arglist>(exponentialBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a5bfa78660a2a6bf5acc7c81106fde397</anchor>
      <arglist>(breakupKernel, exponentialBreakup, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a56da0846e22fec8b96568c9df45a9ff0</anchor>
      <arglist>(LuoSvendsen, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>ab0446f84d3f857ce06af2d4d1e5c4303</anchor>
      <arglist>(breakupKernel, LuoSvendsen, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a8b60ada41289ba4c36eedcf1dca754ac</anchor>
      <arglist>(powerLawBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>aeff8d67156c89fed6ad177f01cb8321e</anchor>
      <arglist>(breakupKernel, powerLawBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::coalescenceEfficiencyKernels</name>
    <filename>a03078.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::coalescenceEfficiencyKernels::Chesters</class>
    <class kind="class">Foam::populationBalanceSubModels::coalescenceEfficiencyKernels::constant</class>
    <class kind="class">Foam::populationBalanceSubModels::coalescenceEfficiencyKernels::CoulaloglouAndTavlarides</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::collisionKernels</name>
    <filename>a01829.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::BGKCollision</class>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::BoltzmannCollision</class>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::esBGKCollision</class>
    <class kind="class">Foam::populationBalanceSubModels::collisionKernels::noCollision</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ac7d1051df9c7c1b107014e002ea4ce79</anchor>
      <arglist>(BGKCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ab5c12c8451467e4c66586320b7e4ed59</anchor>
      <arglist>(collisionKernel, BGKCollision, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a8918d0e80d260a177c14e1d838abf333</anchor>
      <arglist>(BoltzmannCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ae68d02a5eac8793df11ec21537713cd1</anchor>
      <arglist>(collisionKernel, BoltzmannCollision, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a659a37f1810a8d6733bda1cf0ffdde51</anchor>
      <arglist>(esBGKCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a304534ef6629e6e25750326875da55c5</anchor>
      <arglist>(collisionKernel, esBGKCollision, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ad3d4242dde5c008ec230c0c4870019bd</anchor>
      <arglist>(noCollision, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a2f3325d2dac144dafdc8c723cee255fa</anchor>
      <arglist>(collisionKernel, noCollision, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::daughterDistributions</name>
    <filename>a01830.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::erosion</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::fullFragmentation</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::oneQuarterMassRatio</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::symmetricFragmentation</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::uniform</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a01f727723bb2f7668ab5bc761f4c248a</anchor>
      <arglist>(erosion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a62e79e44ef758cea9472b6d5dd80c766</anchor>
      <arglist>(daughterDistribution, erosion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a6997e33657a0008b01a9b12b90d7bd10</anchor>
      <arglist>(fullFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>ae31c29d61fe94ab903b2c5841b3173f8</anchor>
      <arglist>(daughterDistribution, fullFragmentation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>af270c7f8972b4b7a65c62654f6a52ba8</anchor>
      <arglist>(oneQuarterMassRatio, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a402d029985d37241642222eff5412b57</anchor>
      <arglist>(daughterDistribution, oneQuarterMassRatio, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a62ad711d8fce03a652f1adeb2fcef84e</anchor>
      <arglist>(symmetricFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a4a0510d1798895036e2050367b333efc</anchor>
      <arglist>(daughterDistribution, symmetricFragmentation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a6cfc6fde57688830e91aa5900a2a3b0b</anchor>
      <arglist>(uniform, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>ad4645290635a7726786f906917fa5138</anchor>
      <arglist>(daughterDistribution, uniform, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::diffusionModels</name>
    <filename>a01831.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::molecularDiffusion</class>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::noDiffusion</class>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::turbulentDiffusion</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>ab0071e5b6f1d125b17b3e41b73e7e39a</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a0fccf41a74735fc6de29c475cbcd4742</anchor>
      <arglist>(diffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a842aff0e85dca97889ae993504b45e78</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a6fe185b9482c07be061d5601a474029b</anchor>
      <arglist>(diffusionModel, noDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>afdc594891515141ee07b11edd796180c</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01831.html</anchorfile>
      <anchor>a5735ce97238b71965eb6a6817765ae13</anchor>
      <arglist>(diffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::environmentMixingModels</name>
    <filename>a01832.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::environmentMixingModels::IEM</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a03a314abf645683ad9bf1210e1a454e5</anchor>
      <arglist>(IEM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a26ed9743a6bbf7e1e65d072847c8ba76</anchor>
      <arglist>(environmentMixingModel, IEM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::growthModels</name>
    <filename>a01833.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::growthModels::constantGrowth</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a05800d31989e6a63a1927724fcce12e4</anchor>
      <arglist>(constantGrowth, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a6ad7bf9e04f9a2619c1348631b695132</anchor>
      <arglist>(growthModel, constantGrowth, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::nucleationModels</name>
    <filename>a01834.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::Miller</class>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::noNucleation</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a21c76019aa3870a37ecf5edfc30fcbdb</anchor>
      <arglist>(Miller, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>ad2d014bf03b1a0cdaf5ed2889c0bbb2d</anchor>
      <arglist>(nucleationModel, Miller, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a57836ace29d15e34f15b8b253e40611f</anchor>
      <arglist>(noNucleation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>aa0ae238b7a248326a8c9c736e41b078e</anchor>
      <arglist>(nucleationModel, noNucleation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::RASModels</name>
    <filename>a01849.html</filename>
    <class kind="class">Foam::RASModels::kineticTheory</class>
    <class kind="class">Foam::RASModels::phasePressureModel</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::swarmCorrections</name>
    <filename>a01844.html</filename>
    <class kind="class">Foam::swarmCorrections::noSwarm</class>
    <class kind="class">Foam::swarmCorrections::TomiyamaSwarm</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::turbulentDispersionModels</name>
    <filename>a01845.html</filename>
    <class kind="class">Foam::turbulentDispersionModels::Burns</class>
    <class kind="class">Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</class>
    <class kind="class">Foam::turbulentDispersionModels::Davidson</class>
    <class kind="class">Foam::turbulentDispersionModels::Gosman</class>
    <class kind="class">Foam::turbulentDispersionModels::LopezDeBertodano</class>
    <class kind="class">Foam::turbulentDispersionModels::noTurbulentDispersion</class>
    <class kind="class">Foam::turbulentDispersionModels::Panicker</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::univariateAdvection</name>
    <filename>a01821.html</filename>
    <class kind="class">Foam::univariateAdvection::firstOrderKinetic</class>
    <class kind="class">Foam::univariateAdvection::noAdvection</class>
    <class kind="class">Foam::univariateAdvection::zeta</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a56677165b63753d8d9d522290127c6dc</anchor>
      <arglist>(firstOrderKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>afc4c12bafdfbadbbad026767212f82c9</anchor>
      <arglist>(univariateMomentAdvection, firstOrderKinetic, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>aa595ecec4ec2488aa2b0821e5fc2b468</anchor>
      <arglist>(noAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>ac4071665ab199c5fe7ad1e81ccccccca</anchor>
      <arglist>(univariateMomentAdvection, noAdvection, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a2c13ab9f24a5e031ad2a84edd3f1df1b</anchor>
      <arglist>(zeta, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a25862155d3021963c230ba7635e00ea6</anchor>
      <arglist>(univariateMomentAdvection, zeta, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::velocityAdvection</name>
    <filename>a01822.html</filename>
    <class kind="class">Foam::velocityAdvection::firstOrderKinetic</class>
    <class kind="class">Foam::velocityAdvection::noAdvection</class>
    <class kind="class">Foam::velocityAdvection::VikasQuasiSecondOrder</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>abc26bebea151799a027f3e25eb647602</anchor>
      <arglist>(firstOrderKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a63a38ecbcf11d75dc2c134439787530c</anchor>
      <arglist>(velocityMomentAdvection, firstOrderKinetic, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>ab9b991324b8e804d11bc4b38d0a9a34f</anchor>
      <arglist>(noAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a9be8e7dbf7d1afecc72996b52c5b9143</anchor>
      <arglist>(velocityMomentAdvection, noAdvection, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>af0b5c7fda4c1bcad11a1956e6475ed02</anchor>
      <arglist>(VikasQuasiSecondOrder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a219c7350ad76df43e38076956113b688</anchor>
      <arglist>(velocityMomentAdvection, VikasQuasiSecondOrder, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::virtualMassModels</name>
    <filename>a01846.html</filename>
    <class kind="class">Foam::virtualMassModels::constantVirtualMassCoefficient</class>
    <class kind="class">Foam::virtualMassModels::Lamb</class>
    <class kind="class">Foam::virtualMassModels::noVirtualMass</class>
    <class kind="class">Foam::virtualMassModels::Zuber</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::wallDampingModels</name>
    <filename>a01847.html</filename>
    <class kind="class">Foam::wallDampingModels::cosine</class>
    <class kind="class">Foam::wallDampingModels::interpolated</class>
    <class kind="class">Foam::wallDampingModels::linear</class>
    <class kind="class">Foam::wallDampingModels::noWallDamping</class>
    <class kind="class">Foam::wallDampingModels::sine</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::wallLubricationModels</name>
    <filename>a01848.html</filename>
    <class kind="class">Foam::wallLubricationModels::Antal</class>
    <class kind="class">Foam::wallLubricationModels::Frank</class>
    <class kind="class">Foam::wallLubricationModels::noWallLubrication</class>
    <class kind="class">Foam::wallLubricationModels::TomiyamaWallLubrication</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>OpenQBMM</title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">intro_sec</docanchor>
    <docanchor file="index" title="Contact information">contact_sec</docanchor>
    <docanchor file="index" title="Copyright">copyright_sec</docanchor>
  </compound>
</tagfile>
