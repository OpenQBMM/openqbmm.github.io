<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>aggregationKernel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/aggregationKernel/</path>
    <filename>a00190</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>abce02722c305557cb5730a9610ba0d51</anchor>
      <arglist>(aggregationKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a9dd0aa6f3fae81195037437f9fb2042f</anchor>
      <arglist>(aggregationKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aggregationKernel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/aggregationKernel/</path>
    <filename>a00191</filename>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>alphaAndDiameter.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/alphaAndDiameter/</path>
    <filename>a00192</filename>
  </compound>
  <compound kind="file">
    <name>alphaAndDiameter.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/alphaAndDiameter/</path>
    <filename>a00193</filename>
    <includes id="a00386" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::alphaAndDiameter</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>Antal.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/Antal/</path>
    <filename>a00194</filename>
  </compound>
  <compound kind="file">
    <name>Antal.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/Antal/</path>
    <filename>a00195</filename>
    <includes id="a00594" name="wallLubricationModel.H" local="yes" imported="no">wallLubricationModel.H</includes>
    <class kind="class">Foam::wallLubricationModels::Antal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>aspectRatioModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a00196</filename>
  </compound>
  <compound kind="file">
    <name>aspectRatioModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a00197</filename>
    <class kind="class">Foam::aspectRatioModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>AyaziShamlou.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/AyaziShamlou/</path>
    <filename>a00198</filename>
    <includes id="a00199" name="AyaziShamlou.H" local="yes" imported="no">AyaziShamlou.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>aee88bb613072a5f64915965fd870f306</anchor>
      <arglist>(AyaziShamlou, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>ae91cc006297638cdc5e7a12a87ce8e8d</anchor>
      <arglist>(breakupKernel, AyaziShamlou, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AyaziShamlou.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/AyaziShamlou/</path>
    <filename>a00199</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::AyaziShamlou</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>basicFieldMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/basicFieldMomentInversion/</path>
    <filename>a00200</filename>
    <includes id="a00201" name="basicFieldMomentInversion.H" local="yes" imported="no">basicFieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ae421e805e1c811481923fc7b9556487b</anchor>
      <arglist>(basicFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>afb6d54b8864cf92eb887585f1fbd72b5</anchor>
      <arglist>(fieldMomentInversion, basicFieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basicFieldMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/basicFieldMomentInversion/</path>
    <filename>a00201</filename>
    <includes id="a00284" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::basicFieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>BeisheuvelBubblePressure.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/BeisheuvelBubblePressure/</path>
    <filename>a00202</filename>
  </compound>
  <compound kind="file">
    <name>BeisheuvelBubblePressure.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/BeisheuvelBubblePressure/</path>
    <filename>a00203</filename>
    <includes id="a00215" name="bubblePressureModel.H" local="yes" imported="no">bubblePressureModel.H</includes>
    <class kind="class">Foam::bubblePressureModels::Beisheuvel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::bubblePressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>betaEQMOM.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/beta/</path>
    <filename>a00204</filename>
    <includes id="a00205" name="betaEQMOM.H" local="yes" imported="no">betaEQMOM.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aba3b5bd4e77aefe9210dac8bc85eaf71</anchor>
      <arglist>(betaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a48cb1021f5b67b9795c0f17ac2d5e2a6</anchor>
      <arglist>(extendedMomentInversion, betaEQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>betaEQMOM.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/beta/</path>
    <filename>a00205</filename>
    <includes id="a00282" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::betaEQMOM</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>BlendedInterfacialModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/</path>
    <filename>a00206</filename>
  </compound>
  <compound kind="file">
    <name>BlendedInterfacialModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/</path>
    <filename>a00207</filename>
    <includes id="a00209" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <includes id="a00487" name="phasePair.H" local="yes" imported="no">phasePair.H</includes>
    <includes id="a00468" name="orderedPhasePair.H" local="yes" imported="no">orderedPhasePair.H</includes>
    <class kind="class">Foam::BlendedInterfacialModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>blendingMethod.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/blendingMethod/</path>
    <filename>a00208</filename>
  </compound>
  <compound kind="file">
    <name>blendingMethod.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/blendingMethod/</path>
    <filename>a00209</filename>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <class kind="class">Foam::blendingMethod</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>breakupKernel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/breakupKernel/</path>
    <filename>a00210</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>ab205061f0523b0c0145ab52cb5a15fa7</anchor>
      <arglist>(breakupKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a226d16ce92fe729b204a751b4b002599</anchor>
      <arglist>(breakupKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>breakupKernel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/breakupKernel/</path>
    <filename>a00211</filename>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>Brownian.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/Brownian/</path>
    <filename>a00212</filename>
    <includes id="a00213" name="Brownian.H" local="yes" imported="no">Brownian.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a076221bfaf795356aff635f898ab8962</anchor>
      <arglist>(Brownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a4c6c4b45a7436ec7f10b0bcd7b9d3a75</anchor>
      <arglist>(aggregationKernel, Brownian, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Brownian.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/Brownian/</path>
    <filename>a00213</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::Brownian</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>bubblePressureModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/bubblePressureModel/</path>
    <filename>a00214</filename>
  </compound>
  <compound kind="file">
    <name>bubblePressureModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/bubblePressureModel/</path>
    <filename>a00215</filename>
    <includes id="a00592" name="wallDependentModel.H" local="yes" imported="no">wallDependentModel.H</includes>
    <class kind="class">Foam::bubblePressureModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00216</filename>
  </compound>
  <compound kind="file">
    <name>Burns.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Burns/</path>
    <filename>a00217</filename>
  </compound>
  <compound kind="file">
    <name>Burns.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Burns/</path>
    <filename>a00218</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::Burns</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>CarnahanStarlingRadial.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/CarnahanStarling/</path>
    <filename>a00219</filename>
  </compound>
  <compound kind="file">
    <name>CarnahanStarlingRadial.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/CarnahanStarling/</path>
    <filename>a00220</filename>
    <includes id="a00507" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::radialModels::CarnahanStarling</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
  </compound>
  <compound kind="file">
    <name>conditionalMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/conditional/</path>
    <filename>a00221</filename>
    <includes id="a00222" name="conditionalMomentInversion.H" local="yes" imported="no">conditionalMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>conditionalMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/conditional/</path>
    <filename>a00222</filename>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <includes id="a00581" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
    <includes id="a00399" name="nDimensionalMappedList.H" local="yes" imported="no">nDimensionalMappedList.H</includes>
    <includes id="a00223" name="conditionalMomentInversionI.H" local="yes" imported="no">conditionalMomentInversionI.H</includes>
    <class kind="class">Foam::conditionalMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>conditionalMomentInversionI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/multivariate/conditional/</path>
    <filename>a00223</filename>
  </compound>
  <compound kind="file">
    <name>conductivityModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/conductivityModel/</path>
    <filename>a00224</filename>
  </compound>
  <compound kind="file">
    <name>conductivityModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/conductivityModel/</path>
    <filename>a00225</filename>
    <class kind="class">Foam::kineticTheoryModels::conductivityModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantAggregation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/constantAggregation/</path>
    <filename>a00226</filename>
    <includes id="a00227" name="constantAggregation.H" local="yes" imported="no">constantAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>af835c9d013a20a975c6f4e57ee9149c8</anchor>
      <arglist>(constantAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>ace2c634a7ff538fbb4744268b13a2c6a</anchor>
      <arglist>(aggregationKernel, constantAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constantAggregation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/constantAggregation/</path>
    <filename>a00227</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::constantAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>constantAspectRatio.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/constantAspectRatio/</path>
    <filename>a00228</filename>
  </compound>
  <compound kind="file">
    <name>constantAspectRatio.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/constantAspectRatio/</path>
    <filename>a00229</filename>
    <includes id="a00197" name="aspectRatioModel.H" local="yes" imported="no">aspectRatioModel.H</includes>
    <class kind="class">Foam::aspectRatioModels::constantAspectRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantBreakup.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/constantBreakup/</path>
    <filename>a00230</filename>
    <includes id="a00231" name="constantBreakup.H" local="yes" imported="no">constantBreakup.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a4338754b0aa20aed5a47b1d88f7fa364</anchor>
      <arglist>(constantBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a7337b8a9505305ea7461d4aa5aee0c6f</anchor>
      <arglist>(breakupKernel, constantBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constantBreakup.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/constantBreakup/</path>
    <filename>a00231</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::constantBreakup</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>constantGrowth.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/constantGrowth/</path>
    <filename>a00232</filename>
    <includes id="a00233" name="constantGrowth.H" local="yes" imported="no">constantGrowth.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::growthModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a05800d31989e6a63a1927724fcce12e4</anchor>
      <arglist>(constantGrowth, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a6ad7bf9e04f9a2619c1348631b695132</anchor>
      <arglist>(growthModel, constantGrowth, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constantGrowth.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/constantGrowth/</path>
    <filename>a00233</filename>
    <includes id="a00320" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::growthModels::constantGrowth</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::growthModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantLiftCoefficient.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/constantLiftCoefficient/</path>
    <filename>a00234</filename>
  </compound>
  <compound kind="file">
    <name>constantLiftCoefficient.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/constantLiftCoefficient/</path>
    <filename>a00235</filename>
    <includes id="a00352" name="liftModel.H" local="yes" imported="no">liftModel.H</includes>
    <class kind="class">Foam::liftModels::constantLiftCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantTurbulentDispersionCoefficient.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/</path>
    <filename>a00236</filename>
  </compound>
  <compound kind="file">
    <name>constantTurbulentDispersionCoefficient.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/constantTurbulentDispersionCoefficient/</path>
    <filename>a00237</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>constantVirtualMassCoefficient.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/</path>
    <filename>a00238</filename>
  </compound>
  <compound kind="file">
    <name>constantVirtualMassCoefficient.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/constantVirtualMassCoefficient/</path>
    <filename>a00239</filename>
    <includes id="a00584" name="virtualMassModel.H" local="yes" imported="no">virtualMassModel.H</includes>
    <class kind="class">Foam::virtualMassModels::constantVirtualMassCoefficient</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>contErrs.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00240</filename>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr1</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>afaf4bfcfc6d0571877bd09f94658eee7</anchor>
      <arglist>(&quot;contErr1&quot;, fvc::ddt(alpha1, rho1)+fvc::div(alphaRhoPhi1))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>contErr2</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ad5ade12320f1287905a7a66228d39d02</anchor>
      <arglist>(&quot;contErr2&quot;, fvc::ddt(alpha2, rho2)+fvc::div(alphaRhoPhi2))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>correctContErrs.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00241</filename>
    <member kind="variable">
      <type></type>
      <name>contErr1</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a6a527bc5c46a9389753a1e6a393d214b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>contErr2</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a43720ed9ae3dd30f0241cd5e0df173db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cosineWallDamping.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/cosine/</path>
    <filename>a00242</filename>
  </compound>
  <compound kind="file">
    <name>cosineWallDamping.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/cosine/</path>
    <filename>a00243</filename>
    <includes id="a00332" name="interpolatedWallDamping.H" local="yes" imported="no">interpolatedWallDamping.H</includes>
    <class kind="class">Foam::wallDampingModels::cosine</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/CourantNos.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00244</filename>
  </compound>
  <compound kind="file">
    <name>mixingTransportFoam/CourantNos.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/mixingTransportFoam/</path>
    <filename>a00245</filename>
  </compound>
  <compound kind="file">
    <name>pbeTransportFoam/CourantNos.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeTransportFoam/</path>
    <filename>a00246</filename>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/CourantNos.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00247</filename>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>ace353e990d7324b8758018469470d239</anchor>
      <arglist>(label nodei=0;nodei&lt; phase1.nNodes();nodei++)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CoNum</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a849d4984464537af64ca83f816e85c88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>createDDtU.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/pU/</path>
    <filename>a00248</filename>
  </compound>
  <compound kind="file">
    <name>createFieldRefs.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00249</filename>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>alpha2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ac9dc1cee1e8f17d03b9593718fce9c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi1</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aaafa68dab09410efefed1b712990703c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi1</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aaad8901f92b1f428f7051c292e3fda67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi1</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ad865670ce6d37f88f20cc4527e47f132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a8401107915808b316cc7b5ef0ae2a858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ad8a0eefdf003c4fa6238cce669248e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a30a298a89b505b45c033dbf36df639e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a1a97abcf6c141f539994c8a21c8daca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo1</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a540e6c79954fcd99eeaee3e39c27ddac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a1ff2111ac4bff6a09c4c0ab1f2249d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho1</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>af72fd2ce0bf948096cadebf34827046a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi1</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ab9a1e315298d6f85139930962fd52c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>rho2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a9ec8b063b6caffe2a2f6778c078f2fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi2</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a62305a7b59b36b0c38c2742939a6821c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/createFields.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00250</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\n&quot;&lt;&lt; endl;autoPtr&lt; rhoThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>abe69f56d2542c42d3087a7412902b44a</anchor>
      <arglist>(rhoThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a5799e0a833b5865ada8f84d88a03a8c1</anchor>
      <arglist>(args.executable(),&quot;h&quot;,&quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>aa74838e1f8f89be91e7a5f1d70d08fb1</anchor>
      <arglist>(IOobject(                                    &quot;rho&quot;,                                       runTime.timeName(),                                       mesh,                                       IOobject::NO_READ,                                       IOobject::NO_WRITE                       ), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field U\n&quot;&lt;&lt; endl;volVectorField U(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);Info&lt;&lt; &quot;Creating turbulence model\n&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ac06391579e3bd64067c1f6a8e84e6f35</anchor>
      <arglist>(compressible::turbulenceModel::New(                                       rho,                                       U,                                       phi,                                       thermo                       ))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>aad0c921770bd26de425cedad0c8ae8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const volScalarField &amp;</type>
      <name>psi</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>aba679271c41582099c8ccf4827fdf217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt;&lt; &quot;Reading field p_rgh\n&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);p_rgh=p-rho *gh;mesh.setFluxRequired(p_rgh.name());Info&lt;&lt; &quot;Creating field dpdt\n&quot;&lt;&lt; endl;volScalarField dpdt(IOobject(&quot;dpdt&quot;, runTime.timeName(), mesh), mesh, dimensionedScalar(&quot;dpdt&quot;, p.dimensions()/dimTime, 0));Info&lt;&lt; &quot;Creating field kinetic energy K\n&quot;&lt;&lt; endl;volScalarField K(&quot;K&quot;, 0.5 *magSqr(U));Info&lt;&lt; &quot;Reading populationBalanceProperties\n&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>af238d5f26618a0393bfdeaa9ca937c61</anchor>
      <arglist>(populationBalanceModel::New(                                    &quot;populationBalance&quot;, populationBalanceProperties, phi                       ))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingTransportFoam/createFields.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/mixingTransportFoam/</path>
    <filename>a00251</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\n&quot;&lt;&lt; endl;autoPtr&lt; rhoThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>abe69f56d2542c42d3087a7412902b44a</anchor>
      <arglist>(rhoThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a5799e0a833b5865ada8f84d88a03a8c1</anchor>
      <arglist>(args.executable(),&quot;h&quot;,&quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>aa74838e1f8f89be91e7a5f1d70d08fb1</anchor>
      <arglist>(IOobject(                                    &quot;rho&quot;,                                       runTime.timeName(),                                       mesh,                                       IOobject::NO_READ,                                       IOobject::NO_WRITE                       ), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field U\n&quot;&lt;&lt; endl;volVectorField U(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);Info&lt;&lt; &quot;Creating turbulence model\n&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>ac06391579e3bd64067c1f6a8e84e6f35</anchor>
      <arglist>(compressible::turbulenceModel::New(                                       rho,                                       U,                                       phi,                                       thermo                       ))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>aad0c921770bd26de425cedad0c8ae8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt;&lt; &quot;Calculating field g.h\n&quot;&lt;&lt; endl;volScalarField gh(&quot;gh&quot;, g &amp;mesh.C());surfaceScalarField ghf(&quot;ghf&quot;, g &amp;mesh.Cf());Info&lt;&lt; &quot;Reading field p_rgh\n&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);p_rgh=p-rho *gh;label pRefCell=0;scalar pRefValue=0.0;setRefCell(p, p_rgh, pimple.dict(), pRefCell, pRefValue);Info&lt;&lt; &quot;Reading mixingProperties\n&quot;&lt;&lt; endl;IOdictionary mixingProperties(IOobject(&quot;mixingProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));surfaceScalarField phiByRho(&quot;phiByRho&quot;, phi/fvc::interpolate(rho));autoPtr&lt; mixingModel &gt;</type>
      <name>mixing</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>aee75455a3675deb5b01fdde695d18200</anchor>
      <arglist>(mixingModel::New(                                    &quot;mixing&quot;, mixingProperties, phiByRho                       ))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pbeFoam/createFields.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a00252</filename>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab92b9dd4dbbce3fb3ffc8bfbf3552f4e</anchor>
      <arglist>(mesh.nCells()!=1)</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; nl&lt;&lt; &quot;Reading thermophysical properties\n&quot;&lt;&lt; endl;autoPtr&lt; psiThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a7527b65b79108f3eb3799b88370cd144</anchor>
      <arglist>(psiThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a5799e0a833b5865ada8f84d88a03a8c1</anchor>
      <arglist>(args.executable(),&quot;h&quot;,&quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ad64697a7bccdd22d7300f9ff52dcdbfc</anchor>
      <arglist>(IOobject(                                    &quot;rho&quot;,                                       runTime.timeName(),                                       mesh,                                       IOobject::NO_READ,                                       IOobject::AUTO_WRITE                       ), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>U</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a2cf53f2d880076e92789c7297fc0423d</anchor>
      <arglist>(IOobject(                                    &quot;U&quot;,                                       runTime.timeName(),                                       mesh,                                       IOobject::NO_READ,                                       IOobject::NO_WRITE                       ), mesh, dimensionedVector(&quot;zero&quot;, dimVelocity, vector::zero), p.boundaryField().types())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Creating turbulence model.\n&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a1c429db236c593344360ec76e4a55df6</anchor>
      <arglist>(compressible::turbulenceModel::New(                                       rho,                                       U,                                       phi,                                       thermo                       ))</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading populationBalanceProperties\n&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a045663f4195add2d0909fda9391fab6d</anchor>
      <arglist>(populationBalanceModel::New(                                    &quot;populationBalance&quot;,                                       populationBalanceProperties,                                       phi                       ))</arglist>
    </member>
    <member kind="variable">
      <type>psiThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a0250ef8e3f4fe4312875a0fc54bf3c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pbeTransportFoam/createFields.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeTransportFoam/</path>
    <filename>a00253</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading thermophysical properties\n&quot;&lt;&lt; endl;autoPtr&lt; rhoThermo &gt;</type>
      <name>pThermo</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>abe69f56d2542c42d3087a7412902b44a</anchor>
      <arglist>(rhoThermo::New(mesh))</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>validate</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a5799e0a833b5865ada8f84d88a03a8c1</anchor>
      <arglist>(args.executable(),&quot;h&quot;,&quot;e&quot;)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rho</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aa74838e1f8f89be91e7a5f1d70d08fb1</anchor>
      <arglist>(IOobject(                                    &quot;rho&quot;,                                       runTime.timeName(),                                       mesh,                                       IOobject::NO_READ,                                       IOobject::NO_WRITE                       ), thermo.rho())</arglist>
    </member>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Reading field U\n&quot;&lt;&lt; endl;volVectorField U(IOobject(&quot;U&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);Info&lt;&lt; &quot;Creating turbulence model\n&quot;&lt;&lt; endl;autoPtr&lt; compressible::turbulenceModel &gt;</type>
      <name>turbulence</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ac06391579e3bd64067c1f6a8e84e6f35</anchor>
      <arglist>(compressible::turbulenceModel::New(                                       rho,                                       U,                                       phi,                                       thermo                       ))</arglist>
    </member>
    <member kind="variable">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aad0c921770bd26de425cedad0c8ae8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volScalarField &amp;</type>
      <name>p</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a334650304cdcdff41898bee9eaf2e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Info&lt;&lt; &quot;Calculating field g.h\n&quot;&lt;&lt; endl;volScalarField gh(&quot;gh&quot;, g &amp;mesh.C());surfaceScalarField ghf(&quot;ghf&quot;, g &amp;mesh.Cf());Info&lt;&lt; &quot;Reading field p_rgh\n&quot;&lt;&lt; endl;volScalarField p_rgh(IOobject(&quot;p_rgh&quot;, runTime.timeName(), mesh, IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh);p_rgh=p-rho *gh;label pRefCell=0;scalar pRefValue=0.0;setRefCell(p, p_rgh, pimple.dict(), pRefCell, pRefValue);Info&lt;&lt; &quot;Reading populationBalanceProperties\n&quot;&lt;&lt; endl;IOdictionary populationBalanceProperties(IOobject(&quot;populationBalanceProperties&quot;, runTime.constant(), mesh, IOobject::MUST_READ_IF_MODIFIED, IOobject::NO_WRITE));surfaceScalarField phiByRho(&quot;phiByRho&quot;, phi/fvc::interpolate(rho));autoPtr&lt; populationBalanceModel &gt;</type>
      <name>populationBalance</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a85ef080b591b16bd8842a924cc220a73</anchor>
      <arglist>(populationBalanceModel::New(                                    &quot;populationBalance&quot;, populationBalanceProperties, phiByRho                       ))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/createFields.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00254</filename>
    <includes id="a00255" name="createMRF.H" local="yes" imported="no">createMRF.H</includes>
  </compound>
  <compound kind="file">
    <name>createMRF.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00255</filename>
    <member kind="function">
      <type>IOMRFZoneList</type>
      <name>MRF</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a5b7f53d1619a8564c620d6d6ab79f4f0</anchor>
      <arglist>(mesh)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aafef8a9624495f082e4ad624cca20b3f</anchor>
      <arglist>(U1)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abeb41b20ce37679678c04194e33b3966</anchor>
      <arglist>(U2)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a3d8a3fae539731d0068343d8b35d062c</anchor>
      <arglist>(U)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>createSingleCellMesh.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a00256</filename>
    <member kind="function">
      <type>Info&lt;&lt; &quot;Constructing single cell mesh&quot;&lt;&lt; nl&lt;&lt; endl;labelList owner(6, label(0));labelList neighbour(0);pointField points(8);points[0]=vector(0, 0, 0);points[1]=vector(1, 0, 0);points[2]=vector(1, 1, 0);points[3]=vector(0, 1, 0);points[4]=vector(0, 0, 1);points[5]=vector(1, 0, 1);points[6]=vector(1, 1, 1);points[7]=vector(0, 1, 1);const cellModel &amp;hexa=*(cellModeller::lookup(&quot;hex&quot;));faceList faces=hexa.modelFaces();fvMesh mesh(IOobject(fvMesh::defaultRegion, runTime.timeName(), runTime, IOobject::READ_IF_PRESENT), xferMove&lt; Field&lt; vector &gt;&gt;(points), faces.xfer(), owner.xfer(), neighbour.xfer());List&lt; polyPatch * &gt;</type>
      <name>patches</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a36a9f0467bdd55ece250a2d8e21bfdab</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>mesh</type>
      <name>addFvPatches</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>aba98bd4bf2ae6ad20eaee4b756080d6f</anchor>
      <arglist>(patches)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>patches</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a6eea546b8fab7318f4d0d67e4ff28fde</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>daughterDistribution.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/daughterDistribution/</path>
    <filename>a00257</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a76416983309f14ff79252f78e2ba5f45</anchor>
      <arglist>(daughterDistribution, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a43b4a6fcc71e245c8ade315846b6d6a5</anchor>
      <arglist>(daughterDistribution, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>daughterDistribution.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/daughterDistribution/</path>
    <filename>a00258</filename>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistribution</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>Davidson.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Davidson/</path>
    <filename>a00259</filename>
  </compound>
  <compound kind="file">
    <name>Davidson.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Davidson/</path>
    <filename>a00260</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::Davidson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>DDtU.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/pU/</path>
    <filename>a00261</filename>
    <member kind="variable">
      <type></type>
      <name>DDtU2</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a7016e96187a175bd23898ceae72d1f55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>differentialForceAggregation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/differentialForceAggregation/</path>
    <filename>a00262</filename>
    <includes id="a00263" name="differentialForceAggregation.H" local="yes" imported="no">differentialForceAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a901fe18b45ba8ca91a036e0ca43a3916</anchor>
      <arglist>(differentialForceAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a61b52f2b3984830ce75e98417e4a1503</anchor>
      <arglist>(aggregationKernel, differentialForceAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>differentialForceAggregation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/differentialForceAggregation/</path>
    <filename>a00263</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::differentialForceAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/diffusionModel/diffusionModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00264</filename>
    <includes id="a00266" name="mixingModels/mixingSubModels/diffusionModels/diffusionModel/diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a35d38e6f01483fb934bf952c4d16dc9e</anchor>
      <arglist>(diffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a66987e2e267fbb32d0569ccf0a28b87d</anchor>
      <arglist>(diffusionModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/diffusionModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00265</filename>
    <includes id="a00267" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a31a8f344b0539bd5cce6c4f4576aa297</anchor>
      <arglist>(diffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a448ce681381f516ef5a82ad59235caa1</anchor>
      <arglist>(diffusionModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/diffusionModel/diffusionModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00266</filename>
    <class kind="class">Foam::mixingSubModels::diffusionModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/diffusionModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00267</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>dragModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/dragModel/</path>
    <filename>a00268</filename>
  </compound>
  <compound kind="file">
    <name>dragModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/dragModel/</path>
    <filename>a00269</filename>
    <class kind="class">Foam::dragModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>EEqn.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00270</filename>
    <member kind="function">
      <type>fvScalarMatrix</type>
      <name>EEqn</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>af5430a617ae14331f7560c9f112309bc</anchor>
      <arglist>(fvm::ddt(rho, he)+fvm::div(phi, he)+fvc::ddt(rho, K)+fvc::div(phi, K)+(                                       he.name()==&quot;e&quot;                               ?fvc::div                                       (                                                       fvc::absolute(phi/fvc::interpolate(rho), U),                                                       p,                                                    &quot;div(phiv,p)&quot;                                       )                               :-dpdt                       )-fvm::laplacian(turbulence-&gt;alphaEff(), he)==radiation-&gt;Sh(thermo, he)+fvOptions(rho, he))</arglist>
    </member>
    <member kind="function">
      <type>EEqn</type>
      <name>relax</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a9b1e3cf7921c1d57830a6970779f3d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>constrain</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a99e52b6aa83a3087ae81ccb1030aceef</anchor>
      <arglist>(EEqn)</arglist>
    </member>
    <member kind="function">
      <type>EEqn</type>
      <name>solve</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>ac123867940006fb14e8346d9bdc38f8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>correct</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a45936480b8c1b0bb71ede46b78d0269d</anchor>
      <arglist>(he)</arglist>
    </member>
    <member kind="function">
      <type>thermo</type>
      <name>correct</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a8f2ec7df0ad2ec79360a5d964f55de87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigenSolver.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/eigenSolver/</path>
    <filename>a00271</filename>
    <includes id="a00272" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
  </compound>
  <compound kind="file">
    <name>eigenSolver.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/eigenSolver/</path>
    <filename>a00272</filename>
    <class kind="class">Foam::eigenSolver</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>Ergun.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/Ergun/</path>
    <filename>a00273</filename>
  </compound>
  <compound kind="file">
    <name>Ergun.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/Ergun/</path>
    <filename>a00274</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::Ergun</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>erosion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/erosion/</path>
    <filename>a00275</filename>
    <includes id="a00276" name="erosion.H" local="yes" imported="no">erosion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a01f727723bb2f7668ab5bc761f4c248a</anchor>
      <arglist>(erosion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a62e79e44ef758cea9472b6d5dd80c766</anchor>
      <arglist>(daughterDistribution, erosion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>erosion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/erosion/</path>
    <filename>a00276</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::erosion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>exponentialBreakup.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/exponentialBreakup/</path>
    <filename>a00277</filename>
    <includes id="a00278" name="exponentialBreakup.H" local="yes" imported="no">exponentialBreakup.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a454f3683df96243c1c3df745293c4541</anchor>
      <arglist>(exponentialBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a5bfa78660a2a6bf5acc7c81106fde397</anchor>
      <arglist>(breakupKernel, exponentialBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exponentialBreakup.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/exponentialBreakup/</path>
    <filename>a00278</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::exponentialBreakup</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>extendedFieldMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/extendedFieldMomentInversion/</path>
    <filename>a00279</filename>
    <includes id="a00280" name="extendedFieldMomentInversion.H" local="yes" imported="no">extendedFieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a0c214123cdb6bf17bd34e6ba3a78e85f</anchor>
      <arglist>(extendedFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a081c8abae783263ca5c2d8749b9cad86</anchor>
      <arglist>(fieldMomentInversion, extendedFieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>extendedFieldMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/extendedFieldMomentInversion/</path>
    <filename>a00280</filename>
    <includes id="a00284" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00282" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::extendedFieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>extendedMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/extendedMomentInversion/</path>
    <filename>a00281</filename>
    <includes id="a00282" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <includes id="a00272" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a9beec8ce64dc3eb33ed3ff09a52d34e5</anchor>
      <arglist>(extendedMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a40163a8d4828ced85dea8a29591c7942</anchor>
      <arglist>(extendedMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>extendedMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/extendedMomentInversion/</path>
    <filename>a00282</filename>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::extendedMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>fieldMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00283</filename>
    <includes id="a00284" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ab5fa56c52c6ef16704a156e8c403a3cd</anchor>
      <arglist>(fieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>abb1c2e5ec33b7d24d9997b1e0c9e2a1b</anchor>
      <arglist>(fieldMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fieldMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00284</filename>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00384" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00285" name="fieldMomentInversionI.H" local="yes" imported="no">fieldMomentInversionI.H</includes>
    <class kind="class">Foam::fieldMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>fieldMomentInversionI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00285</filename>
  </compound>
  <compound kind="file">
    <name>firstOrderKinetic.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/firstOrderKinetic/</path>
    <filename>a00286</filename>
    <includes id="a00287" name="firstOrderKinetic.H" local="yes" imported="no">firstOrderKinetic.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>afd60502c12ea35682f86df03f766a1dc</anchor>
      <arglist>(firstOrderKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2d82830cbc41ab2e2600cc213ee8f20a</anchor>
      <arglist>(univariateMomentAdvection, firstOrderKinetic, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>firstOrderKinetic.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/firstOrderKinetic/</path>
    <filename>a00287</filename>
    <includes id="a00565" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <class kind="class">Foam::firstOrderKinetic</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>FokkerPlanck.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/FokkerPlanck/</path>
    <filename>a00288</filename>
    <includes id="a00289" name="FokkerPlanck.H" local="yes" imported="no">FokkerPlanck.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a5ee518d2e777e92d55b5142322520192</anchor>
      <arglist>(FokkerPlanck, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a4f2ef8e6b8103aec93807cd5b8659911</anchor>
      <arglist>(mixingKernel, FokkerPlanck, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FokkerPlanck.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/FokkerPlanck/</path>
    <filename>a00289</filename>
    <includes id="a00371" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernels::FokkerPlanck</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
  </compound>
  <compound kind="file">
    <name>Frank.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/Frank/</path>
    <filename>a00290</filename>
  </compound>
  <compound kind="file">
    <name>Frank.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/Frank/</path>
    <filename>a00291</filename>
    <includes id="a00594" name="wallLubricationModel.H" local="yes" imported="no">wallLubricationModel.H</includes>
    <class kind="class">Foam::wallLubricationModels::Frank</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>frictionalStressModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/frictionalStressModel/</path>
    <filename>a00292</filename>
  </compound>
  <compound kind="file">
    <name>frictionalStressModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/frictionalStressModel/</path>
    <filename>a00293</filename>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>fullFragmentation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/fullFragmentation/</path>
    <filename>a00294</filename>
    <includes id="a00295" name="fullFragmentation.H" local="yes" imported="no">fullFragmentation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a6997e33657a0008b01a9b12b90d7bd10</anchor>
      <arglist>(fullFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ae31c29d61fe94ab903b2c5841b3173f8</anchor>
      <arglist>(daughterDistribution, fullFragmentation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fullFragmentation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/fullFragmentation/</path>
    <filename>a00295</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::fullFragmentation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>gammaEQMOM.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/gamma/</path>
    <filename>a00296</filename>
    <includes id="a00297" name="gammaEQMOM.H" local="yes" imported="no">gammaEQMOM.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a5538d367d57069f3187e09fb0a7d2a9d</anchor>
      <arglist>(gammaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a58f6c31a874dc8c6ef95eb608f2301e0</anchor>
      <arglist>(extendedMomentInversion, gammaEQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gammaEQMOM.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/gamma/</path>
    <filename>a00297</filename>
    <includes id="a00282" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::gammaEQMOM</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>gaussLobattoMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussLobattoMomentInversion/</path>
    <filename>a00298</filename>
    <includes id="a00299" name="gaussLobattoMomentInversion.H" local="yes" imported="no">gaussLobattoMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a1870f4400a3553172ddbd7b520d56e70</anchor>
      <arglist>(gaussLobattoMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>abcbde07469f4b6865f880188dfaaed03</anchor>
      <arglist>(univariateMomentInversion, gaussLobattoMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussLobattoMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussLobattoMomentInversion/</path>
    <filename>a00299</filename>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::gaussLobattoMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>gaussMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussMomentInversion/</path>
    <filename>a00300</filename>
    <includes id="a00301" name="gaussMomentInversion.H" local="yes" imported="no">gaussMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ab292baa664c0b1ffe9902ad93185b24f</anchor>
      <arglist>(gaussMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a819bba564847deaf815d6be3f1c72bac</anchor>
      <arglist>(univariateMomentInversion, gaussMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussMomentInversion/</path>
    <filename>a00301</filename>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::gaussMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>gaussRadauMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussRadauMomentInversion/</path>
    <filename>a00302</filename>
    <includes id="a00303" name="gaussRadauMomentInversion.H" local="yes" imported="no">gaussRadauMomentInversion.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ae28a8693ec96aa0ce2f10a129012de21</anchor>
      <arglist>(gaussRadauMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a0b3e4d883035d960f7255cc8bed29329</anchor>
      <arglist>(univariateMomentInversion, gaussRadauMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussRadauMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/gaussRadauMomentInversion/</path>
    <filename>a00303</filename>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <class kind="class">Foam::gaussRadauMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>generateMoments.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/</path>
    <filename>a00304</filename>
  </compound>
  <compound kind="file">
    <name>Gibilaro.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/Gibilaro/</path>
    <filename>a00305</filename>
  </compound>
  <compound kind="file">
    <name>Gibilaro.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/Gibilaro/</path>
    <filename>a00306</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::Gibilaro</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>GidaspowConductivity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/Gidaspow/</path>
    <filename>a00307</filename>
  </compound>
  <compound kind="file">
    <name>GidaspowConductivity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/Gidaspow/</path>
    <filename>a00308</filename>
    <includes id="a00225" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Gidaspow</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>GidaspowErgunWenYu.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/GidaspowErgunWenYu/</path>
    <filename>a00309</filename>
  </compound>
  <compound kind="file">
    <name>GidaspowErgunWenYu.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/GidaspowErgunWenYu/</path>
    <filename>a00310</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::GidaspowErgunWenYu</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>GidaspowSchillerNaumann.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/GidaspowSchillerNaumann/</path>
    <filename>a00311</filename>
  </compound>
  <compound kind="file">
    <name>GidaspowSchillerNaumann.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/GidaspowSchillerNaumann/</path>
    <filename>a00312</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::GidaspowSchillerNaumann</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>GidaspowViscosity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/Gidaspow/</path>
    <filename>a00313</filename>
  </compound>
  <compound kind="file">
    <name>GidaspowViscosity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/Gidaspow/</path>
    <filename>a00314</filename>
    <includes id="a00586" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Gidaspow</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
  </compound>
  <compound kind="file">
    <name>Gosman.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Gosman/</path>
    <filename>a00315</filename>
  </compound>
  <compound kind="file">
    <name>Gosman.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Gosman/</path>
    <filename>a00316</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::Gosman</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>granularPressureModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/granularPressureModel/</path>
    <filename>a00317</filename>
  </compound>
  <compound kind="file">
    <name>granularPressureModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/granularPressureModel/</path>
    <filename>a00318</filename>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>growthModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/growthModel/</path>
    <filename>a00319</filename>
    <includes id="a00320" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a808c3e596bb1cee3b5e795d38419b367</anchor>
      <arglist>(growthModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a7fcd4c8a5852e11ff67830a07a4cfe7b</anchor>
      <arglist>(growthModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>growthModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/growthModel/</path>
    <filename>a00320</filename>
    <class kind="class">Foam::populationBalanceSubModels::growthModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairConductivity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/HrenyaSinclair/</path>
    <filename>a00321</filename>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairConductivity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/HrenyaSinclair/</path>
    <filename>a00322</filename>
    <includes id="a00225" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::HrenyaSinclair</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairViscosity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/HrenyaSinclair/</path>
    <filename>a00323</filename>
  </compound>
  <compound kind="file">
    <name>HrenyaSinclairViscosity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/HrenyaSinclair/</path>
    <filename>a00324</filename>
    <includes id="a00586" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::HrenyaSinclair</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
  </compound>
  <compound kind="file">
    <name>hydrodynamicAggregation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/hydrodynamicAggregation/</path>
    <filename>a00325</filename>
    <includes id="a00326" name="hydrodynamicAggregation.H" local="yes" imported="no">hydrodynamicAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a636ec3d763c8c887602ea04a51fad475</anchor>
      <arglist>(hydrodynamicAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>af83bce581ea73f24b1228b0fff351b56</anchor>
      <arglist>(aggregationKernel, hydrodynamicAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hydrodynamicAggregation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/hydrodynamicAggregation/</path>
    <filename>a00326</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::hydrodynamicAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>hyperbolic.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/hyperbolic/</path>
    <filename>a00327</filename>
  </compound>
  <compound kind="file">
    <name>hyperbolic.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/hyperbolic/</path>
    <filename>a00328</filename>
    <includes id="a00209" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::blendingMethods::hyperbolic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::blendingMethods</namespace>
  </compound>
  <compound kind="file">
    <name>IEM.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/IEM/</path>
    <filename>a00329</filename>
    <includes id="a00330" name="IEM.H" local="yes" imported="no">IEM.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a17d0080ebb72975f91a6424916c1cb24</anchor>
      <arglist>(IEM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a9226eeb16fbe06bac390688bc780c047</anchor>
      <arglist>(mixingKernel, IEM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IEM.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/IEM/</path>
    <filename>a00330</filename>
    <includes id="a00371" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernels::IEM</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
  </compound>
  <compound kind="file">
    <name>interpolatedWallDamping.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/interpolated/</path>
    <filename>a00331</filename>
  </compound>
  <compound kind="file">
    <name>interpolatedWallDamping.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/interpolated/</path>
    <filename>a00332</filename>
    <includes id="a00590" name="wallDampingModel.H" local="yes" imported="no">wallDampingModel.H</includes>
    <class kind="class">Foam::wallDampingModels::interpolated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>IshiiZuber.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/IshiiZuber/</path>
    <filename>a00333</filename>
  </compound>
  <compound kind="file">
    <name>IshiiZuber.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/IshiiZuber/</path>
    <filename>a00334</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::IshiiZuber</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonFrictionalStress.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/JohnsonJackson/</path>
    <filename>a00335</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonFrictionalStress.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/JohnsonJackson/</path>
    <filename>a00336</filename>
    <includes id="a00293" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJackson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleSlipFvPatchVectorField.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/derivedFvPatchFields/JohnsonJacksonParticleSlip/</path>
    <filename>a00337</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleSlipFvPatchVectorField.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/derivedFvPatchFields/JohnsonJacksonParticleSlip/</path>
    <filename>a00338</filename>
    <class kind="class">Foam::JohnsonJacksonParticleSlipFvPatchVectorField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleThetaFvPatchScalarField.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/derivedFvPatchFields/JohnsonJacksonParticleTheta/</path>
    <filename>a00339</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonParticleThetaFvPatchScalarField.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/derivedFvPatchFields/JohnsonJacksonParticleTheta/</path>
    <filename>a00340</filename>
    <class kind="class">Foam::JohnsonJacksonParticleThetaFvPatchScalarField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonSchaefferFrictionalStress.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/JohnsonJacksonSchaeffer/</path>
    <filename>a00341</filename>
  </compound>
  <compound kind="file">
    <name>JohnsonJacksonSchaefferFrictionalStress.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/JohnsonJacksonSchaeffer/</path>
    <filename>a00342</filename>
    <includes id="a00293" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJacksonSchaeffer</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
  </compound>
  <compound kind="file">
    <name>kineticTheoryModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/kineticTheoryModel/</path>
    <filename>a00343</filename>
  </compound>
  <compound kind="file">
    <name>kineticTheoryModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/kineticTheoryModel/</path>
    <filename>a00344</filename>
    <includes id="a00480" name="phaseCompressibleTurbulenceModel.H" local="yes" imported="no">phaseCompressibleTurbulenceModel.H</includes>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <includes id="a00586" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <includes id="a00225" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <includes id="a00507" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <includes id="a00318" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <includes id="a00293" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::RASModels::kineticTheoryModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::RASModels</namespace>
  </compound>
  <compound kind="file">
    <name>Lain.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/Lain/</path>
    <filename>a00345</filename>
  </compound>
  <compound kind="file">
    <name>Lain.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/Lain/</path>
    <filename>a00346</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::Lain</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>Lamb.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/Lamb/</path>
    <filename>a00347</filename>
  </compound>
  <compound kind="file">
    <name>Lamb.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/Lamb/</path>
    <filename>a00348</filename>
    <includes id="a00584" name="virtualMassModel.H" local="yes" imported="no">virtualMassModel.H</includes>
    <class kind="class">Foam::virtualMassModels::Lamb</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>LegendreMagnaudet.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/LegendreMagnaudet/</path>
    <filename>a00349</filename>
  </compound>
  <compound kind="file">
    <name>LegendreMagnaudet.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/LegendreMagnaudet/</path>
    <filename>a00350</filename>
    <includes id="a00352" name="liftModel.H" local="yes" imported="no">liftModel.H</includes>
    <class kind="class">Foam::liftModels::LegendreMagnaudet</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>liftModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/liftModel/</path>
    <filename>a00351</filename>
  </compound>
  <compound kind="file">
    <name>liftModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/liftModel/</path>
    <filename>a00352</filename>
    <class kind="class">Foam::liftModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>linear.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/linear/</path>
    <filename>a00353</filename>
  </compound>
  <compound kind="file">
    <name>linear.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/linear/</path>
    <filename>a00354</filename>
    <includes id="a00209" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::blendingMethods::linear</class>
    <namespace>Foam</namespace>
    <namespace>Foam::blendingMethods</namespace>
  </compound>
  <compound kind="file">
    <name>linearWallDamping.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/linear/</path>
    <filename>a00355</filename>
  </compound>
  <compound kind="file">
    <name>linearWallDamping.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/linear/</path>
    <filename>a00356</filename>
    <includes id="a00332" name="interpolatedWallDamping.H" local="yes" imported="no">interpolatedWallDamping.H</includes>
    <class kind="class">Foam::wallDampingModels::linear</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>lognormalEQMOM.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/lognormal/</path>
    <filename>a00357</filename>
    <includes id="a00358" name="lognormalEQMOM.H" local="yes" imported="no">lognormalEQMOM.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>abc4d0b6de74a1649ffc1fb65e338c2d7</anchor>
      <arglist>(lognormalEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ad5fccf27937c96a424dd25d4f637bcd8</anchor>
      <arglist>(extendedMomentInversion, lognormalEQMOM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lognormalEQMOM.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/lognormal/</path>
    <filename>a00358</filename>
    <includes id="a00282" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
    <class kind="class">Foam::lognormalEQMOM</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>LopezDeBertodano.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/LopezDeBertodano/</path>
    <filename>a00359</filename>
  </compound>
  <compound kind="file">
    <name>LopezDeBertodano.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/LopezDeBertodano/</path>
    <filename>a00360</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::LopezDeBertodano</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>LunPressure.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/Lun/</path>
    <filename>a00361</filename>
  </compound>
  <compound kind="file">
    <name>LunPressure.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/Lun/</path>
    <filename>a00362</filename>
    <includes id="a00318" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::Lun</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>LunSavageRadial.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/LunSavage/</path>
    <filename>a00363</filename>
  </compound>
  <compound kind="file">
    <name>LunSavageRadial.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/LunSavage/</path>
    <filename>a00364</filename>
    <includes id="a00507" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::radialModels::LunSavage</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
  </compound>
  <compound kind="file">
    <name>LuoSvendsen.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/</path>
    <filename>a00365</filename>
    <includes id="a00366" name="LuoSvendsen.H" local="yes" imported="no">LuoSvendsen.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a56da0846e22fec8b96568c9df45a9ff0</anchor>
      <arglist>(LuoSvendsen, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>ab0446f84d3f857ce06af2d4d1e5c4303</anchor>
      <arglist>(breakupKernel, LuoSvendsen, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LuoSvendsen.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/LuoSvendsen/</path>
    <filename>a00366</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::LuoSvendsen</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/home/alberto/Desktop/OpenQBMM/doc/</path>
    <filename>a00367</filename>
  </compound>
  <compound kind="file">
    <name>Miller.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/Miller/</path>
    <filename>a00368</filename>
    <includes id="a00369" name="Miller.H" local="yes" imported="no">Miller.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>a21c76019aa3870a37ecf5edfc30fcbdb</anchor>
      <arglist>(Miller, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>ad2d014bf03b1a0cdaf5ed2889c0bbb2d</anchor>
      <arglist>(nucleationModel, Miller, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Miller.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/Miller/</path>
    <filename>a00369</filename>
    <includes id="a00464" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::Miller</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingKernel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/mixingKernel/</path>
    <filename>a00370</filename>
    <includes id="a00371" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>abf81d58a6669ac3c3505cc7bc83fc3ec</anchor>
      <arglist>(mixingKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>aefa5f150c6459c5dc6b9dd059c74f912</anchor>
      <arglist>(mixingKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingKernel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/mixingKernel/</path>
    <filename>a00371</filename>
    <includes id="a00384" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <class kind="class">Foam::mixingSubModels::mixingKernel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingModel/</path>
    <filename>a00372</filename>
    <includes id="a00373" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>adfa73918fc77af1ed8be0d92e9ee1703</anchor>
      <arglist>(mixingModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a147adac4350a271380c85ada44c2559e</anchor>
      <arglist>(mixingModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingModel/</path>
    <filename>a00373</filename>
    <class kind="class">Foam::mixingModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>mixingTransportFoam.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/mixingTransportFoam/</path>
    <filename>a00374</filename>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a00375</filename>
    <includes id="a00377" name="mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H" local="yes" imported="no">molecularDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>ae282d355e8bb81dcd60d4c2778f12ba5</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a024bbc4b37f0b86ec4a0715a76d74ebc</anchor>
      <arglist>(diffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a00376</filename>
    <includes id="a00378" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H" local="yes" imported="no">molecularDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ab0071e5b6f1d125b17b3e41b73e7e39a</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a0fccf41a74735fc6de29c475cbcd4742</anchor>
      <arglist>(diffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a00377</filename>
    <class kind="class">Foam::mixingSubModels::diffusionModels::molecularDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/molecularDiffusion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/molecularDiffusion/</path>
    <filename>a00378</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::molecularDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>moment.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00379</filename>
    <includes id="a00380" name="moment.H" local="yes" imported="no">moment.H</includes>
  </compound>
  <compound kind="file">
    <name>moment.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00380</filename>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <class kind="class">Foam::moment</class>
    <class kind="class">Foam::moment::iNew</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentFieldSet.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00381</filename>
    <includes id="a00382" name="momentFieldSet.H" local="yes" imported="no">momentFieldSet.H</includes>
  </compound>
  <compound kind="file">
    <name>momentFieldSet.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00382</filename>
    <class kind="class">Foam::momentFieldSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentFieldSetI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00383</filename>
  </compound>
  <compound kind="file">
    <name>momentFieldSets.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00384</filename>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00389" name="moments.H" local="yes" imported="no">moments.H</includes>
    <includes id="a00382" name="momentFieldSet.H" local="yes" imported="no">momentFieldSet.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>momentFieldSet&lt; volUnivariateMoment, volScalarNode &gt;</type>
      <name>volUnivariateMomentFieldSet</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ad3c4993319e0afd86f19cfc10dc05503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; surfaceUnivariateMoment, surfaceScalarNode &gt;</type>
      <name>surfaceUnivariateMomentFieldSet</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aef39351d7073d024b5bd5bea2fc3f279</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>momentGenerationModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/momentGenerationModel/</path>
    <filename>a00385</filename>
  </compound>
  <compound kind="file">
    <name>momentGenerationModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/momentGenerationModel/</path>
    <filename>a00386</filename>
    <class kind="class">Foam::momentGenerationModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentGenerationModelnew.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/momentGenerationModel/</path>
    <filename>a00387</filename>
  </compound>
  <compound kind="file">
    <name>momentI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00388</filename>
  </compound>
  <compound kind="file">
    <name>moments.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/moments/</path>
    <filename>a00389</filename>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00380" name="moment.H" local="yes" imported="no">moment.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>moment&lt; volScalarField, volScalarNode &gt;</type>
      <name>volUnivariateMoment</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a1247bdc497fbec0f2b067b84972d3873</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; surfaceScalarField, surfaceScalarNode &gt;</type>
      <name>surfaceUnivariateMoment</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2e072c80584b4fea8a0173daccfd399a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>momentSet.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentSets/momentSet/</path>
    <filename>a00390</filename>
    <includes id="a00391" name="momentSet.H" local="yes" imported="no">momentSet.H</includes>
  </compound>
  <compound kind="file">
    <name>momentSet.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentSets/momentSet/</path>
    <filename>a00391</filename>
    <includes id="a00392" name="momentSetI.H" local="yes" imported="no">momentSetI.H</includes>
    <class kind="class">Foam::momentSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>momentSetI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentSets/momentSet/</path>
    <filename>a00392</filename>
  </compound>
  <compound kind="file">
    <name>monoKineticQuadratureApproximation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/monoKineticQuadratureApproximation/</path>
    <filename>a00393</filename>
    <includes id="a00394" name="monoKineticQuadratureApproximation.H" local="yes" imported="no">monoKineticQuadratureApproximation.H</includes>
    <includes id="a00581" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
  </compound>
  <compound kind="file">
    <name>monoKineticQuadratureApproximation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/monoKineticQuadratureApproximation/</path>
    <filename>a00394</filename>
    <includes id="a00499" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00384" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00284" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <includes id="a00395" name="monoKineticQuadratureApproximationI.H" local="yes" imported="no">monoKineticQuadratureApproximationI.H</includes>
    <class kind="class">Foam::monoKineticQuadratureApproximation</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>monoKineticQuadratureApproximationI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/monoKineticQuadratureApproximation/</path>
    <filename>a00395</filename>
  </compound>
  <compound kind="file">
    <name>Moraga.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/Moraga/</path>
    <filename>a00396</filename>
  </compound>
  <compound kind="file">
    <name>Moraga.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/Moraga/</path>
    <filename>a00397</filename>
    <includes id="a00352" name="liftModel.H" local="yes" imported="no">liftModel.H</includes>
    <class kind="class">Foam::liftModels::Moraga</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>nDimensionalMappedList.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/nDimensionalMappedList/</path>
    <filename>a00398</filename>
    <includes id="a00399" name="nDimensionalMappedList.H" local="yes" imported="no">nDimensionalMappedList.H</includes>
  </compound>
  <compound kind="file">
    <name>nDimensionalMappedList.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/nDimensionalMappedList/</path>
    <filename>a00399</filename>
    <class kind="class">Foam::nDimensionalMappedList</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>nDimensionalMappedListI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/nDimensionalMappedList/</path>
    <filename>a00400</filename>
  </compound>
  <compound kind="file">
    <name>newAggregationKernel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/aggregationKernel/</path>
    <filename>a00401</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>newAspectRatioModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/aspectRatioModel/</path>
    <filename>a00402</filename>
  </compound>
  <compound kind="file">
    <name>newBlendingMethod.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/blendingMethod/</path>
    <filename>a00403</filename>
  </compound>
  <compound kind="file">
    <name>newBreakupKernel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/breakupKernel/</path>
    <filename>a00404</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>newBubblePressureModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/bubblePressureModel/</path>
    <filename>a00405</filename>
  </compound>
  <compound kind="file">
    <name>newConductivityModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/conductivityModel/</path>
    <filename>a00406</filename>
  </compound>
  <compound kind="file">
    <name>newDaughterDistribution.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/daughterDistribution/</path>
    <filename>a00407</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/diffusionModel/newDiffusionModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00408</filename>
    <includes id="a00266" name="mixingModels/mixingSubModels/diffusionModels/diffusionModel/diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/newDiffusionModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/</path>
    <filename>a00409</filename>
    <includes id="a00267" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/diffusionModel/diffusionModel.H" local="yes" imported="no">diffusionModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newDragModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/dragModel/</path>
    <filename>a00410</filename>
  </compound>
  <compound kind="file">
    <name>newExtendedMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/extended/extendedMomentInversion/</path>
    <filename>a00411</filename>
    <includes id="a00282" name="extendedMomentInversion.H" local="yes" imported="no">extendedMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newFieldMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/fieldMomentInversion/fieldMomentInversion/</path>
    <filename>a00412</filename>
    <includes id="a00284" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newFrictionalStressModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/frictionalStressModel/</path>
    <filename>a00413</filename>
  </compound>
  <compound kind="file">
    <name>newGranularPressureModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/granularPressureModel/</path>
    <filename>a00414</filename>
  </compound>
  <compound kind="file">
    <name>newGrowthModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/growthModels/growthModel/</path>
    <filename>a00415</filename>
    <includes id="a00320" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newLiftModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/liftModel/</path>
    <filename>a00416</filename>
  </compound>
  <compound kind="file">
    <name>newMixingKernel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/mixingKernels/mixingKernel/</path>
    <filename>a00417</filename>
    <includes id="a00371" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
  </compound>
  <compound kind="file">
    <name>newMixingModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingModel/</path>
    <filename>a00418</filename>
    <includes id="a00373" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newNucleationModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/nucleationModel/</path>
    <filename>a00419</filename>
    <includes id="a00464" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newPhaseModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a00420</filename>
  </compound>
  <compound kind="file">
    <name>newPopulationBalanceModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceModel/</path>
    <filename>a00421</filename>
    <includes id="a00495" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
  </compound>
  <compound kind="file">
    <name>newRadialModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/radialModel/</path>
    <filename>a00422</filename>
  </compound>
  <compound kind="file">
    <name>newSwarmCorrection.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a00423</filename>
  </compound>
  <compound kind="file">
    <name>newTurbulentDispersionModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a00424</filename>
  </compound>
  <compound kind="file">
    <name>newUnivariateMomentAdvection.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/univariateMomentAdvection/</path>
    <filename>a00425</filename>
    <includes id="a00565" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
  </compound>
  <compound kind="file">
    <name>newUnivariateMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00426</filename>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
  </compound>
  <compound kind="file">
    <name>newVirtualMassModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a00427</filename>
  </compound>
  <compound kind="file">
    <name>newViscosityModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/viscosityModel/</path>
    <filename>a00428</filename>
  </compound>
  <compound kind="file">
    <name>newWallDampingModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a00429</filename>
  </compound>
  <compound kind="file">
    <name>newWallLubricationModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a00430</filename>
  </compound>
  <compound kind="file">
    <name>noAdvection.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/noAdvection/</path>
    <filename>a00431</filename>
    <includes id="a00432" name="noAdvection.H" local="yes" imported="no">noAdvection.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a8785652e27f2a2f18f0478b1091be44d</anchor>
      <arglist>(noAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a60a12f17e0ded2014aa1d02254ce6476</anchor>
      <arglist>(univariateMomentAdvection, noAdvection, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noAdvection.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/noAdvection/</path>
    <filename>a00432</filename>
    <includes id="a00565" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <class kind="class">Foam::noAdvection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>noBlending.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/noBlending/</path>
    <filename>a00433</filename>
  </compound>
  <compound kind="file">
    <name>noBlending.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/BlendedInterfacialModel/blendingMethods/noBlending/</path>
    <filename>a00434</filename>
    <includes id="a00209" name="blendingMethod.H" local="yes" imported="no">blendingMethod.H</includes>
    <class kind="class">Foam::blendingMethods::noBlending</class>
    <namespace>Foam</namespace>
    <namespace>Foam::blendingMethods</namespace>
  </compound>
  <compound kind="file">
    <name>noBubblePressure.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/noBubblePressure/</path>
    <filename>a00435</filename>
  </compound>
  <compound kind="file">
    <name>noBubblePressure.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/bubblePressureModels/noBubblePressure/</path>
    <filename>a00436</filename>
    <includes id="a00215" name="bubblePressureModel.H" local="yes" imported="no">bubblePressureModel.H</includes>
    <class kind="class">Foam::bubblePressureModels::noBubblePressure</class>
    <namespace>Foam</namespace>
    <namespace>Foam::bubblePressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/noDiffusion/noDiffusion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/noDiffusion/</path>
    <filename>a00437</filename>
    <includes id="a00439" name="mixingModels/mixingSubModels/diffusionModels/noDiffusion/noDiffusion.H" local="yes" imported="no">noDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a432faaba2585abcf703c9b1c67c05331</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a063ffcd74bcfd9ebe3de26bb9433b132</anchor>
      <arglist>(diffusionModel, noDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/noDiffusion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/</path>
    <filename>a00438</filename>
    <includes id="a00440" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/noDiffusion.H" local="yes" imported="no">noDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a842aff0e85dca97889ae993504b45e78</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a6fe185b9482c07be061d5601a474029b</anchor>
      <arglist>(diffusionModel, noDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/noDiffusion/noDiffusion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/noDiffusion/</path>
    <filename>a00439</filename>
    <class kind="class">Foam::mixingSubModels::diffusionModels::noDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/noDiffusion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/noDiffusion/</path>
    <filename>a00440</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::noDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>noLift.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/noLift/</path>
    <filename>a00441</filename>
  </compound>
  <compound kind="file">
    <name>noLift.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/noLift/</path>
    <filename>a00442</filename>
    <includes id="a00352" name="liftModel.H" local="yes" imported="no">liftModel.H</includes>
    <class kind="class">Foam::liftModels::noLift</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>noMixing.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/noMixing/</path>
    <filename>a00443</filename>
    <includes id="a00444" name="noMixing.H" local="yes" imported="no">noMixing.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>acae4135f0a969e5c9ac08c46a86accc1</anchor>
      <arglist>(noMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ade9514ba79b25a6a811619ee6bf9114f</anchor>
      <arglist>(mixingModel, noMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noMixing.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/noMixing/</path>
    <filename>a00444</filename>
    <includes id="a00373" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
    <class kind="class">Foam::mixingModels::noMixing</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingModels</namespace>
  </compound>
  <compound kind="file">
    <name>none.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/none/</path>
    <filename>a00445</filename>
  </compound>
  <compound kind="file">
    <name>none.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/none/</path>
    <filename>a00446</filename>
    <includes id="a00386" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::none</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>noneViscosity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/none/</path>
    <filename>a00447</filename>
  </compound>
  <compound kind="file">
    <name>noneViscosity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/none/</path>
    <filename>a00448</filename>
    <includes id="a00586" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::noneViscosity</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>noNucleation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/noNucleation/</path>
    <filename>a00449</filename>
    <includes id="a00450" name="noNucleation.H" local="yes" imported="no">noNucleation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>a57836ace29d15e34f15b8b253e40611f</anchor>
      <arglist>(noNucleation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>aa0ae238b7a248326a8c9c736e41b078e</anchor>
      <arglist>(nucleationModel, noNucleation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noNucleation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/noNucleation/</path>
    <filename>a00450</filename>
    <includes id="a00464" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::noNucleation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
  </compound>
  <compound kind="file">
    <name>noPopulationBalance.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/noPopulationBalance/</path>
    <filename>a00451</filename>
    <includes id="a00452" name="noPopulationBalance.H" local="yes" imported="no">noPopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a737c1912e0e9ef9a0d6b674272e44d7f</anchor>
      <arglist>(noPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>aa4c3c326869bceb4f53d5175577d7c8c</anchor>
      <arglist>(populationBalanceModel, noPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>noPopulationBalance.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/noPopulationBalance/</path>
    <filename>a00452</filename>
    <includes id="a00495" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <class kind="class">Foam::populationBalanceModels::noPopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>noSwarm.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/noSwarm/</path>
    <filename>a00453</filename>
  </compound>
  <compound kind="file">
    <name>noSwarm.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/noSwarm/</path>
    <filename>a00454</filename>
    <includes id="a00524" name="swarmCorrection.H" local="yes" imported="no">swarmCorrection.H</includes>
    <class kind="class">Foam::swarmCorrections::noSwarm</class>
    <namespace>Foam</namespace>
    <namespace>Foam::swarmCorrections</namespace>
  </compound>
  <compound kind="file">
    <name>noTurbulentDispersion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/</path>
    <filename>a00455</filename>
  </compound>
  <compound kind="file">
    <name>noTurbulentDispersion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/noTurbulentDispersion/</path>
    <filename>a00456</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::noTurbulentDispersion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>noVirtualMass.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/noVirtualMass/</path>
    <filename>a00457</filename>
  </compound>
  <compound kind="file">
    <name>noVirtualMass.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/noVirtualMass/</path>
    <filename>a00458</filename>
    <includes id="a00584" name="virtualMassModel.H" local="yes" imported="no">virtualMassModel.H</includes>
    <class kind="class">Foam::virtualMassModels::noVirtualMass</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="file">
    <name>noWallDamping.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/noWallDamping/</path>
    <filename>a00459</filename>
  </compound>
  <compound kind="file">
    <name>noWallDamping.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/noWallDamping/</path>
    <filename>a00460</filename>
    <includes id="a00590" name="wallDampingModel.H" local="yes" imported="no">wallDampingModel.H</includes>
    <class kind="class">Foam::wallDampingModels::noWallDamping</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>noWallLubrication.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/noWallLubrication/</path>
    <filename>a00461</filename>
  </compound>
  <compound kind="file">
    <name>noWallLubrication.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/noWallLubrication/</path>
    <filename>a00462</filename>
    <includes id="a00594" name="wallLubricationModel.H" local="yes" imported="no">wallLubricationModel.H</includes>
    <class kind="class">Foam::wallLubricationModels::noWallLubrication</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>nucleationModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/nucleationModel/</path>
    <filename>a00463</filename>
    <includes id="a00464" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>af6421a75bd0356deacdd72271b6f5e83</anchor>
      <arglist>(nucleationModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a0b6166697bbb54af81fb439a1105951e</anchor>
      <arglist>(nucleationModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nucleationModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/nucleationModels/nucleationModel/</path>
    <filename>a00464</filename>
    <includes id="a00389" name="moments.H" local="yes" imported="no">moments.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>oneQuarterMassRatio.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/oneQuarterMassRatio/</path>
    <filename>a00465</filename>
    <includes id="a00466" name="oneQuarterMassRatio.H" local="yes" imported="no">oneQuarterMassRatio.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>af270c7f8972b4b7a65c62654f6a52ba8</anchor>
      <arglist>(oneQuarterMassRatio, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a402d029985d37241642222eff5412b57</anchor>
      <arglist>(daughterDistribution, oneQuarterMassRatio, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oneQuarterMassRatio.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/oneQuarterMassRatio/</path>
    <filename>a00466</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::oneQuarterMassRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>orderedPhasePair.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/orderedPhasePair/</path>
    <filename>a00467</filename>
  </compound>
  <compound kind="file">
    <name>orderedPhasePair.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/orderedPhasePair/</path>
    <filename>a00468</filename>
    <includes id="a00487" name="phasePair.H" local="yes" imported="no">phasePair.H</includes>
    <class kind="class">Foam::orderedPhasePair</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>output.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a00469</filename>
    <member kind="function">
      <type>runTime</type>
      <name>write</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a8f30b3c2179b03a7acf273e9dea43342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>moment0</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a71d53d6ef9266108a5d094c1554b2792</anchor>
      <arglist>(mesh.lookupObject&lt; volScalarField &gt;(&quot;moment.0.populationBalance&quot;))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Panicker.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Panicker/</path>
    <filename>a00470</filename>
  </compound>
  <compound kind="file">
    <name>Panicker.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/Panicker/</path>
    <filename>a00471</filename>
    <includes id="a00554" name="turbulentDispersionModel.H" local="yes" imported="no">turbulentDispersionModel.H</includes>
    <class kind="class">Foam::turbulentDispersionModels::Panicker</class>
    <namespace>Foam</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
  </compound>
  <compound kind="file">
    <name>pbeFoam.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a00472</filename>
  </compound>
  <compound kind="file">
    <name>pbeTransportFoam.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeTransportFoam/</path>
    <filename>a00473</filename>
  </compound>
  <compound kind="file">
    <name>PDFTransportModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/PDFTransportModels/PDFTransportModel/</path>
    <filename>a00474</filename>
    <includes id="a00475" name="PDFTransportModel.H" local="yes" imported="no">PDFTransportModel.H</includes>
  </compound>
  <compound kind="file">
    <name>PDFTransportModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/PDFTransportModels/PDFTransportModel/</path>
    <filename>a00475</filename>
    <class kind="class">Foam::PDFTransportModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>pdPhaseModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phaseModels/pdPhaseModel/</path>
    <filename>a00476</filename>
  </compound>
  <compound kind="file">
    <name>pdPhaseModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phaseModels/pdPhaseModel/</path>
    <filename>a00477</filename>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <includes id="a00394" name="monoKineticQuadratureApproximation.H" local="yes" imported="no">monoKineticQuadratureApproximation.H</includes>
    <class kind="class">Foam::pdPhaseModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>buoyantPbePimpleFoam/pEqn.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00478</filename>
    <member kind="function">
      <type>thermo</type>
      <name>rho</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a4586f3949f258271620eb374532e2ac8</anchor>
      <arglist>()-</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a4ae3ff6f0732a8a206a641d7ff2d9f7d</anchor>
      <arglist>(1.0/UEqn.A())</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>rhorAUf</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>afd8c4e61a2e39cb5143264971d9c72b8</anchor>
      <arglist>(&quot;rhorAUf&quot;, fvc::interpolate(rho *rAU))</arglist>
    </member>
    <member kind="function">
      <type>volVectorField</type>
      <name>HbyA</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a84b1887f789e3bce2e0381c047a98de9</anchor>
      <arglist>(constrainHbyA(rAU *UEqn.H(), U, p_rgh))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phig</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a556bb449d809ee40ca35cc2ee766b26d</anchor>
      <arglist>(-rhorAUf *ghf *fvc::snGrad(rho)*mesh.magSf())</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>phiHbyA</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>aef792bafd9bea2bf7d0483270574a775</anchor>
      <arglist>(&quot;phiHbyA&quot;,(                                       fvc::flux(rho *HbyA)                               +rhorAUf *fvc::ddtCorr(rho, U, phi)                       )+phig)</arglist>
    </member>
    <member kind="function">
      <type>MRF</type>
      <name>makeRelative</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a1091d12f90202cefb0487730316abd8c</anchor>
      <arglist>(fvc::interpolate(rho), phiHbyA)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constrainPressure</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a797aefb4095dcdddbfb2b67948fc3cbc</anchor>
      <arglist>(p_rgh, rho, U, phiHbyA, rhorAUf, MRF)</arglist>
    </member>
    <member kind="function">
      <type>fvScalarMatrix</type>
      <name>p_rghDDtEqn</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>aab86021ac402de18529ad363d829f1b3</anchor>
      <arglist>(fvc::ddt(rho)+psi *correction(fvm::ddt(p_rgh))+fvc::div(phiHbyA)==fvOptions(psi, p_rgh, rho.name()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>ab13470e79e249d04c443bf59be9ff31d</anchor>
      <arglist>(pimple.correctNonOrthogonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>a3a782599467f113a731d85df5c3b1e70</anchor>
      <arglist>(thermo.dpdt())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>p</name>
      <anchorfile>a00478.html</anchorfile>
      <anchor>ac483f6ce851c9ecd9fb835ff7551737c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam/pU/pEqn.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/pU/</path>
    <filename>a00479</filename>
    <includes id="a00241" name="correctContErrs.H" local="yes" imported="no">correctContErrs.H</includes>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alphaf1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a56ffcaedadad19bec661b0b110fea575</anchor>
      <arglist>(&quot;alphaf1&quot;, fvc::interpolate(alpha1))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alphaf2</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>ab75560d8f7fca946379806e8582e0fff</anchor>
      <arglist>(&quot;alphaf2&quot;, scalar(1)-alphaf1)</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>ac779df021c09ff6053a4ec64c92150fc</anchor>
      <arglist>(&quot;rAU.air&quot;, 1.0/(                       U1Eqn.A()               +max(phase1.residualAlpha()-alpha1, scalar(0))                   *rho1/runTime.deltaT()       ))</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>rAU2</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>afcd28c9e4cffc51b2b2b8548152c8244</anchor>
      <arglist>(&quot;rAU.water&quot;, 1.0/(                       U2Eqn.A()               +max(phase2.residualAlpha()-alpha2, scalar(0))                   *rho2/runTime.deltaT()       ))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a482b6c42bdc6748eff2090cd701aca19</anchor>
      <arglist>(fvc::interpolate(max(alpha1, phase1.residualAlpha())*rAU1))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>alpharAUf2</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a9e4e0fa3d286b5acfc8c6e298ac0040e</anchor>
      <arglist>(fvc::interpolate(max(alpha2, phase2.residualAlpha())*rAU2))</arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField</type>
      <name>snGradAlpha1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a9ad08a93fd578a856c12ac94a7cf1f0d</anchor>
      <arglist>(fvc::snGrad(alpha1)*mesh.magSf())</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>pPrime1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a7434890cc44066862425d0e4281c4249</anchor>
      <arglist>(phase1.turbulence().pPrime())</arglist>
    </member>
    <member kind="function">
      <type>volScalarField</type>
      <name>pPrime2</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>ac19d9d9695606a044248354fed6e9455</anchor>
      <arglist>(phase2.turbulence().pPrime())</arglist>
    </member>
    <member kind="function">
      <type>fluid</type>
      <name>pPrimeByA</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>ae11a2f130938bc1bbf0bf4849e8aa587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>ace353e990d7324b8758018469470d239</anchor>
      <arglist>(label nodei=0;nodei&lt; phase1.nNodes();nodei++)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a0b9d5d8b1ecc0bf63b4c35f41598a500</anchor>
      <arglist>(pimple.correct())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a8b001df98f4ca694c2202fb716464002</anchor>
      <arglist>(thermo1.dpdt()||thermo2.dpdt())</arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>phiF1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>aedd16305da3cfdbea19ba23daed10d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>phiF2</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a6646a332531432477318e632c7e962c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>K1</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a6b8d5903796d011867096f16bcfe4efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>K2</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a2cc87dc0dca3d6104d8094986f6b852a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phaseCompressibleTurbulenceModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/</path>
    <filename>a00480</filename>
    <includes id="a00481" name="phaseCompressibleTurbulenceModelFwd.H" local="yes" imported="no">phaseCompressibleTurbulenceModelFwd.H</includes>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>ThermalDiffusivity&lt; PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &gt;</type>
      <name>phaseCompressibleTurbulenceModel</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aa5c1489fda8382d68abc884992704b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phaseCompressibleTurbulenceModelFwd.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/</path>
    <filename>a00481</filename>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::ThermalDiffusivity</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>phaseCompressibleTurbulenceModels.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/</path>
    <filename>a00482</filename>
  </compound>
  <compound kind="file">
    <name>phaseModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a00483</filename>
  </compound>
  <compound kind="file">
    <name>phaseModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a00484</filename>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::phaseModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>phaseModels.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phaseModels/phaseModel/</path>
    <filename>a00485</filename>
  </compound>
  <compound kind="file">
    <name>phasePair.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/phasePair/</path>
    <filename>a00486</filename>
  </compound>
  <compound kind="file">
    <name>phasePair.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/phasePair/</path>
    <filename>a00487</filename>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <includes id="a00490" name="phasePairKey.H" local="yes" imported="no">phasePairKey.H</includes>
    <includes id="a00488" name="phasePairI.H" local="yes" imported="no">phasePairI.H</includes>
    <class kind="class">Foam::phasePair</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>phasePairI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/phasePair/</path>
    <filename>a00488</filename>
  </compound>
  <compound kind="file">
    <name>phasePairKey.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/phasePairKey/</path>
    <filename>a00489</filename>
  </compound>
  <compound kind="file">
    <name>phasePairKey.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/phasePair/phasePairKey/</path>
    <filename>a00490</filename>
    <class kind="class">Foam::phasePairKey</class>
    <class kind="class">Foam::phasePairKey::hash</class>
    <namespace>Foam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aa845e7e6bc6039665122ebd21385d68b</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a4a9491454b25e78851b814baba5223f2</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a27625c8b93b822d52a1805050b7b45c6</anchor>
      <arglist>(Istream &amp;, phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>acf30ae0a0780fdae7c4d258576e41f9f</anchor>
      <arglist>(Ostream &amp;, const phasePairKey &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phasePressureModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/phasePressureModel/</path>
    <filename>a00491</filename>
  </compound>
  <compound kind="file">
    <name>phasePressureModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/phasePressureModel/</path>
    <filename>a00492</filename>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <class kind="class">Foam::RASModels::phasePressureModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::RASModels</namespace>
  </compound>
  <compound kind="file">
    <name>polydisperseBubbleFoam.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00493</filename>
  </compound>
  <compound kind="file">
    <name>populationBalanceModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceModel/</path>
    <filename>a00494</filename>
    <includes id="a00495" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a5f1f6bb41c55fd770d1a82b1a3f616d1</anchor>
      <arglist>(populationBalanceModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a658da731d19646486da4cad759632bb0</anchor>
      <arglist>(populationBalanceModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceModel/</path>
    <filename>a00495</filename>
    <class kind="class">Foam::populationBalanceModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>powerLawBreakup.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/powerLawBreakup/</path>
    <filename>a00496</filename>
    <includes id="a00497" name="powerLawBreakup.H" local="yes" imported="no">powerLawBreakup.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a8b60ada41289ba4c36eedcf1dca754ac</anchor>
      <arglist>(powerLawBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>aeff8d67156c89fed6ad177f01cb8321e</anchor>
      <arglist>(breakupKernel, powerLawBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>powerLawBreakup.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/breakupKernels/powerLawBreakup/</path>
    <filename>a00497</filename>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::powerLawBreakup</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
  </compound>
  <compound kind="file">
    <name>quadratureApproximation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00498</filename>
    <includes id="a00499" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
  </compound>
  <compound kind="file">
    <name>quadratureApproximation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00499</filename>
    <includes id="a00284" name="fieldMomentInversion.H" local="yes" imported="no">fieldMomentInversion.H</includes>
    <class kind="class">Foam::quadratureApproximation</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>quadratureApproximationI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00500</filename>
  </compound>
  <compound kind="file">
    <name>quadratureApproximations.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureApproximations/</path>
    <filename>a00501</filename>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00384" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00499" name="quadratureApproximation.H" local="yes" imported="no">quadratureApproximation.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>quadratureApproximation&lt; volUnivariateMomentFieldSet, volScalarNode &gt;</type>
      <name>univariateQuadratureApproximation</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a545e54cd8a5ad1ca2192158b263148c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quadratureNode.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureNode/</path>
    <filename>a00502</filename>
    <includes id="a00503" name="quadratureNode.H" local="yes" imported="no">quadratureNode.H</includes>
  </compound>
  <compound kind="file">
    <name>quadratureNode.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureNode/</path>
    <filename>a00503</filename>
    <class kind="class">Foam::quadratureNode</class>
    <class kind="class">Foam::quadratureNode::iNew</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>quadratureNodeI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureNode/</path>
    <filename>a00504</filename>
  </compound>
  <compound kind="file">
    <name>quadratureNodes.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/quadratureNode/</path>
    <filename>a00505</filename>
    <includes id="a00503" name="quadratureNode.H" local="yes" imported="no">quadratureNode.H</includes>
    <namespace>Foam</namespace>
    <member kind="typedef">
      <type>quadratureNode&lt; volScalarField, volScalarField, volScalarField &gt;</type>
      <name>volScalarNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a498baa35a7b2a08cd1c0fe85a3017d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; surfaceScalarField, surfaceScalarField, surfaceScalarField &gt;</type>
      <name>surfaceScalarNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a6323e785fc36ba155e0699c02bd2eee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; volScalarField, volVectorField, volScalarField &gt;</type>
      <name>volVectorNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ab20da0475c2033aaf8cb1dea78031f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; surfaceScalarField, surfaceVectorField, surfaceScalarField &gt;</type>
      <name>surfaceVectorNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a286070562b5d656217b5e7eb79b35e02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>radialModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/radialModel/</path>
    <filename>a00506</filename>
  </compound>
  <compound kind="file">
    <name>radialModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/radialModel/</path>
    <filename>a00507</filename>
    <class kind="class">Foam::kineticTheoryModels::radialModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>readControls.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a00508</filename>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>ad9044c3d1d0b8f3ed3e6b9b1f8dbb8cb</anchor>
      <arglist>(runTime.controlDict().lookupOrDefault(&quot;suppressSolverInfo&quot;, false))</arglist>
    </member>
    <member kind="function">
      <type>Switch</type>
      <name>adjustTimeStep</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>a116d20bd6aa9cc2b5fcf634e3c45bbd5</anchor>
      <arglist>(runTime.controlDict().lookup(&quot;adjustTimeStep&quot;))</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>maxDeltaT</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>a7c604fc34158f5108b7ee5d89b95b433</anchor>
      <arglist>(readScalar(runTime.controlDict().lookup(&quot;maxDeltaT&quot;)))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SchaefferFrictionalStress.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/Schaeffer/</path>
    <filename>a00509</filename>
  </compound>
  <compound kind="file">
    <name>SchaefferFrictionalStress.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/frictionalStressModel/Schaeffer/</path>
    <filename>a00510</filename>
    <includes id="a00293" name="frictionalStressModel.H" local="yes" imported="no">frictionalStressModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::Schaeffer</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
  </compound>
  <compound kind="file">
    <name>SchillerNaumann.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/SchillerNaumann/</path>
    <filename>a00511</filename>
  </compound>
  <compound kind="file">
    <name>SchillerNaumann.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/SchillerNaumann/</path>
    <filename>a00512</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::SchillerNaumann</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>segregated.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/segregated/</path>
    <filename>a00513</filename>
  </compound>
  <compound kind="file">
    <name>segregated.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/segregated/</path>
    <filename>a00514</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::segregated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>setDeltaT.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/pbeFoam/</path>
    <filename>a00515</filename>
  </compound>
  <compound kind="file">
    <name>setRDeltaT.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/</path>
    <filename>a00516</filename>
    <member kind="function">
      <type>scalar</type>
      <name>maxCo</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a264b38a3a95d5704c2b3488251919fa3</anchor>
      <arglist>(pimpleDict.lookupOrDefault&lt; scalar &gt;(&quot;maxCo&quot;, 0.2))</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>maxDeltaT</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a1aada085edc1cf94f00a3b9ada46e58a</anchor>
      <arglist>(pimpleDict.lookupOrDefault&lt; scalar &gt;(&quot;maxDeltaT&quot;, GREAT))</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rDeltaTSmoothingCoeff</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ae107aec848899790f5df3e9104271144</anchor>
      <arglist>(pimpleDict.lookupOrDefault&lt; scalar &gt;(&quot;rDeltaTSmoothingCoeff&quot;, 0.02))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a5ba077ea50f77271f9de1a93fd2ac7ec</anchor>
      <arglist>(label nodeI=0;nodeI&lt; nNodes;nodeI++)</arglist>
    </member>
    <member kind="function">
      <type>rDeltaT</type>
      <name>ref</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a2f770d65eab4a3a56807178d2277f713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rDeltaT</type>
      <name>correctBoundaryConditions</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ab8cac904ca049553c4c43b8f59834108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const dictionary &amp;</type>
      <name>pimpleDict</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>aa656ebf7e2eda7d1f7c5d3975ac55a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>surfaceScalarField</type>
      <name>maxPhi</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a05aac0da8a34d5b02fce1ae19a88b930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SinclairJacksonRadial.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/SinclairJackson/</path>
    <filename>a00517</filename>
  </compound>
  <compound kind="file">
    <name>SinclairJacksonRadial.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/radialModel/SinclairJackson/</path>
    <filename>a00518</filename>
    <includes id="a00507" name="radialModel.H" local="yes" imported="no">radialModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::radialModels::SinclairJackson</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
  </compound>
  <compound kind="file">
    <name>sineWallDamping.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/sine/</path>
    <filename>a00519</filename>
  </compound>
  <compound kind="file">
    <name>sineWallDamping.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/sine/</path>
    <filename>a00520</filename>
    <includes id="a00332" name="interpolatedWallDamping.H" local="yes" imported="no">interpolatedWallDamping.H</includes>
    <class kind="class">Foam::wallDampingModels::sine</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallDampingModels</namespace>
  </compound>
  <compound kind="file">
    <name>sumAggregation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/sumAggregation/</path>
    <filename>a00521</filename>
    <includes id="a00522" name="sumAggregation.H" local="yes" imported="no">sumAggregation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>ae400872a78a4a9234d740ae66c007114</anchor>
      <arglist>(sumAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a60fb21d09528d9baad4a0d418f4b125f</anchor>
      <arglist>(aggregationKernel, sumAggregation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sumAggregation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/sumAggregation/</path>
    <filename>a00522</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::sumAggregation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>swarmCorrection.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a00523</filename>
  </compound>
  <compound kind="file">
    <name>swarmCorrection.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/swarmCorrection/</path>
    <filename>a00524</filename>
    <class kind="class">Foam::swarmCorrection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalConductivity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/Syamlal/</path>
    <filename>a00525</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalConductivity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/conductivityModel/Syamlal/</path>
    <filename>a00526</filename>
    <includes id="a00225" name="conductivityModel.H" local="yes" imported="no">conductivityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Syamlal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalOBrien.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/SyamlalOBrien/</path>
    <filename>a00527</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalOBrien.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/SyamlalOBrien/</path>
    <filename>a00528</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::SyamlalOBrien</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalRogersOBrienPressure.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/SyamlalRogersOBrien/</path>
    <filename>a00529</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalRogersOBrienPressure.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/granularPressureModel/SyamlalRogersOBrien/</path>
    <filename>a00530</filename>
    <includes id="a00318" name="granularPressureModel.H" local="yes" imported="no">granularPressureModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::SyamlalRogersOBrien</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
  </compound>
  <compound kind="file">
    <name>SyamlalViscosity.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/Syamlal/</path>
    <filename>a00531</filename>
  </compound>
  <compound kind="file">
    <name>SyamlalViscosity.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/Syamlal/</path>
    <filename>a00532</filename>
    <includes id="a00586" name="viscosityModel.H" local="yes" imported="no">viscosityModel.H</includes>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Syamlal</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
  </compound>
  <compound kind="file">
    <name>symmetricFragmentation.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/symmetricFragmentation/</path>
    <filename>a00533</filename>
    <includes id="a00534" name="symmetricFragmentation.H" local="yes" imported="no">symmetricFragmentation.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a62ad711d8fce03a652f1adeb2fcef84e</anchor>
      <arglist>(symmetricFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a4a0510d1798895036e2050367b333efc</anchor>
      <arglist>(daughterDistribution, symmetricFragmentation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symmetricFragmentation.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/symmetricFragmentation/</path>
    <filename>a00534</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::symmetricFragmentation</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>TomiyamaAnalytic.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/TomiyamaAnalytic/</path>
    <filename>a00535</filename>
  </compound>
  <compound kind="file">
    <name>TomiyamaAnalytic.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/TomiyamaAnalytic/</path>
    <filename>a00536</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::TomiyamaAnalytic</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>TomiyamaAspectRatio.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/</path>
    <filename>a00537</filename>
  </compound>
  <compound kind="file">
    <name>TomiyamaAspectRatio.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/TomiyamaAspectRatio/</path>
    <filename>a00538</filename>
    <includes id="a00579" name="VakhrushevEfremov.H" local="yes" imported="no">VakhrushevEfremov.H</includes>
    <includes id="a00592" name="wallDependentModel.H" local="yes" imported="no">wallDependentModel.H</includes>
    <class kind="class">Foam::aspectRatioModels::TomiyamaAspectRatio</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>TomiyamaCorrelated.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/TomiyamaCorrelated/</path>
    <filename>a00539</filename>
  </compound>
  <compound kind="file">
    <name>TomiyamaCorrelated.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/TomiyamaCorrelated/</path>
    <filename>a00540</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::TomiyamaCorrelated</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>TomiyamaLift.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/TomiyamaLift/</path>
    <filename>a00541</filename>
  </compound>
  <compound kind="file">
    <name>TomiyamaLift.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/TomiyamaLift/</path>
    <filename>a00542</filename>
    <includes id="a00352" name="liftModel.H" local="yes" imported="no">liftModel.H</includes>
    <class kind="class">Foam::liftModels::TomiyamaLift</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>TomiyamaSwarm.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/TomiyamaSwarm/</path>
    <filename>a00543</filename>
  </compound>
  <compound kind="file">
    <name>TomiyamaSwarm.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/swarmCorrections/TomiyamaSwarm/</path>
    <filename>a00544</filename>
    <includes id="a00524" name="swarmCorrection.H" local="yes" imported="no">swarmCorrection.H</includes>
    <class kind="class">Foam::swarmCorrections::TomiyamaSwarm</class>
    <namespace>Foam</namespace>
    <namespace>Foam::swarmCorrections</namespace>
  </compound>
  <compound kind="file">
    <name>TomiyamaWallLubrication.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/</path>
    <filename>a00545</filename>
  </compound>
  <compound kind="file">
    <name>TomiyamaWallLubrication.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/TomiyamaWallLubrication/</path>
    <filename>a00546</filename>
    <includes id="a00594" name="wallLubricationModel.H" local="yes" imported="no">wallLubricationModel.H</includes>
    <class kind="class">Foam::wallLubricationModels::TomiyamaWallLubrication</class>
    <namespace>Foam</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
  </compound>
  <compound kind="file">
    <name>turbulentBrownian.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/turbulentBrownian/</path>
    <filename>a00547</filename>
    <includes id="a00548" name="turbulentBrownian.H" local="yes" imported="no">turbulentBrownian.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a8aea8aa81c72d6cc9339bc773860a063</anchor>
      <arglist>(turbulentBrownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a4425f03c0f3a6b57d979366a338cda40</anchor>
      <arglist>(aggregationKernel, turbulentBrownian, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>turbulentBrownian.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/aggregationKernels/turbulentBrownian/</path>
    <filename>a00548</filename>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::turbulentBrownian</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a00549</filename>
    <includes id="a00551" name="mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H" local="yes" imported="no">turbulentDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a63731383ea80126b6cf10aaf15679fc9</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a97d2209e8102de7cf85a3dc3192735b9</anchor>
      <arglist>(diffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a00550</filename>
    <includes id="a00552" name="populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H" local="yes" imported="no">turbulentDiffusion.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>afdc594891515141ee07b11edd796180c</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a5735ce97238b71965eb6a6817765ae13</anchor>
      <arglist>(diffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/mixingSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a00551</filename>
    <class kind="class">Foam::mixingSubModels::diffusionModels::turbulentDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/turbulentDiffusion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/diffusionModels/turbulentDiffusion/</path>
    <filename>a00552</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::turbulentDiffusion</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
  </compound>
  <compound kind="file">
    <name>turbulentDispersionModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a00553</filename>
  </compound>
  <compound kind="file">
    <name>turbulentDispersionModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/turbulentDispersionModels/turbulentDispersionModel/</path>
    <filename>a00554</filename>
    <class kind="class">Foam::turbulentDispersionModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>turbulentMixing.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/turbulentMixing/</path>
    <filename>a00555</filename>
    <includes id="a00556" name="turbulentMixing.H" local="yes" imported="no">turbulentMixing.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::mixingModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a3a551541939d8bbcf9fdc374ce4ede08</anchor>
      <arglist>(turbulentMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a5bb611098ff24fdd12820b81036f0c9d</anchor>
      <arglist>(mixingModel, turbulentMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>turbulentMixing.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/mixingModels/turbulentMixing/</path>
    <filename>a00556</filename>
    <includes id="a00574" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
    <includes id="a00373" name="mixingModel.H" local="yes" imported="no">mixingModel.H</includes>
    <includes id="a00371" name="mixingKernel.H" local="yes" imported="no">mixingKernel.H</includes>
    <class kind="class">Foam::PDFTransportModels::mixingModels::turbulentMixing</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::mixingModels</namespace>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystem.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/</path>
    <filename>a00557</filename>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystem.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/</path>
    <filename>a00558</filename>
    <includes id="a00484" name="phaseModel.H" local="yes" imported="no">phaseModel.H</includes>
    <includes id="a00487" name="phasePair.H" local="yes" imported="no">phasePair.H</includes>
    <includes id="a00468" name="orderedPhasePair.H" local="yes" imported="no">orderedPhasePair.H</includes>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <includes id="a00559" name="twoPhaseSystemI.H" local="yes" imported="no">twoPhaseSystemI.H</includes>
    <class kind="class">Foam::BlendedInterfacialModel</class>
    <class kind="class">Foam::twoPhaseSystem</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>twoPhaseSystemI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/twoPhaseSystem/</path>
    <filename>a00559</filename>
  </compound>
  <compound kind="file">
    <name>UEqn.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/buoyantPbePimpleFoam/</path>
    <filename>a00560</filename>
    <member kind="function">
      <type>MRF</type>
      <name>correctBoundaryVelocity</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a3d8a3fae539731d0068343d8b35d062c</anchor>
      <arglist>(U)</arglist>
    </member>
    <member kind="function">
      <type>fvVectorMatrix</type>
      <name>UEqn</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>aca6be8f7ed14e8582a0811cfe8a2d205</anchor>
      <arglist>(fvm::ddt(rho, U)+fvm::div(phi, U)+MRF.DDt(rho, U)+turbulence-&gt;divDevRhoReff(U)==fvOptions(rho, U))</arglist>
    </member>
    <member kind="function">
      <type>UEqn</type>
      <name>relax</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a9a717d2a556132c73a6bb389a9de48bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fvOptions</type>
      <name>constrain</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ad9a6816dbc9c62129d40af3784545b31</anchor>
      <arglist>(UEqn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a5340a84918449f06669e13812b90f046</anchor>
      <arglist>(pimple.momentumPredictor())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UEqns.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/pU/</path>
    <filename>a00561</filename>
  </compound>
  <compound kind="file">
    <name>uniform.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/uniform/</path>
    <filename>a00562</filename>
    <includes id="a00563" name="uniform.H" local="yes" imported="no">uniform.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a6cfc6fde57688830e91aa5900a2a3b0b</anchor>
      <arglist>(uniform, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ad4645290635a7726786f906917fa5138</anchor>
      <arglist>(daughterDistribution, uniform, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uniform.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/populationBalanceSubModels/daugtherDistributions/uniform/</path>
    <filename>a00563</filename>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::uniform</class>
    <namespace>Foam</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentAdvection.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/univariateMomentAdvection/</path>
    <filename>a00564</filename>
    <includes id="a00565" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2e031b2f48d8a0ab9406319748fe3375</anchor>
      <arglist>(univariateMomentAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a39775b46f08fcfec6aab7d577715ce8b</anchor>
      <arglist>(univariateMomentAdvection, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariateMomentAdvection.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/univariateMomentAdvection/</path>
    <filename>a00565</filename>
    <includes id="a00505" name="quadratureNodes.H" local="yes" imported="no">quadratureNodes.H</includes>
    <includes id="a00384" name="momentFieldSets.H" local="yes" imported="no">momentFieldSets.H</includes>
    <includes id="a00201" name="basicFieldMomentInversion.H" local="yes" imported="no">basicFieldMomentInversion.H</includes>
    <includes id="a00501" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <includes id="a00566" name="univariateMomentAdvectionI.H" local="yes" imported="no">univariateMomentAdvectionI.H</includes>
    <class kind="class">Foam::univariateMomentAdvection</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentAdvectionI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/univariateMomentAdvection/</path>
    <filename>a00566</filename>
  </compound>
  <compound kind="file">
    <name>univariateMomentInversion.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00567</filename>
    <includes id="a00568" name="univariateMomentInversion.H" local="yes" imported="no">univariateMomentInversion.H</includes>
    <includes id="a00272" name="eigenSolver.H" local="yes" imported="no">eigenSolver.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2bfa8c5752536cc7ec9c8af1ba407aef</anchor>
      <arglist>(univariateMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a986535dad0b0c7383cd3f0370fa94d7e</anchor>
      <arglist>(univariateMomentInversion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariateMomentInversion.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00568</filename>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
    <includes id="a00569" name="univariateMomentInversionI.H" local="yes" imported="no">univariateMomentInversionI.H</includes>
    <class kind="class">Foam::univariateMomentInversion</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentInversionI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentInversion/univariate/basic/univariateMomentInversion/</path>
    <filename>a00569</filename>
  </compound>
  <compound kind="file">
    <name>univariateMomentSet.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentSets/univariateMomentSet/</path>
    <filename>a00570</filename>
    <includes id="a00571" name="univariateMomentSet.H" local="yes" imported="no">univariateMomentSet.H</includes>
  </compound>
  <compound kind="file">
    <name>univariateMomentSet.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentSets/univariateMomentSet/</path>
    <filename>a00571</filename>
    <includes id="a00391" name="momentSet.H" local="yes" imported="no">momentSet.H</includes>
    <includes id="a00572" name="univariateMomentSetI.H" local="yes" imported="no">univariateMomentSetI.H</includes>
    <class kind="class">Foam::univariateMomentSet</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>univariateMomentSetI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentSets/univariateMomentSet/</path>
    <filename>a00572</filename>
  </compound>
  <compound kind="file">
    <name>univariatePDFTransportModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/PDFTransportModels/univariatePDFTransportModel/</path>
    <filename>a00573</filename>
    <includes id="a00574" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
  </compound>
  <compound kind="file">
    <name>univariatePDFTransportModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/PDFTransportModels/univariatePDFTransportModel/</path>
    <filename>a00574</filename>
    <includes id="a00475" name="PDFTransportModel.H" local="yes" imported="no">PDFTransportModel.H</includes>
    <includes id="a00501" name="quadratureApproximations.H" local="yes" imported="no">quadratureApproximations.H</includes>
    <includes id="a00565" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <includes id="a00575" name="univariatePDFTransportModelI.H" local="yes" imported="no">univariatePDFTransportModelI.H</includes>
    <class kind="class">Foam::PDFTransportModels::univariatePDFTransportModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
  </compound>
  <compound kind="file">
    <name>univariatePDFTransportModelI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/PDFTransportModels/univariatePDFTransportModel/</path>
    <filename>a00575</filename>
  </compound>
  <compound kind="file">
    <name>univariatePopulationBalance.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/univariatePopulationBalance/</path>
    <filename>a00576</filename>
    <includes id="a00577" name="univariatePopulationBalance.H" local="yes" imported="no">univariatePopulationBalance.H</includes>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a141d32d1d596c5abf5a48966fb726556</anchor>
      <arglist>(univariatePopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a908eacb72c5c2b3af99129191b55dc5f</anchor>
      <arglist>(populationBalanceModel, univariatePopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariatePopulationBalance.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/populationBalanceModels/univariatePopulationBalance/</path>
    <filename>a00577</filename>
    <includes id="a00574" name="univariatePDFTransportModel.H" local="yes" imported="no">univariatePDFTransportModel.H</includes>
    <includes id="a00495" name="populationBalanceModel.H" local="yes" imported="no">populationBalanceModel.H</includes>
    <includes id="a00191" name="aggregationKernel.H" local="yes" imported="no">aggregationKernel.H</includes>
    <includes id="a00211" name="breakupKernel.H" local="yes" imported="no">breakupKernel.H</includes>
    <includes id="a00258" name="daughterDistribution.H" local="yes" imported="no">daughterDistribution.H</includes>
    <includes id="a00320" name="growthModel.H" local="yes" imported="no">growthModel.H</includes>
    <includes id="a00464" name="nucleationModel.H" local="yes" imported="no">nucleationModel.H</includes>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::univariatePopulationBalance</class>
    <namespace>Foam</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
  </compound>
  <compound kind="file">
    <name>VakhrushevEfremov.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/VakhrushevEfremov/</path>
    <filename>a00578</filename>
  </compound>
  <compound kind="file">
    <name>VakhrushevEfremov.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/VakhrushevEfremov/</path>
    <filename>a00579</filename>
    <includes id="a00197" name="aspectRatioModel.H" local="yes" imported="no">aspectRatioModel.H</includes>
    <class kind="class">Foam::aspectRatioModels::VakhrushevEfremov</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>Vandermonde.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/Vandermonde/</path>
    <filename>a00580</filename>
    <includes id="a00581" name="Vandermonde.H" local="yes" imported="no">Vandermonde.H</includes>
  </compound>
  <compound kind="file">
    <name>Vandermonde.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/Vandermonde/</path>
    <filename>a00581</filename>
    <includes id="a00582" name="VandermondeI.H" local="yes" imported="no">VandermondeI.H</includes>
    <class kind="class">Foam::Vandermonde</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>VandermondeI.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/Vandermonde/</path>
    <filename>a00582</filename>
  </compound>
  <compound kind="file">
    <name>virtualMassModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a00583</filename>
  </compound>
  <compound kind="file">
    <name>virtualMassModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/virtualMassModel/</path>
    <filename>a00584</filename>
    <class kind="class">Foam::virtualMassModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>viscosityModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/viscosityModel/</path>
    <filename>a00585</filename>
  </compound>
  <compound kind="file">
    <name>viscosityModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/phaseCompressibleTurbulenceModels/kineticTheoryModels/viscosityModel/viscosityModel/</path>
    <filename>a00586</filename>
    <class kind="class">Foam::kineticTheoryModels::viscosityModel</class>
    <namespace>Foam</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
  </compound>
  <compound kind="file">
    <name>wallDampedLift.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/wallDampedLift/</path>
    <filename>a00587</filename>
  </compound>
  <compound kind="file">
    <name>wallDampedLift.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/liftModels/wallDampedLift/</path>
    <filename>a00588</filename>
    <includes id="a00352" name="liftModel.H" local="yes" imported="no">liftModel.H</includes>
    <includes id="a00590" name="wallDampingModel.H" local="yes" imported="no">wallDampingModel.H</includes>
    <class kind="class">Foam::liftModels::wallDamped</class>
    <namespace>Foam</namespace>
    <namespace>Foam::liftModels</namespace>
  </compound>
  <compound kind="file">
    <name>wallDampingModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a00589</filename>
  </compound>
  <compound kind="file">
    <name>wallDampingModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDampingModels/wallDampingModel/</path>
    <filename>a00590</filename>
    <includes id="a00592" name="wallDependentModel.H" local="yes" imported="no">wallDependentModel.H</includes>
    <class kind="class">Foam::wallDampingModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>wallDependentModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDependentModel/</path>
    <filename>a00591</filename>
  </compound>
  <compound kind="file">
    <name>wallDependentModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallDependentModel/</path>
    <filename>a00592</filename>
    <class kind="class">Foam::wallDependentModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>wallLubricationModel.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a00593</filename>
  </compound>
  <compound kind="file">
    <name>wallLubricationModel.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/wallLubricationModels/wallLubricationModel/</path>
    <filename>a00594</filename>
    <includes id="a00592" name="wallDependentModel.H" local="yes" imported="no">wallDependentModel.H</includes>
    <class kind="class">Foam::wallLubricationModel</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>weightsAndAbscissae.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/weightsAndAbscissae/</path>
    <filename>a00595</filename>
  </compound>
  <compound kind="file">
    <name>weightsAndAbscissae.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/utilities/generateMoments/momentGenerationModels/weightsAndAbscissae/</path>
    <filename>a00596</filename>
    <includes id="a00386" name="momentGenerationModel.H" local="yes" imported="no">momentGenerationModel.H</includes>
    <class kind="class">Foam::momentGenerationSubModels::weightsAndAbscissae</class>
    <namespace>Foam</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
  </compound>
  <compound kind="file">
    <name>Wellek.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/Wellek/</path>
    <filename>a00597</filename>
  </compound>
  <compound kind="file">
    <name>Wellek.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/aspectRatioModels/Wellek/</path>
    <filename>a00598</filename>
    <includes id="a00197" name="aspectRatioModel.H" local="yes" imported="no">aspectRatioModel.H</includes>
    <class kind="class">Foam::aspectRatioModels::Wellek</class>
    <namespace>Foam</namespace>
    <namespace>Foam::aspectRatioModels</namespace>
  </compound>
  <compound kind="file">
    <name>WenYu.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/WenYu/</path>
    <filename>a00599</filename>
  </compound>
  <compound kind="file">
    <name>WenYu.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/dragModels/WenYu/</path>
    <filename>a00600</filename>
    <includes id="a00269" name="dragModel.H" local="yes" imported="no">dragModel.H</includes>
    <class kind="class">Foam::dragModels::WenYu</class>
    <namespace>Foam</namespace>
    <namespace>Foam::dragModels</namespace>
  </compound>
  <compound kind="file">
    <name>zeta.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/zeta/</path>
    <filename>a00601</filename>
    <includes id="a00602" name="zeta.H" local="yes" imported="no">zeta.H</includes>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ad8af500f86f15b7fc00f5f9a812b95a0</anchor>
      <arglist>(zeta, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a14381f71d5793595315c2570c1f9b158</anchor>
      <arglist>(univariateMomentAdvection, zeta, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zeta.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/src/quadratureMethods/momentAdvection/zeta/</path>
    <filename>a00602</filename>
    <includes id="a00565" name="univariateMomentAdvection.H" local="yes" imported="no">univariateMomentAdvection.H</includes>
    <class kind="class">Foam::zeta</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>Zuber.C</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/Zuber/</path>
    <filename>a00603</filename>
  </compound>
  <compound kind="file">
    <name>Zuber.H</name>
    <path>/home/alberto/Desktop/OpenQBMM/applications/solvers/polydisperseBubbleFoam/interfacialModels/virtualMassModels/Zuber/</path>
    <filename>a00604</filename>
    <includes id="a00584" name="virtualMassModel.H" local="yes" imported="no">virtualMassModel.H</includes>
    <class kind="class">Foam::virtualMassModels::Zuber</class>
    <namespace>Foam</namespace>
    <namespace>Foam::virtualMassModels</namespace>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernel</name>
    <filename>a00002.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae635445d544ded93442f8f985f515459</anchor>
      <arglist>(&quot;aggregationKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>adb6c85ea440716007e16e43747e20a7c</anchor>
      <arglist>(autoPtr, aggregationKernel, dictionary,(                                       const dictionary &amp;dict,                                       const fvMesh &amp;mesh                       ),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aggregationKernel</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a62c9e0113594b969e61c76e071b7a79b</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aggregationKernel</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad207fdb33ae3b991ec3e94068c03a307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a46a8f0d3e7dd0bddc15c4e1a3deaf08e</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; aggregationKernel &gt;</type>
      <name>New</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aa4fd05f8720fbd55876a9a023be94855</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Ca_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a7547e6fb837b9ab15b147886567d8cf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::alphaAndDiameter</name>
    <filename>a00003.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a74cb709dface36220c56934feb4f20a7</anchor>
      <arglist>(&quot;alphaAndDiameter&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>alphaAndDiameter</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>afc335551063aa677948931a2d85c67cb</anchor>
      <arglist>(const dictionary &amp;dict, const label nNodes, const bool extended, const bool Radau)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~alphaAndDiameter</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aae4b1815ca8535bfcf9fd8770973a928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateQuadrature</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acc360d2f5d50c09bb0f88dcf0dc26d99</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::Antal</name>
    <filename>a00004.html</filename>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>acfa70bfca9ccb6dd70b89195da96e06e</anchor>
      <arglist>(&quot;Antal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Antal</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0e547060df61ae133caa2df0f9cd67fe</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Antal</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a362a51a461ff1aabd4d339e2f87fcacf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ac25d7fa61e6c77f74f43e4c65d647a45</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModel</name>
    <filename>a00005.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad760a9f6c9d80c4dc8fbe3a00f2a2812</anchor>
      <arglist>(&quot;aspectRatioModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a96ec7da603e19c3fc6efb8fc60bc91e5</anchor>
      <arglist>(autoPtr, aspectRatioModel, dictionary,(                                       const dictionary &amp;dict,                                       const phasePair &amp;pair                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aspectRatioModel</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>abbfb973190ee67e9e285cc3c58b28de3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aspectRatioModel</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a751ad20c22e2a967561f84836821642f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a6bf4f313b66c62c0e36073b5141687dc</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; aspectRatioModel &gt;</type>
      <name>New</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a6b9f57269b1c53c59b04cd962ae9656f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::AyaziShamlou</name>
    <filename>a00006.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ae412b250cff181374b985c3429d4bb6f</anchor>
      <arglist>(&quot;AyaziShamlou&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AyaziShamlou</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a781a7506bbb61bec5f20cc157c852dac</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AyaziShamlou</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>adef82df48b1ab9571151c9ff6ce21c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a1e8a125530058d3c06bc7ca11c10c1e2</anchor>
      <arglist>(const scalar &amp;abscissa, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::basicFieldMomentInversion</name>
    <filename>a00007.html</filename>
    <base>Foam::fieldMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a16c7e2969d7f2346945d833b832e6aab</anchor>
      <arglist>(&quot;basicFieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basicFieldMomentInversion</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a520ff2f8fe8c29d2c448ecf910df1f99</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~basicFieldMomentInversion</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a4c8055bf05bb6465ec815251cdfa03e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a81fbc0b024ab994e1e665273b7b7268b</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a0db254ceb34e9343bebd658750f9312d</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ae61ce7f3d511855a1d0eaf25c94d648f</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModels::Beisheuvel</name>
    <filename>a00008.html</filename>
    <base>Foam::bubblePressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a384da6caa2f8744544b10d3f9141c99a</anchor>
      <arglist>(&quot;Beisheuvel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Beisheuvel</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac379b6335cddfa2283aa5385160f867c</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Beisheuvel</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a91bfb9c374d238a7138ba74d00bfc1a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>pb</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6e37365b47da4d25a0771d4b47b131dd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModels::BeisheuvelBubblePressure</name>
    <filename>a00009.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::betaEQMOM</name>
    <filename>a00010.html</filename>
    <base>Foam::extendedMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a352af176e65dc7b012299c16c31a38b3</anchor>
      <arglist>(&quot;beta&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>betaEQMOM</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adf5c9d013afeed0207b5030f2de12c28</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~betaEQMOM</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a493e12f42c3d28984ef116da6b21ad73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a872602e3d9bce4c696be2c2684a05e5a</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a1eb2822d55fbaa8060321a24fc197329</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a88e521ae957743da06eec8e0ab777e2e</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>abee7f03ce3d0afa1dbc462ff6da2fff9</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5831aae7a1d440271b5184f59f912503</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a479ec71576844909c5c0756350c24e2f</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::BlendedInterfacialModel</name>
    <filename>a00011.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BlendedInterfacialModel</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa0e40976200303629f374a9a871d0178</anchor>
      <arglist>(const phasePair::dictTable &amp;modelTable, const blendingMethod &amp;blending, const phasePair &amp;pair, const orderedPhasePair &amp;pair1In2, const orderedPhasePair &amp;pair2In1, const bool correctFixedFluxBCs=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlendedInterfacialModel</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af965d40a66a82b4475329a9a4614a902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasModel</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa432da371c98eef8cb9bd3838b773a7a</anchor>
      <arglist>(const phaseModel &amp;phase) const </arglist>
    </member>
    <member kind="function">
      <type>const modelType &amp;</type>
      <name>phaseModel</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8d34d00d8841842d1634132672f2fcc1</anchor>
      <arglist>(const phaseModel &amp;phase) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a35e0efa93e512a85662abb41bb63bfc3</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ac0b59b15c1414e498d72553b6de07df7</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; GeometricField&lt; Type, fvPatchField, volMesh &gt; &gt;</type>
      <name>F</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a9afb4ce093c6b658309a3e2bd8d42be4</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae05bf466318f1d8d2f95f55280857e0c</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af0442f055ef3354c8dbb92b32cfcd983</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethod</name>
    <filename>a00012.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1c3033ffacce094c1fe820f53f80a6e0</anchor>
      <arglist>(&quot;blendingMethod&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1119d7765ea87401108c8fcc62ba7b19</anchor>
      <arglist>(autoPtr, blendingMethod, dictionary,(                                       const dictionary &amp;dict,                                       const wordList &amp;phaseNames                       ),(dict, phaseNames))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blendingMethod</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af1b1094fa2a867b01c841ea956905237</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~blendingMethod</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>abf63a6ef76e444442518963896048ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aab087ff1857371ba71a25fc1c29f4f80</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae81535e367de29715b8493aa1ed61b1d</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; blendingMethod &gt;</type>
      <name>New</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>afbdcce2767aca7cef1b3dbc9d16af6e8</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernel</name>
    <filename>a00013.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ad27ab1fecde3f5a152854fe04213389e</anchor>
      <arglist>(&quot;breakupKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7611eb0558e7d05a664e8b2239b218c2</anchor>
      <arglist>(autoPtr, breakupKernel, dictionary,(                                       const dictionary &amp;dict,                                       const fvMesh &amp;mesh                       ),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>breakupKernel</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a291975a4184ffb81c78ae7a7dfb85921</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~breakupKernel</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a2dcf50d8d0b3c8a783c5efb6e41c30c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa5de66d90e7d78ea8a00a3bdf2bab7ab</anchor>
      <arglist>(const scalar &amp;abscissa, const label &amp;celli) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; breakupKernel &gt;</type>
      <name>New</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ab499b2327814c15e167416a75c06fd61</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cb_</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3c52b9b797dfa899208f7b7a68d0fadb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::Brownian</name>
    <filename>a00014.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ab79c0cace563122099e6ab3516ef4f1f</anchor>
      <arglist>(&quot;Brownian&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Brownian</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>abd4a2157ea96052400820ceafb702b91</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Brownian</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a1494ac836158c04e01bf0d61faab3e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>aff545f8602677e85abbb1b6c6d0fb20f</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModel</name>
    <filename>a00015.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad013020947e5554096573c24be1d944e</anchor>
      <arglist>(&quot;bubblePressureModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac93c73f7c2c9048d93311a980c9083df</anchor>
      <arglist>(autoPtr, bubblePressureModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair                                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bubblePressureModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab6e3ff5715905bfdcc970e95775727a2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~bubblePressureModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aefde78cb0940fb7f4a42a5fdd24cb208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pb</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a95a8c7df427dab81b9f83b443c2d5c20</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aadd53ef7c544d13f6759b3c6a812bc16</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>divDevRhoReff</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a7b9a37db32e696f706a41defea918d88</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5c93cd0a04c3670c4213435e65985612</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8e0215a73ed9f69baeea60de4cddff0d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a738f1f0dcfedfed552dc8a9aa6c89c5e</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; bubblePressureModel &gt;</type>
      <name>New</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acf4740ee4f554effa2e90422a382ac39</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6307eb221338d4af3a7880e0540b6ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>Cbp_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa4d44b3a345947baaa1c1eecf923e07a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Burns</name>
    <filename>a00016.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af9da51228db084a4ec991144469d9396</anchor>
      <arglist>(&quot;Burns&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Burns</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a52e60ca4d68b79b1a841b6ed341f4638</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Burns</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1a534558e80b1a88451c1f02b6ab56a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModels::CarnahanStarling</name>
    <filename>a00017.html</filename>
    <base>Foam::kineticTheoryModels::radialModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7d4db64d4725848e9d99c78da6995f3c</anchor>
      <arglist>(&quot;CarnahanStarling&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CarnahanStarling</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a20a8ec8a04a7980cc50a82f26b36e24f</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CarnahanStarling</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a5f7fbca20ba93e2ec320ab06b57fc08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a77181c36b117cab1999c37a2c4ae392f</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a76068a5c111e6a71f9d5011c78d97346</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::conditionalMomentInversion</name>
    <filename>a00018.html</filename>
    <member kind="function">
      <type></type>
      <name>conditionalMomentInversion</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aea8708169fa153ae734bde9a7be848e0</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const Map&lt; label &gt; map, const labelList &amp;nNodes, const List&lt; word &gt; &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~conditionalMomentInversion</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a58b463b7150f954828f65cb99d9f7ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8d1ea4c567d75c1d1fc0b882a5c4ac29</anchor>
      <arglist>(const nDimensionalMappedList&lt; scalar &gt; &amp;moments)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac1e97a89c526e32fc5ef143d6bcef361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>nNodes</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af0c9dfde6f2aa1caa3d94853d6fd7fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; nDimensionalMappedList&lt; scalar &gt; &gt; &amp;</type>
      <name>weights</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a74dc9a46ed55bdd3419033108410c0fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; nDimensionalMappedList&lt; scalar &gt; &gt; &amp;</type>
      <name>abscissae</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a82e42b64483b51fcf767d9709206c1ef</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModel</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a89ef7b0434555578ece218c438ff74fe</anchor>
      <arglist>(&quot;conductivityModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a91190e56730ca9fbb8329c36b616da50</anchor>
      <arglist>(autoPtr, conductivityModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conductivityModel</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6e10d6d049c82c8a16079f7606131d78</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~conductivityModel</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a27922e15045f2be7cf059bf87e8fc9bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad736a9b98eec5b0eb5417327cc0dc881</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; conductivityModel &gt;</type>
      <name>New</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a69b9489f71079b9c7e7c6c01c2a30547</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::constantAggregation</name>
    <filename>a00020.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantAggregation</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3d9eab6d02320111723f0725a2ef06fd</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantAggregation</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a8f95da283d65bcd70fad3f015ff2dfd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aff545f8602677e85abbb1b6c6d0fb20f</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::constantAspectRatio</name>
    <filename>a00021.html</filename>
    <base>Foam::aspectRatioModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantAspectRatio</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a01c823930bcaf0814e9697b4118b35ca</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantAspectRatio</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a094026f88f0f95649f59375f3cf4ab49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a972dcd8e78e1967782a127bf17bd2eb4</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::constantAspectRatio</name>
    <filename>a00022.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::constantBreakup</name>
    <filename>a00023.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantBreakup</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0a870758489c808541712fef4848004a</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantBreakup</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4301ded8dfbbd776391943d59b7fdb28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a1e8a125530058d3c06bc7ca11c10c1e2</anchor>
      <arglist>(const scalar &amp;abscissa, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::growthModels::constantGrowth</name>
    <filename>a00024.html</filename>
    <base>Foam::populationBalanceSubModels::growthModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac2a86ba46d157b053e4a28a9483a48f5</anchor>
      <arglist>(&quot;constant&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantGrowth</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a41f1e1e078c35159653a11c684be29b0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantGrowth</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af00385dc3e6aa76de6adb4cff11350b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kg</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9949ef95294d428e299b22c78783df34</anchor>
      <arglist>(const scalar &amp;abscissa) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::constantLiftCoefficient</name>
    <filename>a00025.html</filename>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantLiftCoefficient</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a793ccb5fa6b0f442879aef564161485e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantLiftCoefficient</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae78c7f829dd298d6eb15a4b27fc1bd49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a7ca2eeaa963ec216ce5478271a682ea5</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</name>
    <filename>a00026.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantTurbulentDispersionCoefficient</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>abff9dc535a1b0ff0fc04db1844ccdea3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantTurbulentDispersionCoefficient</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a3bc61581d3b3fe2a3c1a1e7a2bab81ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::constantVirtualMassCoefficient</name>
    <filename>a00027.html</filename>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aafe31ab21b510f2d502d4058cf65e7bd</anchor>
      <arglist>(&quot;constantCoefficient&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constantVirtualMassCoefficient</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>afeb16f652c46330b455d29bb90bd36ac</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~constantVirtualMassCoefficient</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a54ae44e71e4c68181d6f27f0c134f53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a5eb86a943fb9eba9a9d253787e7ca82c</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::cosine</name>
    <filename>a00028.html</filename>
    <base>Foam::wallDampingModels::interpolated</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a5ca8cd4cc19cd02aad3f320c04f1d02c</anchor>
      <arglist>(&quot;cosine&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cosine</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a883947a3b0e074dba07fd97db34d8bb4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cosine</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aa683640bc4d1d53d242dc4f36e7c6337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ad826c52960e65cba81f05f76e5ba771c</anchor>
      <arglist>(const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistribution</name>
    <filename>a00029.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a82911bf276379ac9d1978f3e59b5a2da</anchor>
      <arglist>(&quot;daughterDistribution&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a233d1b6be37d99eb2ef9e3f3431d6e18</anchor>
      <arglist>(autoPtr, daughterDistribution, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>daughterDistribution</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a24ef98904209a2fdb76d456f36fb7433</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~daughterDistribution</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a82d94b9042834125e095b863b9b1d2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af9150e5e771caf94839759d56d04e458</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; daughterDistribution &gt;</type>
      <name>New</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aae6ec3b92070a02ab63d7193760e4cb4</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Davidson</name>
    <filename>a00030.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a10ea756adf27fc1db4cbefca872e46b6</anchor>
      <arglist>(&quot;Davidson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Davidson</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad5245e0c74d2dbc5984f7716038c3ce6</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Davidson</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a8b91468d395275ec67deb3eb84fb54e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::differentialForceAggregation</name>
    <filename>a00031.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a36b4b16775fb11ddc9dc3aa051f015d1</anchor>
      <arglist>(&quot;differentialForce&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>differentialForceAggregation</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a05c80bd86eb232b2d727b7a7d6656e7e</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~differentialForceAggregation</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ab500dc560ba25bcea373d41739d6429b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aff545f8602677e85abbb1b6c6d0fb20f</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::diffusionModel</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aac5e53b16b5d306f767a3ac9c82018fe</anchor>
      <arglist>(&quot;diffusionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa29c65576a34ab15da2f135cfb51cd12</anchor>
      <arglist>(autoPtr, diffusionModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diffusionModel</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9ddf42daebca521ed9b1836083a7c90a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~diffusionModel</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af2348e708346160fd55cb63f0a48dfa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5b7c21e0d26e0f2c3f207a1a6929fd6d</anchor>
      <arglist>(const volScalarField &amp;moment) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; diffusionModel &gt;</type>
      <name>New</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9f9abf14e0f01fcbeb8b64ab565b8df5</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModel</name>
    <filename>a00033.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aac5e53b16b5d306f767a3ac9c82018fe</anchor>
      <arglist>(&quot;diffusionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aa29c65576a34ab15da2f135cfb51cd12</anchor>
      <arglist>(autoPtr, diffusionModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diffusionModel</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a9ddf42daebca521ed9b1836083a7c90a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~diffusionModel</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>af2348e708346160fd55cb63f0a48dfa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a5b7c21e0d26e0f2c3f207a1a6929fd6d</anchor>
      <arglist>(const volScalarField &amp;moment) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; diffusionModel &gt;</type>
      <name>New</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4979734dfbad3055a0ebcb03224a6cf3</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModel</name>
    <filename>a00034.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a676cab8ef1a30a2de2568bd0e1676e01</anchor>
      <arglist>(&quot;dragModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ae8be05de9a7b56be7eec34a676a4faf2</anchor>
      <arglist>(autoPtr, dragModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair,                                                       const bool registerObject                                       ),(dict, pair, registerObject))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dragModel</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1ed05cfa648855b91ecd3d1e8e5c5bb8</anchor>
      <arglist>(const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dragModel</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ac7f8d6ce7ea2bab6446a4f0d69b7f512</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~dragModel</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ac79b52a0efbfdce3c2d93318aa7fb635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>afd3c4312e1597c812b17c65ebae28503</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aeea45f46f7f282a9ef8f5091a2152635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a81a1934b2689a0f8f0c6a19121199a7b</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>acf0bef05c6c97208195a12f283cd19d6</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9e857543830fed4378771096fbd84e90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a173fb5ba73726414ccf92217686cef54</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeData</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a8636852e37dd7a5d68b3c25ee656f778</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; dragModel &gt;</type>
      <name>New</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ae1aa0fa2c61bfd36de42468952efddbe</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimK</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>af5135bc8dd5edb6b0037af125aa01e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimKa</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1cdc8e3cf39524222e5eb04ac56b3c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; swarmCorrection &gt;</type>
      <name>swarmCorrection_</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9a320669b43f521b40f001a97ffbc4a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::eigenSolver</name>
    <filename>a00035.html</filename>
    <member kind="function">
      <type></type>
      <name>eigenSolver</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ade4e6ff9a67eb861e728ad561d045027</anchor>
      <arglist>(const scalarSquareMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigenSolver</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac19d211d97c70922835cc795f9b2e242</anchor>
      <arglist>(const scalarSquareMatrix &amp;A, bool symmetric)</arglist>
    </member>
    <member kind="function">
      <type>const scalarDiagonalMatrix &amp;</type>
      <name>eigenvaluesRe</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a8927d2839df055d2e92763015985af22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarDiagonalMatrix &amp;</type>
      <name>eigenvaluesIm</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a39526476f323610e9a66b3aa5a68d5b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarSquareMatrix &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a9585ad0ceb154d3f6bacd468376aa1df</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Ergun</name>
    <filename>a00036.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a08cc9411f50e6db63438ac6d642b7a26</anchor>
      <arglist>(&quot;Ergun&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ergun</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a2fb55814ce118e53613e2ff701062d98</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ergun</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a734bd321f41560ef9ac31f5bcb811e83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::erosion</name>
    <filename>a00037.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a62fb9ef190a5ffc161db6206dc8268c2</anchor>
      <arglist>(&quot;erosion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>erosion</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a2b3867c760b6b4b9aa9d9498e244db7b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~erosion</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a6dba80760a678d33471f4e4b6cd26a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>af11d63388088dc9b381b450559526d24</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::exponentialBreakup</name>
    <filename>a00038.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a86ff92ca0beb621157b91eba8601746d</anchor>
      <arglist>(&quot;exponential&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exponentialBreakup</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ab8c18aa51a2edf305a6043ff25a8e675</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~exponentialBreakup</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a3805c5cd8e532366720e40ab89e2d01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a1e8a125530058d3c06bc7ca11c10c1e2</anchor>
      <arglist>(const scalar &amp;abscissa, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::extendedFieldMomentInversion</name>
    <filename>a00039.html</filename>
    <base>Foam::fieldMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a92d1d2c620a5376ba8e67121739b9a96</anchor>
      <arglist>(&quot;extendedFieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>extendedFieldMomentInversion</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a694ee9b046a29d6d51bce94e2d5f9193</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~extendedFieldMomentInversion</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>abcb2345daaefe093eab65b6cf91ad9c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a81fbc0b024ab994e1e665273b7b7268b</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a0db254ceb34e9343bebd658750f9312d</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ae61ce7f3d511855a1d0eaf25c94d648f</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::extendedMomentInversion</name>
    <filename>a00040.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a3f90688f92c81e5818c2585b4451e43f</anchor>
      <arglist>(&quot;extendedMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a8dbf28bc47565126766861c118c2033f</anchor>
      <arglist>(autoPtr, extendedMomentInversion, dictionary,(                                                       const dictionary &amp;dict,                                                       const label nMoments,                                                       const label nSecondaryNodes                                       ),(dict, nMoments, nSecondaryNodes))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>extendedMomentInversion</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afe89ce0884b636b5ace78d61605601af</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~extendedMomentInversion</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a37ce62f65b4f4630243d90f31e47d25a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a45d56bb3ba42ace7670d4c68707abf5d</anchor>
      <arglist>(const univariateMomentSet &amp;moments)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a16bc2a1c0649f9428b6d1a89efd4e9d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nPrimaryNodes</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>addb843076e1ddf5cc3c709baa73756ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nSecondaryNodes</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>af326f16b872f54341e6fd95a1e8414c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>sigma</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a2b9edc54c3fe4f8d47922ad824da357c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>primaryWeights</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a8840f59fd6d9dd1f2154d81fe377c62b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>primaryAbscissae</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a9cfcee4e5ebf185d91120fb9fd2abe55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarRectangularMatrix &amp;</type>
      <name>secondaryWeights</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a513b3ebae3591c362b1d8e967a5871dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarRectangularMatrix &amp;</type>
      <name>secondaryAbscissae</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a6b8b0912e2ddfdec5e637320f64f6c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; extendedMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a404fcfd31812910b2629598402f2183d</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad9ffbed9b29d5c51f202e690534149c6</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a6bdcc0b154191b3f68ade352d8f81786</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a45d093a1dba87ac5b3225bbec5cd48a3</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a05e365f57804aa13cd6bd279b552ea02</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>normalizedMomentError</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a21b737ce5ace3ad03f53c403f8e33127</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad5f6b05480e05c31e0a50441261c3059</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a2acee07bc2cc5f9cc51b0b4b2c98f943</anchor>
      <arglist>(univariateMomentSet &amp;moments)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nMoments_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a2241219aa524be91ffd4ded3f42f582a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nPrimaryNodes_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a4f67ff7835ca0a0649bd0fc7df50293f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a40215782a1b76974e2398e5db8a42c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>primaryWeights_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aedefe40f48ae03efde1bc63b09f905d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>primaryAbscissae_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ab603db57b174dc650c896e4ad2c09c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sigma_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a60ad044da1c5c5863dc3999beaf9ded6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarRectangularMatrix</type>
      <name>secondaryWeights_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7ee069fff6b86877e0fea50151279f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarRectangularMatrix</type>
      <name>secondaryAbscissae_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7181a7bcc88b4461f73692d3cf68b217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>minMean_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ace8d3904a17ec917d2c13e4fc5589881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>minVariance_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a34b2a8a03f3f44ac9346df9b0dab3fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>maxSigmaIter_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aa78ff36606add0e3786c315268651929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>momentsTol_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae7deec167ce9b1e5dd3ec8cb8763a920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sigmaMin_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a75d8593d0b82f0767612d7fcdf64077f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>sigmaTol_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afac3a4fbf965a79a72058e61df5c748e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>targetFunctionTol_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a650aa5cf90bbd6acdd545a79a5bbbede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>foundUnrealizableSigma_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aeb806194434667ed8302ae914a218ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nullSigma_</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a321aaf5fa452c684bea8e78de313a5df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::fieldMomentInversion</name>
    <filename>a00041.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a78518bc7cbbbdd3e08d024a5776e9d2d</anchor>
      <arglist>(&quot;fieldMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>acc3d49bf06efee7e67b10d62808f0153</anchor>
      <arglist>(autoPtr, fieldMomentInversion, dictionary,(                                                       const dictionary &amp;dict,                                                       const label nMoments,                                                       const label nSecondaryNodes                                       ),(dict, nMoments, nSecondaryNodes))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fieldMomentInversion</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab0c968ddf570d99079f6013c38e6366a</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fieldMomentInversion</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ac9514bda7486d306d89ac080c6b48a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af1ce49a928b14da3dbc18b8c7a3b2061</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invertBoundaryMoments</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6ab57be96e140a67b8f4762fc67c2a1b</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>invertLocalMoments</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a07e40a68be917a3b4910abca074f30db</anchor>
      <arglist>(const volUnivariateMomentFieldSet &amp;moments, PtrList&lt; volScalarNode &gt; &amp;nodes, const label celli, const bool fatalErrorOnFailedRealizabilityTest=true)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extended</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab7b9ffa2fac0589fccaf727ecc4bf8ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aaa7a60bdf0d7425ae1a922520de47637</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extended_</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a4bb40947fbadb3a714e5e3beb2824193</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::firstOrderKinetic</name>
    <filename>a00042.html</filename>
    <base>Foam::univariateMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>afbbdb9b30b57c240fc00b04c327e86eb</anchor>
      <arglist>(&quot;firstOrderKinetic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>firstOrderKinetic</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa77183040243fb89c664cf4dc547880f</anchor>
      <arglist>(const dictionary &amp;dict, const univariateQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~firstOrderKinetic</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa065baddb341f0e3f1d89ef960bb7abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateNodes</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aee1fc78125838d352f1209c771319fe7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernels::FokkerPlanck</name>
    <filename>a00043.html</filename>
    <base>Foam::mixingSubModels::mixingKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a744547cf1f8f8cab0775e6b41d928bda</anchor>
      <arglist>(&quot;FokkerPlanck&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FokkerPlanck</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a718fc89d155ab44ff0ceab5edaebae42</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FokkerPlanck</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a58e0c436828db3c5c2398eac07f00747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac39375448f36ddee2cac96a50dd6a0a9</anchor>
      <arglist>(const volUnivariateMoment &amp;moment, const volUnivariateMomentFieldSet &amp;moments) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::Frank</name>
    <filename>a00044.html</filename>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a152da4f74040fb11a7b1edcb75e56d21</anchor>
      <arglist>(&quot;Frank&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frank</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>afda02904b876255649385d4f33720944</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Frank</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7efad619c8f6a662560a93872b46604b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac25d7fa61e6c77f74f43e4c65d647a45</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModel</name>
    <filename>a00045.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af94b60ff3239fa81ced4741c546de289</anchor>
      <arglist>(&quot;frictionalStressModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a2741be6f2501ad67d012f86baff59c92</anchor>
      <arglist>(autoPtr, frictionalStressModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>frictionalStressModel</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a10a490ec2de060d40877d7cd26f6577d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~frictionalStressModel</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a1f71b430053e2a10283db3dc6b8b96ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a6ea985dd666b633e603e6f2a84ff4afe</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8949243dd1fb635cd5afd452f6b7f06b</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5035d13518e7cefd211c8f47e9f9a8d3</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a2eeeaebe7e52f5d842385ce0b177150d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; frictionalStressModel &gt;</type>
      <name>New</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af4b073000c3b3d6bba3ee4023f40aa98</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::fullFragmentation</name>
    <filename>a00046.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a9605c41753d122821a153bb82d936e9c</anchor>
      <arglist>(&quot;fullFragmentation&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fullFragmentation</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aa3c53b21095cacbcf34c500cc696a3fa</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fullFragmentation</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>adb107a2c005595f4c614a4b15316b0e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>af11d63388088dc9b381b450559526d24</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gammaEQMOM</name>
    <filename>a00047.html</filename>
    <base>Foam::extendedMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>afffec2f7f3e2436504686ee8fe86986f</anchor>
      <arglist>(&quot;gamma&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gammaEQMOM</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a41e161473baf15e743b15c1570ae7fee</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gammaEQMOM</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a89b0169394c5e2e3ed2587258b2f6b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a872602e3d9bce4c696be2c2684a05e5a</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a1eb2822d55fbaa8060321a24fc197329</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a88e521ae957743da06eec8e0ab777e2e</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>abee7f03ce3d0afa1dbc462ff6da2fff9</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5831aae7a1d440271b5184f59f912503</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a479ec71576844909c5c0756350c24e2f</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gaussLobattoMomentInversion</name>
    <filename>a00048.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a82afeb74ebccf942227542383440ade1</anchor>
      <arglist>(&quot;GaussLobatto&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gaussLobattoMomentInversion</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a19f132e2fe6d20faf1a5a05768990c4b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gaussLobattoMomentInversion</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae6b87c401ec282458f44cea51931b47c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gaussMomentInversion</name>
    <filename>a00049.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ab64427407045477aab2eb45b9f9efe1e</anchor>
      <arglist>(&quot;Gauss&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gaussMomentInversion</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ab84059e01757095681a772d0021f9aac</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gaussMomentInversion</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a45dd9dc55811f1ddc792a320c2a283af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::gaussRadauMomentInversion</name>
    <filename>a00050.html</filename>
    <base>Foam::univariateMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af30711ded5ffb0a9c4feae46a978cc98</anchor>
      <arglist>(&quot;GaussRadau&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>gaussRadauMomentInversion</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aaa249ea77e932779c48df02a6ee4e382</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~gaussRadauMomentInversion</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a1c10e28cb0b50ad94bb183aa98afcf05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>adb8044c0e431e0fe1005a4395fff5478</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ae11f16abe217f76d4e7b5e98e47b3ae1</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Gibilaro</name>
    <filename>a00051.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab851bee6b3b0651f2957394fc183e00c</anchor>
      <arglist>(&quot;Gibilaro&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gibilaro</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a7f4e3a8e5971a338fb56462eb6ff0170</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gibilaro</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aaeb037bce5e7e24c2575f49d961ab996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::Gidaspow</name>
    <filename>a00052.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad2d65d02154bc44c919f16232a8a9b04</anchor>
      <arglist>(&quot;Gidaspow&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gidaspow</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a99a6cb9080f3159e7fc35cfa77f2f372</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gidaspow</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9d1f845bcd7f32e6ac377ae81236f8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab818d64d88b66659e3d22de5b2d1e1ed</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModels::Gidaspow</name>
    <filename>a00053.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad2d65d02154bc44c919f16232a8a9b04</anchor>
      <arglist>(&quot;Gidaspow&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gidaspow</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a99a6cb9080f3159e7fc35cfa77f2f372</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gidaspow</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9d1f845bcd7f32e6ac377ae81236f8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3127d9484a13bfb2bb2090956c1f8836</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::GidaspowErgunWenYu</name>
    <filename>a00054.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af9db2b83459be6cbcd78981faa4ecc7e</anchor>
      <arglist>(&quot;GidaspowErgunWenYu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GidaspowErgunWenYu</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a62faf9144f49c46a463ca1c4c49c2430</anchor>
      <arglist>(const dictionary &amp;interfaceDict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GidaspowErgunWenYu</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aefbf4c46366cc226cc69a611e96a52c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::GidaspowSchillerNaumann</name>
    <filename>a00055.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae3e11a25058a3ce2460b9a0a33191e6f</anchor>
      <arglist>(&quot;GidaspowSchillerNaumann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GidaspowSchillerNaumann</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>abe030f4c056ca260d3fcb73543ca85de</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GidaspowSchillerNaumann</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ab5d9d775fdc888b815b3300f91ff9cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Gosman</name>
    <filename>a00056.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a692770c3dbf7f04069a2180f3b5a686d</anchor>
      <arglist>(&quot;Gosman&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gosman</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aef7cab7bcc57d7203b4dfc17432a76fa</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gosman</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>af13143a9e4603179b282fbfc64066505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModel</name>
    <filename>a00057.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2aba49360c7f76bb36eb0020006414c4</anchor>
      <arglist>(&quot;granularPressureModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>af356215ceaf906c7c7a07fc6449f9314</anchor>
      <arglist>(autoPtr, granularPressureModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>granularPressureModel</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5bf40c505c80f8322a78fe9318dec694</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~granularPressureModel</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>af438d46cca49e7b2ba5ac4705820ac64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aaf24def5ff309c8873a3c69d6dd62edf</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>afd267a65982e82b749a6e5029fd4c9ce</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; granularPressureModel &gt;</type>
      <name>New</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a930e3faa668f26dba20a832ed632f12a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::growthModel</name>
    <filename>a00058.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab1ef5bca2c86ba9151614ebeaffed754</anchor>
      <arglist>(&quot;growthModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa9d98df3c14edfe3a1ac5bbfb9e2b10b</anchor>
      <arglist>(autoPtr, growthModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>growthModel</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa383495cbbb616e5138b6b5ce8a2630b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~growthModel</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a2cbcf75a5aa3c9f8e8b9d40904732c29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>Kg</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab7fb4ac29c00f426780bcdfebae822de</anchor>
      <arglist>(const scalar &amp;abscissa) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; growthModel &gt;</type>
      <name>New</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7da088e2d1463d28793d9e080bf244a6</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cg_</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a77eb6079970cf46157d09f0370132b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePairKey::hash</name>
    <filename>a00059.html</filename>
    <member kind="function">
      <type></type>
      <name>hash</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>af5d527ef2a6e3f43563ad4cb15872140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>operator()</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4054fede62a295a41d52934dc8c77f23</anchor>
      <arglist>(const phasePairKey &amp;key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::HrenyaSinclair</name>
    <filename>a00060.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac3738c27abc025a4d3ae9b60733d519e</anchor>
      <arglist>(&quot;HrenyaSinclair&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HrenyaSinclair</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a355f9db3b98cb68e9fcfede9c56d12be</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HrenyaSinclair</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ae22c53ae3cb16feeb82adb0e4c8f8c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ab818d64d88b66659e3d22de5b2d1e1ed</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModels::HrenyaSinclair</name>
    <filename>a00061.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ac3738c27abc025a4d3ae9b60733d519e</anchor>
      <arglist>(&quot;HrenyaSinclair&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HrenyaSinclair</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a355f9db3b98cb68e9fcfede9c56d12be</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HrenyaSinclair</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ae22c53ae3cb16feeb82adb0e4c8f8c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3127d9484a13bfb2bb2090956c1f8836</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::hydrodynamicAggregation</name>
    <filename>a00062.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a40ce4cef678e15a0f33624e28b824edf</anchor>
      <arglist>(&quot;hydrodynamic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hydrodynamicAggregation</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac2d59e2e1b480844473b8c9e80544658</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~hydrodynamicAggregation</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa892ea992f56afc113c78780d52f9d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aff545f8602677e85abbb1b6c6d0fb20f</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethods::hyperbolic</name>
    <filename>a00063.html</filename>
    <base>Foam::blendingMethod</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a023b41fe28b3789813386427d8a0fd77</anchor>
      <arglist>(&quot;hyperbolic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hyperbolic</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aff47927a8a4c30d803dc782683ad2b9c</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~hyperbolic</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aea3d7726a8ee88ac083cf73de5e2b74a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae56b0556a3fde6a2538ef45a21ad8597</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af623e0c066be77b88c66229c02b9bbf1</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::hyperbolic</name>
    <filename>a00064.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernels::IEM</name>
    <filename>a00065.html</filename>
    <base>Foam::mixingSubModels::mixingKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a1aa74a2a8e1a424bcbf1e400e8a4c504</anchor>
      <arglist>(&quot;IEM&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IEM</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a0889eb4694ebdfaf84d6835f64d09606</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IEM</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a997e52c6e4e36862421a083fced3f78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ac39375448f36ddee2cac96a50dd6a0a9</anchor>
      <arglist>(const volUnivariateMoment &amp;moment, const volUnivariateMomentFieldSet &amp;moments) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::quadratureNode::iNew</name>
    <filename>a00066.html</filename>
    <member kind="function">
      <type></type>
      <name>iNew</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>add8e7db560379dd410d39d795968758a</anchor>
      <arglist>(const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const dimensionSet &amp;abscissaDimensions, const wordList &amp;boundaryTypes, const bool extended, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; quadratureNode&lt; weightType, abscissaType, sigmaType &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a7cf4b421db9b97300525a415cbae6d2c</anchor>
      <arglist>(Istream &amp;is) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::moment::iNew</name>
    <filename>a00067.html</filename>
    <member kind="function">
      <type></type>
      <name>iNew</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0378f00790de3521807ef30a7b9cd294</anchor>
      <arglist>(const word &amp;distributionName, const fvMesh &amp;mesh, const autoPtr&lt; PtrList&lt; nodeType &gt;&gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; moment&lt; fieldType, nodeType &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a70e096bade6ebcd0162ee21bb0c74507</anchor>
      <arglist>(Istream &amp;is) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::interpolated</name>
    <filename>a00068.html</filename>
    <base>Foam::wallDampingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aacb668cf543a9f5aac54481b66db09f0</anchor>
      <arglist>(&quot;interpolated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>interpolated</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad92a30c3e8c1b95706d50a8884fe46ac</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~interpolated</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0074db41285b7d71b764ef377efadd07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a76b9ed125dc2d92934609a2cf0b556dc</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a93f59882a72e880090985fbe9d287e94</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7e67ab39339e42a87c9361223183bd32</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3ca7eb72994172e6b9b6a87c4e4fe812</anchor>
      <arglist>(const label nodei) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::IshiiZuber</name>
    <filename>a00069.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a27504886a2f81579eb29c198c0e196cf</anchor>
      <arglist>(&quot;IshiiZuber&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IshiiZuber</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a104e87581dd16bdd210bc2b262e92af4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IshiiZuber</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9fe64a0408a35ff641b612470cf0b4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModels::JohnsonJackson</name>
    <filename>a00070.html</filename>
    <base>Foam::kineticTheoryModels::frictionalStressModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae1c4d53d4973b0f037e5b53bba3d5533</anchor>
      <arglist>(&quot;JohnsonJackson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJackson</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a7296bb86fc5f0eb4a870ac1887ad077d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JohnsonJackson</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a08dcf02c1cbca1f0acd83f74af2a3cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a2fc1dda5901ee9cb4c70a6ba2301884b</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>adfefae1dab0fb12943207676bf26dce8</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae429d57404660fbf93f53dbcd90c9e49</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::JohnsonJacksonParticleSlipFvPatchVectorField</name>
    <filename>a00071.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a2c785b359de0e5b11cdbe7c4c49d0469</anchor>
      <arglist>(&quot;JohnsonJacksonParticleSlip&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a42f0f792754bdd67df4cc8567525793b</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0ec0ca4edd9b40d033bd3ebb91f0b4e0</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aa97cbe08f1accba351481e330fce7ebd</anchor>
      <arglist>(const JohnsonJacksonParticleSlipFvPatchVectorField &amp;, const fvPatch &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a4308424ef4850dd6ced3b97e4203eb0b</anchor>
      <arglist>(const JohnsonJacksonParticleSlipFvPatchVectorField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchVectorField &gt;</type>
      <name>clone</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a40a4fa5adfca92c7ac14e855f302bf5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleSlipFvPatchVectorField</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a91cb111fe011fb94983f881c454deaaf</anchor>
      <arglist>(const JohnsonJacksonParticleSlipFvPatchVectorField &amp;, const DimensionedField&lt; vector, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchVectorField &gt;</type>
      <name>clone</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab6f6b734c9ed464a2b63ba05b86aafd0</anchor>
      <arglist>(const DimensionedField&lt; vector, volMesh &gt; &amp;iF) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>autoMap</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a14e8e75907d10256d8a4ab61520e7e08</anchor>
      <arglist>(const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rmap</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a63e5d4ac1533d321010cd6f25fe08385</anchor>
      <arglist>(const fvPatchVectorField &amp;, const labelList &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCoeffs</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a578f7c989cf81854d45213ec3ee3062a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8485e769c905e0174ac3bc1970eac328</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::JohnsonJacksonParticleThetaFvPatchScalarField</name>
    <filename>a00072.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a3503fab13eb0a7226df1231951df6089</anchor>
      <arglist>(&quot;JohnsonJacksonParticleTheta&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab4de2b6aeef0cd5aed0a94d42a80ca16</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad896ebd47fc1f2f92971dcefbdda839a</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa297c89153786acaae10e1c2710a3928</anchor>
      <arglist>(const JohnsonJacksonParticleThetaFvPatchScalarField &amp;, const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a7a91158a3117d8fcfab3cb29cc279b48</anchor>
      <arglist>(const JohnsonJacksonParticleThetaFvPatchScalarField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afdeceecb1c75e9ccc98c2f489fe8fa00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonParticleThetaFvPatchScalarField</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4cf6a9245c7d534d37bb0232004d294a</anchor>
      <arglist>(const JohnsonJacksonParticleThetaFvPatchScalarField &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8a53cadd8227f307947ec9c8750e5f11</anchor>
      <arglist>(const DimensionedField&lt; scalar, volMesh &gt; &amp;iF) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>autoMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a14e8e75907d10256d8a4ab61520e7e08</anchor>
      <arglist>(const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rmap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1a69c2588e34c53c0a08a60930c964bc</anchor>
      <arglist>(const fvPatchScalarField &amp;, const labelList &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCoeffs</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a578f7c989cf81854d45213ec3ee3062a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8485e769c905e0174ac3bc1970eac328</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModels::JohnsonJacksonSchaeffer</name>
    <filename>a00073.html</filename>
    <base>Foam::kineticTheoryModels::frictionalStressModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ab83eda930b6195a385f23bec86134a83</anchor>
      <arglist>(&quot;JohnsonJacksonSchaeffer&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonJacksonSchaeffer</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a00b7ef071ba9887dfd03409ab651af01</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JohnsonJacksonSchaeffer</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a6b3e0a63ccb76de652e667f189df185f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a2fc1dda5901ee9cb4c70a6ba2301884b</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>adfefae1dab0fb12943207676bf26dce8</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ae429d57404660fbf93f53dbcd90c9e49</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::RASModels::kineticTheoryModel</name>
    <filename>a00074.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aeee3c97531d8416b36e10190a819c1ca</anchor>
      <arglist>(&quot;kineticTheory&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kineticTheoryModel</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af9bed44fcd5ddafd1a20feb3676d513f</anchor>
      <arglist>(const volScalarField &amp;alpha, const volScalarField &amp;rho, const volVectorField &amp;U, const surfaceScalarField &amp;alphaRhoPhi, const surfaceScalarField &amp;phi, const phaseModel &amp;transport, const word &amp;propertiesName=turbulenceModel::propertiesName, const word &amp;type=typeName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~kineticTheoryModel</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a482d1ce20e490a12c02976350499c8f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>adb2a0dc1968d4936ca11eecd9b48561b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a1c218c9cd21e463a17acc70735754f93</anchor>
      <arglist>(const label patchi) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>k</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad6ae25c513d7aaeac11c1d5e870242a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>epsilon</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af8fde26ebf6e4d7cbbdb9000bd2c57d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>R</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aaaa5c7b78f0758b17d04c0a3a3fdf70a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pPrime</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a68afe51ee9f546484a16ea640f911cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>pPrimef</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a2848240fb0bb5f3676e01670c0963b19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>devRhoReff</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ab315d3ba70af0980e59a5a56b4220381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a429edceb6d6662db6cc24b14bbba01ed</anchor>
      <arglist>(volVectorField &amp;U) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModel</name>
    <filename>a00075.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::Lain</name>
    <filename>a00076.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a3c704c34be4dc8dc0e01ba18081b4102</anchor>
      <arglist>(&quot;Lain&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lain</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada85dfe5c40eb96e07023787aa0ab745</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lain</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ae36cdf91ddf180a64b9766fe5ae1496b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::Lamb</name>
    <filename>a00077.html</filename>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a12e2e2803bbf74bce46bd237011ea2c0</anchor>
      <arglist>(&quot;Lamb&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lamb</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a58a366133f549d84004e29bf8e011ace</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lamb</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a343c59311abd70dac8a6f71ab3ce54c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5eb86a943fb9eba9a9d253787e7ca82c</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::LegendreMagnaudet</name>
    <filename>a00078.html</filename>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>abbb7ed6dfd12f682709bd4b2f2b59e87</anchor>
      <arglist>(&quot;LegendreMagnaudet&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LegendreMagnaudet</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>acc53debfcea5371b060430124fce95a1</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LegendreMagnaudet</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a724cb76c34f9e6efb9180c387cd2042f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a7ca2eeaa963ec216ce5478271a682ea5</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModel</name>
    <filename>a00079.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a84a6419c00a3e5ce648c4a205646990d</anchor>
      <arglist>(&quot;liftModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a248d27182d78249da56e16a1caded99c</anchor>
      <arglist>(autoPtr, liftModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair                                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>liftModel</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>abebc651db42a156f1d5510f17d220e12</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~liftModel</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a2e3eccdec8e6ad676b2bb5c71250c4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>acddbc179131057c799faf232a8c540d7</anchor>
      <arglist>(const label nodei, const label nodej) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a9d6e8048fc3bc74a8bae988791e3caef</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a2c0431dc66188725d8eb8e4522f38822</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aa75a4e92f8330437da8589c553c83a25</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; liftModel &gt;</type>
      <name>New</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a15fc4d77eaee8828fa7f32cab598e0e9</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a6307eb221338d4af3a7880e0540b6ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::linear</name>
    <filename>a00080.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethods::linear</name>
    <filename>a00081.html</filename>
    <base>Foam::blendingMethod</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ab0fc4a9eb6b967007278346598d07480</anchor>
      <arglist>(&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linear</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a79b60ebb16c571c744558873b82fd747</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~linear</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7c5860dbf7acb473278fab0d5d587c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ae56b0556a3fde6a2538ef45a21ad8597</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>af623e0c066be77b88c66229c02b9bbf1</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::linear</name>
    <filename>a00082.html</filename>
    <base>Foam::wallDampingModels::interpolated</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab0fc4a9eb6b967007278346598d07480</anchor>
      <arglist>(&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linear</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a666fca855c19bd135c536da260f23323</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linear</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af3fe8bd0398e006d8f2a6e36b957b92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad826c52960e65cba81f05f76e5ba771c</anchor>
      <arglist>(const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::lognormalEQMOM</name>
    <filename>a00083.html</filename>
    <base>Foam::extendedMomentInversion</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a34900882fe6c779674da9f3acabe2b</anchor>
      <arglist>(&quot;lognormal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lognormalEQMOM</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a041c92a009ff5d815d4114f739c90671</anchor>
      <arglist>(const dictionary &amp;dict, const label nMoments, const label nSecondaryNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~lognormalEQMOM</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a5eae814d9bdd2c784867bb2fbd1fbb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>secondaryAbscissa</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a872602e3d9bce4c696be2c2684a05e5a</anchor>
      <arglist>(scalar primaryAbscissa, scalar secondaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsStarToMoments</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a1eb2822d55fbaa8060321a24fc197329</anchor>
      <arglist>(scalar sigma, univariateMomentSet &amp;moments, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>momentsToMomentsStar</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a88e521ae957743da06eec8e0ab777e2e</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;moments, univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>m2N</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abee7f03ce3d0afa1dbc462ff6da2fff9</anchor>
      <arglist>(scalar sigma, const univariateMomentSet &amp;momentsStar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recurrenceRelation</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a5831aae7a1d440271b5184f59f912503</anchor>
      <arglist>(scalarList &amp;a, scalarList &amp;b, scalar primaryAbscissa, scalar sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>sigmaMax</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a479ec71576844909c5c0756350c24e2f</anchor>
      <arglist>(univariateMomentSet &amp;moments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::LopezDeBertodano</name>
    <filename>a00084.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a3ff04231151de420d6b879006395635d</anchor>
      <arglist>(&quot;LopezDeBertodano&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LopezDeBertodano</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a7db1f3275f09c34bd58efcb661a8c365</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LopezDeBertodano</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a807ce029e5de97d94ab7050539e2791f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModels::Lun</name>
    <filename>a00085.html</filename>
    <base>Foam::kineticTheoryModels::granularPressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a71ac58eefea271425c68a5b19fe89d5b</anchor>
      <arglist>(&quot;Lun&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lun</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a23ee449d6527b7755a1da51eae89e357</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lun</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a9195da2539df648c03a1538ca2e95854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab385b192bdf96fe50901cf94cadcccb2</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a7477040e4bebb305b8dba787382d97e0</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::Lun</name>
    <filename>a00086.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModels::LunSavage</name>
    <filename>a00087.html</filename>
    <base>Foam::kineticTheoryModels::radialModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa7326a112256126f745e25a13b058971</anchor>
      <arglist>(&quot;LunSavage&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LunSavage</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a7bce5061b72bd157fe880f9dbe40a463</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LunSavage</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a75468dcca744cce43224d29b1835f02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a77181c36b117cab1999c37a2c4ae392f</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a76068a5c111e6a71f9d5011c78d97346</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::LuoSvendsen</name>
    <filename>a00088.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a7dabdef9e0dba98649b68dc7314a15f8</anchor>
      <arglist>(&quot;LuoSvendsen&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LuoSvendsen</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a54c8cbfbadc65214ec3705add2cfbab6</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LuoSvendsen</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a4550d3c84edbc1ad0d8f8a6701300eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a1e8a125530058d3c06bc7ca11c10c1e2</anchor>
      <arglist>(const scalar &amp;abscissa, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::nucleationModels::Miller</name>
    <filename>a00089.html</filename>
    <base>Foam::populationBalanceSubModels::nucleationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a0b7ab5f6ffe81765ac026923f92189f7</anchor>
      <arglist>(&quot;Miller&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Miller</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a297db0a313fc404c8e65799a33e7767f</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Miller</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>afbcb41cd463fa394fe864ac5179ef537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>nucleationSource</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1a1beb8cf7e0221ebba90ce5aa341f59</anchor>
      <arglist>(const label &amp;momentOrder, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::mixingKernel</name>
    <filename>a00090.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a3b42ca04bac2225aebf334ca0d1930d3</anchor>
      <arglist>(&quot;mixingKernel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aae2fd47362b83e744693764fac06c525</anchor>
      <arglist>(autoPtr, mixingKernel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingKernel</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aaca5d9c330f9d405dbba4c0a005e67b2</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~mixingKernel</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a8187a8529b4c0530e7d8b8e65f567ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>K</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6ab81f0139b713a05fb0ebe91fc54ed5</anchor>
      <arglist>(const volUnivariateMoment &amp;moment, const volUnivariateMomentFieldSet &amp;moments) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; mixingKernel &gt;</type>
      <name>New</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>add8b3288d1baf0dccf98ad50e9c1a689</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cphi_</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a88b4336f953c90f0d28a80db8fa28857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dimensionedScalar</type>
      <name>Cmixing_</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a1807597980604a41ccdbd2b34f9f4479</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingModel</name>
    <filename>a00091.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ada378cf08f9571013cdc7e3c5363f46f</anchor>
      <arglist>(&quot;mixingModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a8255da669c4a6eac1c759c797ffedde2</anchor>
      <arglist>(autoPtr, mixingModel, dictionary,(                                       const word &amp;name,                                       const dictionary &amp;dict,                                       const surfaceScalarField &amp;phi                       ),(name, dict, phi))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mixingModel</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a48b036b0db3b72f28d8a9ad55fccf461</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~mixingModel</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a0a94ee20d9626b89e9b072c1a6fffd47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>acf73b8eb8622b96b9a7af30fcfe4544a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>aacd6f92a174ec1ebe14983fc21ec498c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; mixingModel &gt;</type>
      <name>New</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a5d4cbf388886a9664347242d9a72b29c</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const surfaceScalarField &amp;</type>
      <name>phi_</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a5828da03a859a3aaa358802cd2daf505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingModels</name>
    <filename>a00092.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::diffusionModels::molecularDiffusion</name>
    <filename>a00093.html</filename>
    <base>Foam::mixingSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>acccd9d711a961de8b7ddaa1f6582763a</anchor>
      <arglist>(&quot;molecularDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>molecularDiffusion</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a41d71a49f9ceacb5bcf471d389c4a71e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~molecularDiffusion</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a092563f81ebe7ddd529901dccc7c9728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2607d470834fac9d39bfc0d92f89d41a</anchor>
      <arglist>(const volScalarField &amp;moment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModels::molecularDiffusion</name>
    <filename>a00094.html</filename>
    <base>Foam::populationBalanceSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>acccd9d711a961de8b7ddaa1f6582763a</anchor>
      <arglist>(&quot;molecularDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>molecularDiffusion</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a41d71a49f9ceacb5bcf471d389c4a71e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~molecularDiffusion</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a092563f81ebe7ddd529901dccc7c9728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a2607d470834fac9d39bfc0d92f89d41a</anchor>
      <arglist>(const volScalarField &amp;moment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::moment</name>
    <filename>a00095.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Foam::moment::iNew</class>
    <member kind="function">
      <type></type>
      <name>moment</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0dd4c0fc68639575e5a3e66da70630f6</anchor>
      <arglist>(const word &amp;distributionName, const labelList &amp;cmptOrders, const fvMesh &amp;mesh, const autoPtr&lt; PtrList&lt; nodeType &gt;&gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moment</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4fb86284ade7cdb74bea8378ecd0ab36</anchor>
      <arglist>(const word &amp;distributionName, const labelList &amp;cmptOrders, const autoPtr&lt; PtrList&lt; nodeType &gt;&gt; &amp;nodes, const fieldType &amp;initMoment)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; moment &gt;</type>
      <name>clone</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7e393a7523438df0e59843176b4bebb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~moment</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1ee407ef1ef100cb57e2b2308495e6d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>momentName</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af1a22abea6056cddf89aae3bfbaa9f11</anchor>
      <arglist>(const word &amp;order, const word &amp;distributionName)</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a6d60057c26042eaf7fa1b3b6fb07b582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>keyword</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af064e129930173e0b74f8b529238d310</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>order</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aca3a2c038db9ad76dce684b08b8c9b6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const labelList &amp;</type>
      <name>cmptOrders</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab070a3b6d0957585273c5331d6521334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoment</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7490ff7789ea684543eefa5a00bcd0b3</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac027d0efa8c54ed71e47cf31f5553ecf</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentFieldSet</name>
    <filename>a00096.html</filename>
    <templarg>momentType</templarg>
    <templarg>nodeType</templarg>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a349fa5253e53dd0dc9e0400cdb11f383</anchor>
      <arglist>(const word &amp;distributionName, const dictionary &amp;dict, const fvMesh &amp;mesh, const autoPtr&lt; PtrList&lt; nodeType &gt;&gt; &amp;nodes, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>acde0580c77dcc8835d0dac0798299f8d</anchor>
      <arglist>(const word &amp;distributionName, const label nMoments, const autoPtr&lt; PtrList&lt; nodeType &gt;&gt; &amp;nodes, const label nDimensions, const Map&lt; label &gt; &amp;momentMap, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~momentFieldSet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a2f005e83e4a818bb3704da88fbe068b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5b84520bcbeeefa531bcd011d279b994</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5b8f956a65d5b7c3292f28f8b45a4665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a515db69ce884936810e537f8bb03fa44</anchor>
      <arglist>(label a) const </arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>afffa93ab2aafb32ad9e414f00b6f6273</anchor>
      <arglist>(label a)</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a367ff26b2bc074d64f159bb54691f4fe</anchor>
      <arglist>(label a, label b) const </arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ad6c20c419c596228f72623615e9b0e27</anchor>
      <arglist>(label a, label b)</arglist>
    </member>
    <member kind="function">
      <type>const momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a7daae9cebc6beb9c9379ee84bf46810b</anchor>
      <arglist>(label a, label b, label c) const </arglist>
    </member>
    <member kind="function">
      <type>momentType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab428c717d588ca3af99b57b8e04ab85d</anchor>
      <arglist>(label a, label b, label c)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>momentMap</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a35c85d2483436bc2f872bfb5ab3203a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac69c81c5f4ebd5edd8ddc30b03c1d184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aca46b3594884357388d4178490fb14e9</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>map</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a8675a91008242f25ed80030311d807e9</anchor>
      <arglist>(label a, label b, label c) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>momentFieldSet&lt; surfaceUnivariateMoment, surfaceScalarNode &gt;</name>
    <filename>a00096.html</filename>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a349fa5253e53dd0dc9e0400cdb11f383</anchor>
      <arglist>(const word &amp;distributionName, const dictionary &amp;dict, const fvMesh &amp;mesh, const autoPtr&lt; PtrList&lt; surfaceScalarNode &gt;&gt; &amp;nodes, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentFieldSet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>acde0580c77dcc8835d0dac0798299f8d</anchor>
      <arglist>(const word &amp;distributionName, const label nMoments, const autoPtr&lt; PtrList&lt; surfaceScalarNode &gt;&gt; &amp;nodes, const label nDimensions, const Map&lt; label &gt; &amp;momentMap, const word &amp;support)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~momentFieldSet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a2f005e83e4a818bb3704da88fbe068b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5b84520bcbeeefa531bcd011d279b994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5b8f956a65d5b7c3292f28f8b45a4665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a515db69ce884936810e537f8bb03fa44</anchor>
      <arglist>(label a) const</arglist>
    </member>
    <member kind="function">
      <type>surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>afffa93ab2aafb32ad9e414f00b6f6273</anchor>
      <arglist>(label a)</arglist>
    </member>
    <member kind="function">
      <type>const surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a367ff26b2bc074d64f159bb54691f4fe</anchor>
      <arglist>(label a, label b) const</arglist>
    </member>
    <member kind="function">
      <type>surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ad6c20c419c596228f72623615e9b0e27</anchor>
      <arglist>(label a, label b)</arglist>
    </member>
    <member kind="function">
      <type>const surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a7daae9cebc6beb9c9379ee84bf46810b</anchor>
      <arglist>(label a, label b, label c) const</arglist>
    </member>
    <member kind="function">
      <type>surfaceUnivariateMoment &amp;</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab428c717d588ca3af99b57b8e04ab85d</anchor>
      <arglist>(label a, label b, label c)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>momentMap</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a35c85d2483436bc2f872bfb5ab3203a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac69c81c5f4ebd5edd8ddc30b03c1d184</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aca46b3594884357388d4178490fb14e9</anchor>
      <arglist>(label elemi)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>map</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a8675a91008242f25ed80030311d807e9</anchor>
      <arglist>(label a, label b, label c) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentFieldSets</name>
    <filename>a00097.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationModel</name>
    <filename>a00098.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a224beab0055b0782bb91e469d8041e05</anchor>
      <arglist>(&quot;momentGenerationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a2b72175416fe80816b02fe132ccda607</anchor>
      <arglist>(autoPtr, momentGenerationModel, dictionary,(                                       const dictionary &amp;dict,                                       const label nNodes,                                       const bool extended,                                       const bool Radau                       ),(dict, nNodes, extended, Radau))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentGenerationModel</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a155bddd425b7ee9784816c7bbffc44d1</anchor>
      <arglist>(const dictionary &amp;, const label, const bool extended, const bool Radau)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~momentGenerationModel</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a350da45c7a0a2dfc9022a4874e9db15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const List&lt; dimensionedScalar &gt; &amp;</type>
      <name>moments</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a7be733eae4aa2322b4e5611082082fae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateQuadrature</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a1f025254fb71bdfa468a5372cf42f68e</anchor>
      <arglist>(const dictionary &amp;)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; momentGenerationModel &gt;</type>
      <name>New</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a2d9b12f3a655b16c6642befc7ba9aa25</anchor>
      <arglist>(const dictionary &amp;dict, const label nNodes, const bool extended, const bool Radau)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nNodes_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aab135301eefe7e9f9123fed12009ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>extended_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a379499271378a2cbda384a08ecd8ec7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>Radau_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aa7f5babd6577d319d9d49fc9b57d7178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; dimensionedScalar &gt;</type>
      <name>weights_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aa3fc7db728a224e60db7cc1c5a11983f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; dimensionedScalar &gt;</type>
      <name>abscissae_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a96f719ab89da67b3a861054f9c9445b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; dimensionedScalar &gt;</type>
      <name>moments_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a0ec1cafde07d42253f85761903381944</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::moments</name>
    <filename>a00099.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::momentSet</name>
    <filename>a00100.html</filename>
    <member kind="function">
      <type></type>
      <name>momentSet</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>afa5ff5026de594029768150956bb1cd4</anchor>
      <arglist>(const label nMoments, const labelListList &amp;momentOrders, const word &amp;support, const scalar initValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>momentSet</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a220ccb97e171f09caa8dbb7a7e99bcca</anchor>
      <arglist>(const scalarList &amp;m, const labelListList &amp;momentOrders, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~momentSet</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a2d461e8178aaecce7fc02ab43bee1230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const labelListList &amp;</type>
      <name>momentOrders</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ac0e55cb78e4e838aa1b439585442d439</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a111ae2fd86df6aa54d903019cd7032f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>support</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ac69c81c5f4ebd5edd8ddc30b03c1d184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nMoments_</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a2241219aa524be91ffd4ded3f42f582a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelListList</type>
      <name>momentOrders_</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ab0e2d1fe30234c743b258634abc400a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::monoKineticQuadratureApproximation</name>
    <filename>a00101.html</filename>
    <base>quadratureApproximation&lt; volUnivariateMomentFieldSet, volScalarNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>monoKineticQuadratureApproximation</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>adaec91d5eba8cbd1753c60ccdfd995bf</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~monoKineticQuadratureApproximation</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a96a9798a7bc99c1c09c291c8c0ada9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocities</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a864bffa5be328d9e1f850b264d2de11e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocities</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a4f0ea905128215dbf8e3e89a2c1a1921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocityMoments</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>accd88777c6713a815b37b797f615e477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PtrList&lt; volVectorField &gt; &amp;</type>
      <name>velocityMoments</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a378f092fd2b31a01fa44c19e211ca883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceScalarNode &gt; &amp;</type>
      <name>nodesOwn</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aed39d8c979af39431a75e73107a80e81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceVectorField &gt; &amp;</type>
      <name>velocitiesOwn</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a1ef4d41e6d03d5205a77b103a69731e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceScalarNode &gt; &amp;</type>
      <name>nodesNei</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a173823a263ae34208a1e9c256037d74a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; surfaceVectorField &gt; &amp;</type>
      <name>velocitiesNei</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3618a59bf5c498c7951168fa8a329c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolateNodes</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aee1fc78125838d352f1209c771319fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundaryVelocities</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa539aa2c2d5c6521a45ef8a8c7aff7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllQuadrature</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3cf9b5640abcb3467999886d9cdb0633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateVelocities</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae605ec130ded2b61f6b78d19af264a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllMoments</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abdcac0b11d8065805cb7abfc5dee64d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::Moraga</name>
    <filename>a00102.html</filename>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a1ac95a1f554c83fd0790e927c225ab71</anchor>
      <arglist>(&quot;Moraga&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Moraga</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a2d4a2239141964d0bcffe226c7f6f70e</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Moraga</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a5a9ba12b8cd36d1cca9fbcba962d9391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a7ca2eeaa963ec216ce5478271a682ea5</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::nDimensionalMappedList</name>
    <filename>a00103.html</filename>
    <templarg>mappedType</templarg>
    <member kind="function">
      <type></type>
      <name>nDimensionalMappedList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a131955ebdd927291692db4b6534da849</anchor>
      <arglist>(const label nComponents, const label nDimensions, const Map&lt; label &gt; &amp;momentMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nDimensionalMappedList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a6036148fd66713940c8049cb3efad570</anchor>
      <arglist>(const label nDimensions, const labelList &amp;nNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nDimensionalMappedList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a72f59a21ec484de55ee1f3bac2ae62b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac9b101d09895b9bf0a4239eac8e772cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adaa56a13250ec36e513548e0fcbe3a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a86cad8ff6fe48dac933db8ace0c61269</anchor>
      <arglist>(label a) const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abab993b1af0c85ab8c57d75cd59fd281</anchor>
      <arglist>(label a)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa23c0c7398e514afd22d616d9133dfd4</anchor>
      <arglist>(label a, label b) const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a230e1ad967205a98e6bdf4bf07a043c0</anchor>
      <arglist>(label a, label b)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adc8d2fccac65b84de8e8e0a96b945337</anchor>
      <arglist>(label a, label b, label c) const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8988854af4da7822b22eae73b2519af1</anchor>
      <arglist>(label a, label b, label c)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a21e244270c8583b2ad725b72edfc2835</anchor>
      <arglist>(label a, label b, label c, label d) const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af41c18c347a4c602f50abc62a6d61823</anchor>
      <arglist>(label a, label b, label c, label d)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a57898055f32a1c7b877756fb11e0974d</anchor>
      <arglist>(label a, label b, label c, label d, label e) const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a02f7508f58135156bc5b7e7271468303</anchor>
      <arglist>(label a, label b, label c, label d, label e)</arglist>
    </member>
    <member kind="function">
      <type>const mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae6991ede18f26c305e4f6f3fb39e8313</anchor>
      <arglist>(const labelList &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>mappedType &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad12a93e5eb729dd6e7dcffe71aff381a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>map</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac8b4f0dcfcdb09e14dfc67954290539a</anchor>
      <arglist>(label a, label b, label c, label d, label e) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac027d0efa8c54ed71e47cf31f5553ecf</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nDimensionalMappedList&lt; scalar &gt;</name>
    <filename>a00103.html</filename>
    <member kind="function">
      <type></type>
      <name>nDimensionalMappedList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a131955ebdd927291692db4b6534da849</anchor>
      <arglist>(const label nComponents, const label nDimensions, const Map&lt; label &gt; &amp;momentMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nDimensionalMappedList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a6036148fd66713940c8049cb3efad570</anchor>
      <arglist>(const label nDimensions, const labelList &amp;nNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nDimensionalMappedList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a72f59a21ec484de55ee1f3bac2ae62b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac9b101d09895b9bf0a4239eac8e772cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adaa56a13250ec36e513548e0fcbe3a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a86cad8ff6fe48dac933db8ace0c61269</anchor>
      <arglist>(label a) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abab993b1af0c85ab8c57d75cd59fd281</anchor>
      <arglist>(label a)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa23c0c7398e514afd22d616d9133dfd4</anchor>
      <arglist>(label a, label b) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a230e1ad967205a98e6bdf4bf07a043c0</anchor>
      <arglist>(label a, label b)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adc8d2fccac65b84de8e8e0a96b945337</anchor>
      <arglist>(label a, label b, label c) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8988854af4da7822b22eae73b2519af1</anchor>
      <arglist>(label a, label b, label c)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a21e244270c8583b2ad725b72edfc2835</anchor>
      <arglist>(label a, label b, label c, label d) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af41c18c347a4c602f50abc62a6d61823</anchor>
      <arglist>(label a, label b, label c, label d)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a57898055f32a1c7b877756fb11e0974d</anchor>
      <arglist>(label a, label b, label c, label d, label e) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a02f7508f58135156bc5b7e7271468303</anchor>
      <arglist>(label a, label b, label c, label d, label e)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae6991ede18f26c305e4f6f3fb39e8313</anchor>
      <arglist>(const labelList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2c09081b7a6560f3225489f478484b66</anchor>
      <arglist>(const labelList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; label &gt; &amp;</type>
      <name>map</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad12a93e5eb729dd6e7dcffe71aff381a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>map</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac8b4f0dcfcdb09e14dfc67954290539a</anchor>
      <arglist>(label a, label b, label c, label d, label e) const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static word</type>
      <name>listToWord</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aef26621d83f587d4dc6f21d1057ba82d</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static label</type>
      <name>listToLabel</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac027d0efa8c54ed71e47cf31f5553ecf</anchor>
      <arglist>(const labelList &amp;lst)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::noAdvection</name>
    <filename>a00104.html</filename>
    <base>Foam::univariateMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac9fd621576d492167ac6ee89eefe2dee</anchor>
      <arglist>(&quot;noAdvection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noAdvection</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a081d728e7bdf87d4ce98a810a35fe60b</anchor>
      <arglist>(const dictionary &amp;dict, const univariateQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noAdvection</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ab4e817c65492066d7b45f19fdfb5bad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::blendingMethods::noBlending</name>
    <filename>a00105.html</filename>
    <base>Foam::blendingMethod</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noBlending</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ad2cebb26c76a9e0f0cb30934734c74fe</anchor>
      <arglist>(const dictionary &amp;dict, const wordList &amp;phaseNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~noBlending</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a421f1757eb015d5f05913a0bca43c12c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f1</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ae56b0556a3fde6a2538ef45a21ad8597</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>f2</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>af623e0c066be77b88c66229c02b9bbf1</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::noBlending</name>
    <filename>a00106.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::bubblePressureModels::noBubblePressure</name>
    <filename>a00107.html</filename>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noBubblePressure</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac89d439c18aab1e2abcb79a88ba16081</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noBubblePressure</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a640a29db0c39a64a92ad14f3af628785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac25d7fa61e6c77f74f43e4c65d647a45</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0c9fa48cb1f9d839c1d14409a6cf8dba</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::diffusionModels::noDiffusion</name>
    <filename>a00108.html</filename>
    <base>Foam::mixingSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noDiffusion</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a790c8815b53962b66948569e5a37601e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noDiffusion</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ab00319b0bec238d68ee3f4ae6b34b7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2607d470834fac9d39bfc0d92f89d41a</anchor>
      <arglist>(const volScalarField &amp;moment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModels::noDiffusion</name>
    <filename>a00109.html</filename>
    <base>Foam::populationBalanceSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noDiffusion</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a790c8815b53962b66948569e5a37601e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noDiffusion</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab00319b0bec238d68ee3f4ae6b34b7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a2607d470834fac9d39bfc0d92f89d41a</anchor>
      <arglist>(const volScalarField &amp;moment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::noLift</name>
    <filename>a00110.html</filename>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noLift</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a884fb76efb1b19756cbccc90a6293b83</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noLift</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a9e1a2fad8ee34b13fa91bedd48ced9f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a7ca2eeaa963ec216ce5478271a682ea5</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a8e0215a73ed9f69baeea60de4cddff0d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a738f1f0dcfedfed552dc8a9aa6c89c5e</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingModels::noMixing</name>
    <filename>a00111.html</filename>
    <base>Foam::mixingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noMixing</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a6ecff56a57443f498ad578b8ed7b744d</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noMixing</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>af18366fcca2541617323cb6d4d640047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::none</name>
    <filename>a00112.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>none</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae425b4c0b7acf2895706fcaccb18c1b3</anchor>
      <arglist>(const dictionary &amp;dict, const label nNodes, const bool extended, const bool Radau)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~none</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7165e4fa0fd93a75d244cf514476c6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateQuadrature</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acc360d2f5d50c09bb0f88dcf0dc26d99</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::noneViscosity</name>
    <filename>a00113.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noneViscosity</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a3f5bb1602107fc75155a91e639a2e944</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noneViscosity</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2e3b3538f36529016e3a9f4d7917a8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a3127d9484a13bfb2bb2090956c1f8836</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::noneViscosity</name>
    <filename>a00114.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::nucleationModels::noNucleation</name>
    <filename>a00115.html</filename>
    <base>Foam::populationBalanceSubModels::nucleationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noNucleation</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ab3dbbe55baf67b8ce526009289270fc8</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noNucleation</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a0590b871d4b962ed8418e27e9f3357ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>nucleationSource</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a1a1beb8cf7e0221ebba90ce5aa341f59</anchor>
      <arglist>(const label &amp;momentOrder, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModels::noPopulationBalance</name>
    <filename>a00116.html</filename>
    <base>Foam::populationBalanceModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noPopulationBalance</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a81cc7bb7784505d09ef2dbf07b9d2a94</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noPopulationBalance</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a879eaa74c53e210bfb1a1356cb30e06a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::swarmCorrections::noSwarm</name>
    <filename>a00117.html</filename>
    <base>Foam::swarmCorrection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noSwarm</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a54d9670b423f7c20f5424b18009e8395</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noSwarm</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a0396b4cf8e52cbac1fb1d0d1ca28719e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>adbf840cf4465c072cc306ad4e0537242</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::noTurbulentDispersion</name>
    <filename>a00118.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noTurbulentDispersion</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9e0659020eec31bcac868d0916dbb91d</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noTurbulentDispersion</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a67740d98103cac75776d20ea5c8a3203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a8e0215a73ed9f69baeea60de4cddff0d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::noVirtualMass</name>
    <filename>a00119.html</filename>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noVirtualMass</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa743ff7b4e12c585c7854021dae7891a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noVirtualMass</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5adce566f79f4cd0ce0aa266a476a253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5eb86a943fb9eba9a9d253787e7ca82c</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>abfd8d3f3726ebad0d66f65237e29136b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>acf0bef05c6c97208195a12f283cd19d6</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::noWallDamping</name>
    <filename>a00120.html</filename>
    <base>Foam::wallDampingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noWallDamping</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a3d6f4dbadba1a1ecaeb9e9fa186dc446</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noWallDamping</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a62d44b140fc3c6f4e572bd299325cd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a76b9ed125dc2d92934609a2cf0b556dc</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a93f59882a72e880090985fbe9d287e94</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a7e67ab39339e42a87c9361223183bd32</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::noWallLubrication</name>
    <filename>a00121.html</filename>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a660172304dfa1b418cc1bded338b9fd9</anchor>
      <arglist>(&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noWallLubrication</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a6ee2c6ae19e1bbbc2fef77312f110141</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~noWallLubrication</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a6ba0829ceec7f226ad28fc4227a7c2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac25d7fa61e6c77f74f43e4c65d647a45</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a0c9fa48cb1f9d839c1d14409a6cf8dba</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::nucleationModel</name>
    <filename>a00122.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a90992f6d2fd6ea0a8188a87b2e019ad7</anchor>
      <arglist>(&quot;nucleationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a1ed401378d0f4f9f0ffb1e6b8a6b6186</anchor>
      <arglist>(autoPtr, nucleationModel, dictionary,(                                       const dictionary &amp;dict,                                       const fvMesh &amp;mesh                       ),(dict, mesh))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nucleationModel</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a0ac17d12d16b428f700ae92fe9416109</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~nucleationModel</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a5d14062dfa0b363acfe6bdefafd6c418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>nucleationSource</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a1ff5f4ad27805c7b4433e716fbc27c02</anchor>
      <arglist>(const label &amp;momentOrder, const label &amp;celli) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; nucleationModel &gt;</type>
      <name>New</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac2e910cf2638a653967c10d92c364d2a</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::oneQuarterMassRatio</name>
    <filename>a00123.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a7fb47156df4cac064c2b90cb0fc81675</anchor>
      <arglist>(&quot;oneQuarterMassRatio&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>oneQuarterMassRatio</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a962d460d76cd33e02cf608ca4beacb77</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~oneQuarterMassRatio</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a147fb07ac3fc0d40d665bba9391ef32d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>af11d63388088dc9b381b450559526d24</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::orderedPhasePair</name>
    <filename>a00124.html</filename>
    <base>Foam::phasePair</base>
    <member kind="function">
      <type></type>
      <name>orderedPhasePair</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a8b48710d2f1f7535a6039daeee2a33b2</anchor>
      <arglist>(const phaseModel &amp;dispersed, const phaseModel &amp;continuous, const dimensionedVector &amp;g, const scalarTable &amp;sigmaTable, const dictTable &amp;aspectRatioTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~orderedPhasePair</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ae734d7f4a80a0fa4d468cbcc7ecca8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>dispersed</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a2dc74522cb85f706f8b817ecc7547e83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>continuous</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9edbe51efb1a14a7b1d4cd674d0556a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aeb564046bb47fcc129a99f917b209d27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ae5ae1fac29215240158a63e1b85e3eb7</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModels::Panicker</name>
    <filename>a00125.html</filename>
    <base>Foam::turbulentDispersionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a3f09dca04e698ee9c83b41f1373ab4dd</anchor>
      <arglist>(&quot;Panicker&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Panicker</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aeed4d4e19757ba6ecce8aa0dbb1095ad</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Panicker</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7aca6f83baccaac25201bfdc4e1b8bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aaf1922308183e59d85b4ad6dfad616fd</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModel</name>
    <filename>a00126.html</filename>
    <member kind="function">
      <type></type>
      <name>PDFTransportModel</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7a484ccf0035787e3f0694401128817a</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PDFTransportModel</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa73779ffb5b8359a6463d7c93864fee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aacd6f92a174ec1ebe14983fc21ec498c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::pdPhaseModel</name>
    <filename>a00127.html</filename>
    <base>Foam::phaseModel</base>
    <member kind="function">
      <type></type>
      <name>pdPhaseModel</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ad467fb49dd378320ef051d9845ec987a</anchor>
      <arglist>(const twoPhaseSystem &amp;fluid, const dictionary &amp;phaseProperties, const word &amp;phaseName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~pdPhaseModel</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a2a2d08bd77a965511a2e2b688d4e46cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nNodes</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a4633605230a1db182bc866a94e66cc76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a826bd2342fde6c38821a3746fba7c98c</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ab4263b72d31ab6b16f672ebdac11d34e</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>ds</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a69d1f0a659f83d6d9908d63c9e117801</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a4955544d9a2bf4b40aadecc03d76717f</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a84e13a2ef3cff4ca530bc85559d4e1ef</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>Vs</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a37268a37c4c7d524e7366fd4860a903f</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>relativeTransport</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a98b8459f24c250f47616cdc5ce2f708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>averageTransport</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a05a00dd35d1744a056754b601c117136</anchor>
      <arglist>(const PtrList&lt; fvVectorMatrix &gt; &amp;AEqns)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PhaseCompressibleTurbulenceModel</name>
    <filename>a00128.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Foam::phaseModel</name>
    <filename>a00129.html</filename>
    <member kind="function">
      <type></type>
      <name>ClassName</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a17b426901c5e18365faeb5e668bbe75f</anchor>
      <arglist>(&quot;phaseModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ae3c7356c7d6301a2e6660b61dd76cab3</anchor>
      <arglist>(autoPtr, phaseModel, dictionary,(                                                       const twoPhaseSystem &amp;fluid,                                                       const dictionary &amp;dict,                                                       const word &amp;phaseName                                       ),(fluid, dict, phaseName))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phaseModel</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab251d077781c02756c40997105ae6ec5</anchor>
      <arglist>(const twoPhaseSystem &amp;fluid, const dictionary &amp;dict, const word &amp;phaseName)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; phaseModel &gt;</type>
      <name>clone</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a750779778a87424940ba9b5ddfd22c95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phaseModel</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>add1670642cf0f4f12bbe2ed571ed6926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a75b72488d2e82151b025744974919d5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BGviscosity</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a45d545f56b390c896503598a3ba42b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const twoPhaseSystem &amp;</type>
      <name>fluid</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad6ca9dde5a3f592b8b994b502adc6d4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>otherPhase</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0dc9f8dc7d393dba38ae636bf3686d10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>nNodes</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4633605230a1db182bc866a94e66cc76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>residualAlpha</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a200f987c61f5fe9c1b6d505deefd6fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a826bd2342fde6c38821a3746fba7c98c</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volScalarField &amp;</type>
      <name>alphas</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab4263b72d31ab6b16f672ebdac11d34e</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>d</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a1713e6f24722fddfa3838493eac724f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volScalarField &amp;</type>
      <name>ds</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a69d1f0a659f83d6d9908d63c9e117801</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>alphaMax</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a736066a90b6edeff6ebf38d57f49f14e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &amp;</type>
      <name>turbulence</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>afa28c6278324909b9707aeb580ba072b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &amp;</type>
      <name>turbulence</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a77ee4b87429ae81027f55c0dd846e853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a122a4985ee3c1862c1d229c3cba022ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>rhoThermo &amp;</type>
      <name>thermo</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a86ee829ee4c3ae48c2641b8938dabd4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9594b4c7eef2955bc2449e4d1a4fff27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5fec494e61b1551180a70c3196d2da84</anchor>
      <arglist>(const label patchi) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>mu</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a2c3c920f447a8999a7bcc1dbbf40f07b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>mu</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a47ee3be7d59aa843475344aed2a6fcda</anchor>
      <arglist>(const label patchi) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab47170f46fbbbcaa2ece1fb9e1f9c3e4</anchor>
      <arglist>(const label patchi) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a80aa74587c7f701d9069d66898f6fcb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappaEff</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a109745eff5659146b48bfc9d1aacb82c</anchor>
      <arglist>(const volScalarField &amp;alphat) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>kappaEff</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a7d544cc0f8b91fc995152e28d99aa7e9</anchor>
      <arglist>(const scalarField &amp;alphat, const label patchi) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alpha</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac3ff1caa1971892a24c13c4c52bc28d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alpha</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a845bd1d5821cc3bff875316da37c84b4</anchor>
      <arglist>(const label patchi) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>alphaEff</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa516d5f071612d6ccfcec0b1a74964c4</anchor>
      <arglist>(const volScalarField &amp;alphat) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; scalarField &gt;</type>
      <name>alphaEff</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a603af410e0d67e4f12a27de0d8b634f2</anchor>
      <arglist>(const scalarField &amp;alphat, const label patchi) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Cp</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4ef006c3423545a301ae780c4647603c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>rho</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a6cc58ca827e928ad616c8c8b46082e7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0b0f7927917d51eb0331cdda095aa21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>volVectorField &amp;</type>
      <name>U</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9152a436c08509f3f18e0298a7239d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4955544d9a2bf4b40aadecc03d76717f</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual volVectorField &amp;</type>
      <name>Us</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a84e13a2ef3cff4ca530bc85559d4e1ef</anchor>
      <arglist>(const label nodei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const volVectorField &amp;</type>
      <name>Vs</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a37268a37c4c7d524e7366fd4860a903f</anchor>
      <arglist>(const label nodei) const </arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ae7a78ce066b04bb1d93e8a1d9335900d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a66289cf9ede32ce672bb3c21f02ded40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>alphaPhi</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad38205f722710c048191c5bc87609f9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>alphaPhi</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad4fa7eb1a78a64edddbfdefe090ffac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>alphaRhoPhi</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a11e78116eb05c7c1a3aabc6c68f00680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>alphaRhoPhi</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac84568157c5a273492634b3211bf990d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correctInflowOutflow</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a6718217a48b5a1e81b5c167b128de999</anchor>
      <arglist>(surfaceScalarField &amp;alphaPhi) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>relativeTransport</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a98b8459f24c250f47616cdc5ce2f708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>averageTransport</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a05a00dd35d1744a056754b601c117136</anchor>
      <arglist>(const PtrList&lt; fvVectorMatrix &gt; &amp;AEqns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a1a74613347b54feed9fb14f3b2fe2108</anchor>
      <arglist>(const dictionary &amp;phaseProperties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; phaseModel &gt;</type>
      <name>New</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa7a2a90e594c47c3dee9c675e62667a7</anchor>
      <arglist>(const twoPhaseSystem &amp;fluid, const dictionary &amp;dict, const word &amp;phaseName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const twoPhaseSystem &amp;</type>
      <name>fluid_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9a52eaf98a079f7b3b2e33ba12d2961d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>phaseDict_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a2550b891719ee4e38bd9a30f9f31dc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dimensionedScalar</type>
      <name>residualAlpha_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9e788d53e0135b25ac6f5f81da5ed251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>alphaMax_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a95bfda06070cd51f98da6bbd3d452243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; rhoThermo &gt;</type>
      <name>thermo_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad173fb21276c83d27a4c569fb5790674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volVectorField</type>
      <name>U_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a188c58d01aed5b71cf5711278581adeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>alphaPhi_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aaa2a802e735d9dedd24961db740458b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>alphaRhoPhi_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a83a48ecb73896b66725a1ecdbd5c2b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; surfaceScalarField &gt;</type>
      <name>phiPtr_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a497673767745b44b26977e35496c55df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volScalarField</type>
      <name>d_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa844997362d9152966806ee2fe5fa115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &gt;</type>
      <name>turbulence_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8125d20d26a49f0db207d17223fbce3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>BGviscosity_</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a94b0a37b5250844caacf14b29255ca24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePair</name>
    <filename>a00130.html</filename>
    <base>Foam::phasePairKey</base>
    <member kind="typedef">
      <type>HashTable&lt; dictionary, phasePairKey, phasePairKey::hash &gt;</type>
      <name>dictTable</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>af363db3b15b36bf4fa7997d250543a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashTable&lt; scalar, phasePairKey, phasePairKey::hash &gt;</type>
      <name>scalarTable</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>acaeea9792724877a3bebe88ab0dff000</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePair</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a9986809af336722c0b627c876f8547da</anchor>
      <arglist>(const phaseModel &amp;phase1, const phaseModel &amp;phase2, const dimensionedVector &amp;g, const scalarTable &amp;sigmaTable, const bool ordered=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePair</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>acdbac428a23fdde9735401736b9e6c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>dispersed</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a2dc74522cb85f706f8b817ecc7547e83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const phaseModel &amp;</type>
      <name>continuous</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a9edbe51efb1a14a7b1d4cd674d0556a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aeb564046bb47fcc129a99f917b209d27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>rho</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a94d56cf5402312283e2182a3766592b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>magUr</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a88ffc39c4f5b836e3118979f7fe60aaa</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Ur</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a30fb773d58342713c0a50bfe0024c0ce</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Re</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a7546ea7643e13eddafeffb8bc63c4d36</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Eo</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a5f5506ccc5a1b71e4cd9833a745f0fe9</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH1</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a75319d82f41f5a2261339e4853aea583</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>EoH2</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a300befc1d5caeeb18ac33ff3f80b57df</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Mo</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aa701dd36f601f85511037423a32dc094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Ta</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a85615f859b22475580de3a72dee2f74e</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ae5ae1fac29215240158a63e1b85e3eb7</anchor>
      <arglist>(const label nodei, const label nodej) const </arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aafa87466cebd9ebda4a09ea338673568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ace6dda1224b634f41045415a3ba6089d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const dimensionedVector &amp;</type>
      <name>g</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a8e94a789b5d800dad492d7651102b8f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>sigma</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aaf67042a73fad846fa13228b6bce3c25</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePairKey</name>
    <filename>a00131.html</filename>
    <class kind="class">Foam::phasePairKey::hash</class>
    <member kind="function">
      <type></type>
      <name>phasePairKey</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aa4c7c18a40e8171472410ad7e3ceb300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePairKey</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad162a5b2f36f4065759e039e01bbef66</anchor>
      <arglist>(const word &amp;name1, const word &amp;name2, const bool ordered)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePairKey</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>acc4b4f5a6566aa68a9da2e6016c47a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a91accb4412907f2d3ebcca8af596b563</anchor>
      <arglist>(const phasePairKey &amp;a, const phasePairKey &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aa76007e41e3c94407d13b750c4ce63c9</anchor>
      <arglist>(const phasePairKey &amp;a, const phasePairKey &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a7035ddf073ebfc93c76e99dba34993fd</anchor>
      <arglist>(Istream &amp;is, phasePairKey &amp;key)</arglist>
    </member>
    <member kind="friend">
      <type>friend Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a0bab83c012495f70dbf01f96caf556e1</anchor>
      <arglist>(Ostream &amp;os, const phasePairKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::RASModels::phasePressureModel</name>
    <filename>a00132.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a0e32a1b5d46ed2b9e7c1538746636e0b</anchor>
      <arglist>(&quot;phasePressure&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>phasePressureModel</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a78a833320687c7d513c172a6e3ed36a5</anchor>
      <arglist>(const volScalarField &amp;alpha, const volScalarField &amp;rho, const volVectorField &amp;U, const surfaceScalarField &amp;alphaRhoPhi, const surfaceScalarField &amp;phi, const phaseModel &amp;transport, const word &amp;propertiesName=turbulenceModel::propertiesName, const word &amp;type=typeName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~phasePressureModel</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a79c87b1e4c46a1c4d479547ca933845e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>adb2a0dc1968d4936ca11eecd9b48561b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>nuEff</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a1c218c9cd21e463a17acc70735754f93</anchor>
      <arglist>(const label patchi) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>k</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ad6ae25c513d7aaeac11c1d5e870242a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>epsilon</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>af8fde26ebf6e4d7cbbdb9000bd2c57d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>R</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aaaa5c7b78f0758b17d04c0a3a3fdf70a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>pPrime</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a68afe51ee9f546484a16ea640f911cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>pPrimef</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a2848240fb0bb5f3676e01670c0963b19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volSymmTensorField &gt;</type>
      <name>devRhoReff</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ab315d3ba70af0980e59a5a56b4220381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a429edceb6d6662db6cc24b14bbba01ed</anchor>
      <arglist>(volVectorField &amp;U) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correct</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa40b482ba81fd8de31bdba348c184074</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::phasePressureModel</name>
    <filename>a00133.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModel</name>
    <filename>a00134.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a9723503cf97d2ad82b67092a7aa3e1f3</anchor>
      <arglist>(&quot;populationBalanceModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a7f8cc56b3b077604a6644432cf501cda</anchor>
      <arglist>(autoPtr, populationBalanceModel, dictionary,(                                       const word &amp;name,                                       const dictionary &amp;dict,                                       const surfaceScalarField &amp;phi                       ),(name, dict, phi))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>populationBalanceModel</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a31d0f5b4494ff076cb81eed74ba4bce2</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~populationBalanceModel</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ae05106936db1115c15304ded19972e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>acf73b8eb8622b96b9a7af30fcfe4544a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>aacd6f92a174ec1ebe14983fc21ec498c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; populationBalanceModel &gt;</type>
      <name>New</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a9209244e0920b05f98597bf3d105149d</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const surfaceScalarField &amp;</type>
      <name>phi_</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a5828da03a859a3aaa358802cd2daf505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::breakupKernels::powerLawBreakup</name>
    <filename>a00135.html</filename>
    <base>Foam::populationBalanceSubModels::breakupKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ab1fbb32a962ed7ca607b766ec813333b</anchor>
      <arglist>(&quot;powerLaw&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>powerLawBreakup</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a11045d68f7b22d71a19150334861de52</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~powerLawBreakup</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>acfdcf8ac936fab910b034c20837198f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Kb</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a1e8a125530058d3c06bc7ca11c10c1e2</anchor>
      <arglist>(const scalar &amp;abscissa, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::quadratureApproximation</name>
    <filename>a00136.html</filename>
    <templarg>momentFieldSetType</templarg>
    <templarg>nodeType</templarg>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a36e6d3192d1872bbc6b0cffd5872d86f</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support, const label nDimensions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureApproximation</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>adb1b16ba7fd2128342b886ba9fce7537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>name</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2456166dce07bb1aa57f90fba72ba551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fieldMomentInversion &amp;</type>
      <name>momentFieldInverter</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab35707f48144b6e8c377d530fda6958e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; nodeType &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a91c350105601a2749fccc0b46064c670</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>abec4ab79350278c1e96c53a7a3211cb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>momentFieldSetType &amp;</type>
      <name>moments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a7ea917ef655d7358597ba9ef187a6333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a111ae2fd86df6aa54d903019cd7032f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateQuadrature</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ac4aec727fcdd873ea78763aaeeb86e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a57361ed63aa05333406727264ae648b6</anchor>
      <arglist>(label celli)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateLocalQuadrature</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a177dde920f33639945218c2c55bc83f8</anchor>
      <arglist>(label celli, bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const word</type>
      <name>propertiesName</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a1bd8bb0fb60b71d271b25c14b5d66b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; PtrList&lt; nodeType &gt; &gt;</type>
      <name>nodes_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a5395f06d5da26eb23ac52a1a75327df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>momentFieldSetType</type>
      <name>moments_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a258d174491c53d664745568f9dca5924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDimensions_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a22a7e22a470f736e5a4561cd9d2fa5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ad99a5dcc1a9e45d5267031edef42012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>momentFieldInverter_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2884c8660ba88930f5bcf3f3c1293634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>quadratureApproximation&lt; volUnivariateMomentFieldSet, volScalarNode &gt;</name>
    <filename>a00136.html</filename>
    <member kind="function">
      <type></type>
      <name>quadratureApproximation</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a36e6d3192d1872bbc6b0cffd5872d86f</anchor>
      <arglist>(const word &amp;name, const fvMesh &amp;mesh, const word &amp;support, const label nDimensions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureApproximation</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>adb1b16ba7fd2128342b886ba9fce7537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>name</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2456166dce07bb1aa57f90fba72ba551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fieldMomentInversion &amp;</type>
      <name>momentFieldInverter</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab35707f48144b6e8c377d530fda6958e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volScalarNode &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a91c350105601a2749fccc0b46064c670</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const volUnivariateMomentFieldSet &amp;</type>
      <name>moments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>abec4ab79350278c1e96c53a7a3211cb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>volUnivariateMomentFieldSet &amp;</type>
      <name>moments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a7ea917ef655d7358597ba9ef187a6333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nDimensions</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ae4410b8afdbd8d2d0aef13f1944201a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nMoments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a111ae2fd86df6aa54d903019cd7032f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateQuadrature</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ac4aec727fcdd873ea78763aaeeb86e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMoments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab46f111920d16a088f2fddf21d658315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLocalMoments</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a57361ed63aa05333406727264ae648b6</anchor>
      <arglist>(label celli)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateLocalQuadrature</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a177dde920f33639945218c2c55bc83f8</anchor>
      <arglist>(label celli, bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const word</type>
      <name>propertiesName</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a1bd8bb0fb60b71d271b25c14b5d66b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fvMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a23edeeeecebcef11921a33dd5d990570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; PtrList&lt; volScalarNode &gt; &gt;</type>
      <name>nodes_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a5395f06d5da26eb23ac52a1a75327df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volUnivariateMomentFieldSet</type>
      <name>moments_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a258d174491c53d664745568f9dca5924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nDimensions_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a22a7e22a470f736e5a4561cd9d2fa5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nSecondaryNodes_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ad99a5dcc1a9e45d5267031edef42012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; fieldMomentInversion &gt;</type>
      <name>momentFieldInverter_</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2884c8660ba88930f5bcf3f3c1293634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::quadratureNode</name>
    <filename>a00137.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Foam::quadratureNode::iNew</class>
    <member kind="function">
      <type></type>
      <name>quadratureNode</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ab4a87e985dbde8b2a7052ca8e443dd00</anchor>
      <arglist>(const word &amp;name, const word &amp;distributionName, const dictionary &amp;nodeDict, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const dimensionSet &amp;abscissaDimensions, const wordList &amp;boundaryTypes, const bool extended=false, const label nSecondaryNodes=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quadratureNode</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a5683c102dc4bc1dfdb49072dcf9556d3</anchor>
      <arglist>(const word &amp;name, const word &amp;distributionName, const fvMesh &amp;mesh, const dimensionSet &amp;weightDimensions, const dimensionSet &amp;abscissaDimensions, const bool extended=false, const label nSecondaryNodes=0)</arglist>
    </member>
    <member kind="function">
      <type>autoPtr&lt; quadratureNode&lt; weightType, abscissaType, sigmaType &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a44d59e562ac996bdebdb242602452a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~quadratureNode</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad65970595fbbbcb000b0192eb41d7416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a6d60057c26042eaf7fa1b3b6fb07b582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extended</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a169e93115091615d69838e87c7f96a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nSecondaryNodes</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a6d3652c06c7d71d67f199d2104465f3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const weightType &amp;</type>
      <name>primaryWeight</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aa0a25e3fbd8098cb359e8e92cafba070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>weightType &amp;</type>
      <name>primaryWeight</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a156872933508c1374a01a7abe6ec039c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const abscissaType &amp;</type>
      <name>primaryAbscissa</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a436581ffd72d3ac178b6d3381f0928ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>abscissaType &amp;</type>
      <name>primaryAbscissa</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a501aa6ae793c60ca18e873cb53c67be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; weightType &gt; &amp;</type>
      <name>secondaryWeights</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a225ac587d44fce3f6a523a89784379af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PtrList&lt; weightType &gt; &amp;</type>
      <name>secondaryWeights</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aaa0787d957d3b8ce80ecb60ccf5482d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; abscissaType &gt; &amp;</type>
      <name>secondaryAbscissae</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>acf323f4680d96d62aca77b85fab8d25c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PtrList&lt; abscissaType &gt; &amp;</type>
      <name>secondaryAbscissae</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aaff8cd6e5fbfd9b1c86db4f836f9dc2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sigmaType &amp;</type>
      <name>sigma</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ae7ed63986006f100bfc1515291f070cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sigmaType &amp;</type>
      <name>sigma</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a211880a026af3ce558c45adc81be4c3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModel</name>
    <filename>a00138.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ad0f962111ba408a72779b839f52d828c</anchor>
      <arglist>(&quot;radialModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>acb2cc3bc91228ee874cf7c63b5e4ddcc</anchor>
      <arglist>(autoPtr, radialModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>radialModel</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a1d0163d3e88e09dc7e977297d38d3bfe</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~radialModel</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>aa0b85a713931d79edd072b50f885bddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac405369dbb61b9f978f777a71cd60806</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac6339025a6884772dff69e790ff91a67</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; radialModel &gt;</type>
      <name>New</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a95acce8586d3a570928fd57558cdf91d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::frictionalStressModels::Schaeffer</name>
    <filename>a00139.html</filename>
    <base>Foam::kineticTheoryModels::frictionalStressModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a14d5c45df4dca1c0266e55ebfb4da5d0</anchor>
      <arglist>(&quot;Schaeffer&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Schaeffer</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a77fabfee38cfbdfada387add9e9e2fb4</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Schaeffer</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>acd9186bf2c0b9430d0e8b52d15b45800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressure</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a2fc1dda5901ee9cb4c70a6ba2301884b</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>frictionalPressurePrime</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>adfefae1dab0fb12943207676bf26dce8</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ae429d57404660fbf93f53dbcd90c9e49</anchor>
      <arglist>(const phaseModel &amp;phase, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax, const volScalarField &amp;pf, const volSymmTensorField &amp;D) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::SchillerNaumann</name>
    <filename>a00140.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a6d8702ad36d859b75df8183270d63db0</anchor>
      <arglist>(&quot;SchillerNaumann&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SchillerNaumann</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>af25399d64dd267dfcbc6ea3ef58441a5</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SchillerNaumann</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a1ccb08c86b91c69b15f2641129841b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::segregated</name>
    <filename>a00141.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ab67b25112f6f86d04398a77176768bbc</anchor>
      <arglist>(&quot;segregated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segregated</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a3329fe0453f80577d3c3b6c1a4418833</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~segregated</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a375da7264b6238091673de917bb42084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>aeea45f46f7f282a9ef8f5091a2152635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>acf0bef05c6c97208195a12f283cd19d6</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a173fb5ba73726414ccf92217686cef54</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::SinclairJackson</name>
    <filename>a00142.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::radialModels::SinclairJackson</name>
    <filename>a00143.html</filename>
    <base>Foam::kineticTheoryModels::radialModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae4f5e0722f1373329b3e5d6ecd305901</anchor>
      <arglist>(&quot;SinclairJackson&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinclairJackson</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5305a7ba15e1d04d5bbb14529b1650e3</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SinclairJackson</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad223aad70fde71fd367770b4699981c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77181c36b117cab1999c37a2c4ae392f</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>g0prime</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a76068a5c111e6a71f9d5011c78d97346</anchor>
      <arglist>(const volScalarField &amp;alpha, const dimensionedScalar &amp;alphaMinFriction, const dimensionedScalar &amp;alphaMax) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModels::sine</name>
    <filename>a00144.html</filename>
    <base>Foam::wallDampingModels::interpolated</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a33c7be900b7642a50de9fe3539ee19d7</anchor>
      <arglist>(&quot;sine&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sine</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afbbd095848d37a8fd1b8aa033667dfb4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sine</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa1c45d97c843bcc584b269b6a527e6fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>limiter</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad826c52960e65cba81f05f76e5ba771c</anchor>
      <arglist>(const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::sumAggregation</name>
    <filename>a00145.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4175abdc1459fcf6820150c4e2ecf4da</anchor>
      <arglist>(&quot;sum&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sumAggregation</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a2c16e4ffc6504984bf080838406a8de2</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sumAggregation</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a8e3dea727d5bdc9cd286c349f6dfefff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aff545f8602677e85abbb1b6c6d0fb20f</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::swarmCorrection</name>
    <filename>a00146.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a5316e9d61d8dea54c06abeed52cfbf66</anchor>
      <arglist>(&quot;swarmCorrection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa7045137bc7d8974476c63fa4889cb6f</anchor>
      <arglist>(autoPtr, swarmCorrection, dictionary,(                                       const dictionary &amp;dict,                                       const phasePair &amp;pair                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>swarmCorrection</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ab349f8b1c2d9ee7a45fece303bb5befc</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~swarmCorrection</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a4902330ff6741d8c343fd09897f77f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae9e4c4d794bca14aa2422cd7002ea436</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; swarmCorrection &gt;</type>
      <name>New</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aed46a8706b7f96382c52e67d774e2d3a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::conductivityModels::Syamlal</name>
    <filename>a00147.html</filename>
    <base>Foam::kineticTheoryModels::conductivityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aa4db53508077b9b23041dfc224e8e6ed</anchor>
      <arglist>(&quot;Syamlal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Syamlal</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a993b24ab3eee501c8b5b6d11736607d0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Syamlal</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a9ad88e77569a2b24c88ab07e1c000110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>kappa</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab818d64d88b66659e3d22de5b2d1e1ed</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModels::Syamlal</name>
    <filename>a00148.html</filename>
    <base>Foam::kineticTheoryModels::viscosityModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa4db53508077b9b23041dfc224e8e6ed</anchor>
      <arglist>(&quot;Syamlal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Syamlal</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a993b24ab3eee501c8b5b6d11736607d0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Syamlal</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a9ad88e77569a2b24c88ab07e1c000110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a3127d9484a13bfb2bb2090956c1f8836</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::SyamlalOBrien</name>
    <filename>a00149.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a6143f372a0045f3662e4906562b28893</anchor>
      <arglist>(&quot;SyamlalOBrien&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SyamlalOBrien</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a6fb12f758bcf97293d3d90b2b70a2c6f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SyamlalOBrien</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a41de66437495b16d31a6ed834dc60bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::SyamlalRogersOBrien</name>
    <filename>a00150.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::granularPressureModels::SyamlalRogersOBrien</name>
    <filename>a00151.html</filename>
    <base>Foam::kineticTheoryModels::granularPressureModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aa1910326595e8c75013d9aa5cde3d6bc</anchor>
      <arglist>(&quot;SyamlalRogersOBrien&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SyamlalRogersOBrien</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aa78bf2c4309412069f5f7686411e5f73</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SyamlalRogersOBrien</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad7f0e0d76c579fdcc5186a1be41856ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeff</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ab385b192bdf96fe50901cf94cadcccb2</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>granularPressureCoeffPrime</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a7477040e4bebb305b8dba787382d97e0</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;g0, const volScalarField &amp;g0prime, const volScalarField &amp;rho1, const dimensionedScalar &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::symmetricFragmentation</name>
    <filename>a00152.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a999a81c4ca2504ee0ffe0b088c09ba85</anchor>
      <arglist>(&quot;symmetricFragmentation&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>symmetricFragmentation</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a06ddb9d84a56a2e718822ea145ca1c01</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~symmetricFragmentation</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a8d44e31c17c944f6a03e3abea48bbea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>af11d63388088dc9b381b450559526d24</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ThermalDiffusivity</name>
    <filename>a00153.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::TomiyamaAnalytic</name>
    <filename>a00154.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ad22d12f6cbcf2b826114aecc726e321f</anchor>
      <arglist>(&quot;TomiyamaAnalytic&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaAnalytic</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a86efed6beca852c2f847d4ca967ae71b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaAnalytic</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a19e6ceca2290c5dc8f87f49aad8d94e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::TomiyamaAspectRatio</name>
    <filename>a00155.html</filename>
    <base>Foam::aspectRatioModels::VakhrushevEfremov</base>
    <base>Foam::wallDependentModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaAspectRatio</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aac83abd8bd5e67cc8298fb1f59cf9393</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaAspectRatio</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a068a2605aaf36840d7fcfb91df884a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a972dcd8e78e1967782a127bf17bd2eb4</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::TomiyamaCorrelated</name>
    <filename>a00156.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a9f104e7935b9334def5f303b3813bad0</anchor>
      <arglist>(&quot;TomiyamaCorrelated&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaCorrelated</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a7ab60d734c797ebbbf3ad94391886ab4</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaCorrelated</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ace4693a4fae082b4f2f73b625c34c0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::TomiyamaLift</name>
    <filename>a00157.html</filename>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaLift</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ab966bdc1a7a41b18e3a292633d3ab798</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaLift</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a9957d3c2df680e78d31c58ed92097ff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a7ca2eeaa963ec216ce5478271a682ea5</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::TomiyamaSwarm</name>
    <filename>a00158.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::swarmCorrections::TomiyamaSwarm</name>
    <filename>a00159.html</filename>
    <base>Foam::swarmCorrection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaSwarm</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a33d86d874765f719d97ef6d616a064e2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaSwarm</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aed7c376de04de96e0c0c524828c98510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cs</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9700b3a6b79e924846d971643534435d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModels::TomiyamaWallLubrication</name>
    <filename>a00160.html</filename>
    <base>Foam::wallLubricationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a9b0552dbbef6ad599c064bdab02e5c5d</anchor>
      <arglist>(&quot;Tomiyama&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TomiyamaWallLubrication</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a4d31410b60b2379055eb33353a2301a9</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TomiyamaWallLubrication</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a579e0206457abf427a21a574b27336b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ac25d7fa61e6c77f74f43e4c65d647a45</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::aggregationKernels::turbulentBrownian</name>
    <filename>a00161.html</filename>
    <base>Foam::populationBalanceSubModels::aggregationKernel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ad85b05c960956edb395072e9c0879d23</anchor>
      <arglist>(&quot;turbulentBrownian&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentBrownian</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a69313e09fe86ca111b470eff033b395d</anchor>
      <arglist>(const dictionary &amp;dict, const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentBrownian</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a870db0e339e84ac084658eea637e60a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>Ka</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>aff545f8602677e85abbb1b6c6d0fb20f</anchor>
      <arglist>(const scalar &amp;abscissa1, const scalar &amp;abscissa2, const label &amp;celli) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::diffusionModels::turbulentDiffusion</name>
    <filename>a00162.html</filename>
    <base>Foam::populationBalanceSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a7ed8525205e60ab2350365229650b6c9</anchor>
      <arglist>(&quot;turbulentDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDiffusion</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a53a87c43578f29144d9faa8a85d38ae0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDiffusion</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a4c6867b84e9f2bae67c952fe4e59c0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a2607d470834fac9d39bfc0d92f89d41a</anchor>
      <arglist>(const volScalarField &amp;moment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::mixingSubModels::diffusionModels::turbulentDiffusion</name>
    <filename>a00163.html</filename>
    <base>Foam::mixingSubModels::diffusionModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a7ed8525205e60ab2350365229650b6c9</anchor>
      <arglist>(&quot;turbulentDiffusion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDiffusion</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a53a87c43578f29144d9faa8a85d38ae0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDiffusion</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a4c6867b84e9f2bae67c952fe4e59c0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiff</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a2607d470834fac9d39bfc0d92f89d41a</anchor>
      <arglist>(const volScalarField &amp;moment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::turbulentDispersionModel</name>
    <filename>a00164.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>aadc70cb8b5ed675d2d5dc4efcceffebe</anchor>
      <arglist>(&quot;turbulentDispersionModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ab5b4441c18a2318e007357137418f0df</anchor>
      <arglist>(autoPtr, turbulentDispersionModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair                                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentDispersionModel</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae6e083687046f0e4da9d24e47f11c32f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentDispersionModel</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>afb757b566135de9298b6328d52e15200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ad3cdf0c36a145f46ea778c726ad5b30f</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a8e0215a73ed9f69baeea60de4cddff0d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; turbulentDispersionModel &gt;</type>
      <name>New</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae28e9615b1f0e9e1f4a28697bd05c742</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimD</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a142839aaae3fb9d4c98afac9a0912fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a6307eb221338d4af3a7880e0540b6ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::mixingModels::turbulentMixing</name>
    <filename>a00165.html</filename>
    <base>Foam::PDFTransportModels::univariatePDFTransportModel</base>
    <base>Foam::mixingModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a07e393e8d7cbf999eaad113a4fc42314</anchor>
      <arglist>(&quot;turbulentMixing&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>turbulentMixing</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>aa538c7e23461fc715edb1f17abbb4910</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~turbulentMixing</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>af371dd36dabac7b470898a187554a939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::twoPhaseSystem</name>
    <filename>a00166.html</filename>
    <member kind="function">
      <type></type>
      <name>twoPhaseSystem</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a38db7d4d3cda2cfe382cc379b1f6b370</anchor>
      <arglist>(const fvMesh &amp;, const dimensionedVector &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~twoPhaseSystem</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a299eb4cf30ad9b42eb5bdd8e7e1e1e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>rho</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a94d56cf5402312283e2182a3766592b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>U</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab80ab0ac522b14ad87b25ebfb86bd0bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Kd</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa0fa8beb41983aa37e4e2a2c33f1eb77</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Kd</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>adcf717d06000ab763119e6b0457dd1bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kdf</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab9e139641c6ef9efb7314431458e75ab</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Kdf</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1a2afa7246da74096f96d7680e926b23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Vm</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a93afb2680285d685105e4edd229f3505</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>Vm</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac516c0db42b8af6212002e052f361bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Vmf</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a8ab92a7d875655abe3d7b1287b288f55</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Vmf</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae6451365674b77555bf191a02e2a3e2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae019770dec2616b45ac04705eeeb7fc0</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a994670250a2ccd1ac0c73bb9a02a404e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae149cefcacc87d6bf5401c23eea7f65f</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab7690853988ed2296d58bfbf5e5c9e9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; volScalarField &gt;</type>
      <name>D</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a407e1102f9a2a9306b93af737da99862</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff1</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a8d1fc873e6391857383050bf9d60c8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; fvVectorMatrix &gt;</type>
      <name>divDevRhoReff2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a5f1a3797019f72b2a3c720e83df6b91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>averageTransport</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a132d9471a477e405edccc8072f747673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransport</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7ad2b66dfc25f442a9df3f8bccd4e681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correct</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3ae44b28050c3aa494c1d8e18cf618c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correctTurbulence</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a894a3fecb5f9a994d803680e6ee51075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>af816873151ddb0126e98bb2f914d8ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const dragModel &amp;</type>
      <name>drag</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa735ba2c73cbe8644fea9091cf54518e</anchor>
      <arglist>(const phaseModel &amp;phase) const </arglist>
    </member>
    <member kind="function">
      <type>const virtualMassModel &amp;</type>
      <name>virtualMass</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6375042d7a49d0e06aae79f59d39ca92</anchor>
      <arglist>(const phaseModel &amp;phase) const </arglist>
    </member>
    <member kind="function">
      <type>const dimensionedScalar &amp;</type>
      <name>sigma</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aad928f838c64269ac9c89e92c2eb7d9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fvMesh &amp;</type>
      <name>mesh</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a628df3d8f239d8393610d6310eb56ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aafa87466cebd9ebda4a09ea338673568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>phaseModel &amp;</type>
      <name>phase1</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aae2393c9a021227c42f0e5b557fd5539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ace6dda1224b634f41045415a3ba6089d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>phaseModel &amp;</type>
      <name>phase2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a28e5bc97bd0ce70b75636a70bd141c06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const phaseModel &amp;</type>
      <name>otherPhase</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7a66222af4865209cd410d77cd196fe6</anchor>
      <arglist>(const phaseModel &amp;phase) const </arglist>
    </member>
    <member kind="function">
      <type>const surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a445e7dcdb6ef86dc28308939486c49a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>surfaceScalarField &amp;</type>
      <name>phi</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7ccfa750ea7a0623efe7790b5cfc955d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>dgdt</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a0289a01379f7ea2a41c119071d375bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>volScalarField &amp;</type>
      <name>dgdt</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>acd8c71f42e894434170427a613ea4a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tmp&lt; surfaceScalarField &gt; &amp;</type>
      <name>pPrimeByA</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7890c3eaebf550c6caf7706678ca2199</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceSubModels::daughterDistributions::uniform</name>
    <filename>a00167.html</filename>
    <base>Foam::populationBalanceSubModels::daughterDistribution</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac6db16878b991f0c033aa693d16e804d</anchor>
      <arglist>(&quot;uniform&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uniform</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac561847e384f201ac93f7f11fd889721</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~uniform</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>acc576355220747307ccd5b343af2e7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>mD</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af11d63388088dc9b381b450559526d24</anchor>
      <arglist>(const label &amp;order, const scalar &amp;abscissa) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateMomentAdvection</name>
    <filename>a00168.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a922fedbd9a4fa76566799abd43f071ca</anchor>
      <arglist>(&quot;univariateMomentAdvection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ada5d67bdf45974d411f9977245927f51</anchor>
      <arglist>(autoPtr, univariateMomentAdvection, dictionary,(                                                       const dictionary &amp;dict,                                                       const univariateQuadratureApproximation &amp;quadrature,                                                       const surfaceScalarField &amp;phi,                                                       const word &amp;support                                       ),(dict, quadrature, phi, support))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentAdvection</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae80830da2be5412957390f8d74916bc5</anchor>
      <arglist>(const dictionary &amp;dict, const univariateQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariateMomentAdvection</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af7558438bb9fa34ba37ed51735b3a2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtrList&lt; volScalarField &gt; &amp;</type>
      <name>divMoments</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1e42ed478eefece586b6bfb013468be1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>acf73b8eb8622b96b9a7af30fcfe4544a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a99b02345a8a15d3c5ea2844a2253f510</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; univariateMomentAdvection &gt;</type>
      <name>New</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a2e88d94d84f3060a397779ff83b3e3d2</anchor>
      <arglist>(const dictionary &amp;dict, const univariateQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const volUnivariateMomentFieldSet &amp;</type>
      <name>moments_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4389bf303f1fbbc7c380c84c3c323568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>nMoments_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1e897a153fd991bd6a4b54dbe380d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtrList&lt; volScalarField &gt;</type>
      <name>divMoments_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a2077495efed6bdb534dda0e84dd2cbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>own_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac6ebab407edaa9fb1bf07c163e389b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>surfaceScalarField</type>
      <name>nei_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af8b04d4daaf16b8ad52708b54b311c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const surfaceScalarField</type>
      <name>phi_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6c8dd33081ef34705076d00797291810</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>support_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a97745e65ea5305313a9cc8919a99b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nDimensions_</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a63b7139626299621e608e4a07a0def92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateMomentInversion</name>
    <filename>a00169.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ab4091ef353bbb2f6fc1c9b8bf3bb06ca</anchor>
      <arglist>(&quot;univariateMomentInversion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ac3fb26c63be494fef81fc98b96df07bb</anchor>
      <arglist>(autoPtr, univariateMomentInversion, dictionary,(                                                       const dictionary &amp;dict                                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentInversion</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a2f27635231d56cc368aaa0f2cbdbf8e6</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariateMomentInversion</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a3d81ad6e9bef5d0e56c866331fea31a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcNQuadratureNodes</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a5b1a824ce74e64ee48d854d74ac8a305</anchor>
      <arglist>(univariateMomentSet &amp;moments)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>correctRecurrence</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>abc58435d4d523225c2de1f627315e1e5</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarList &amp;alpha, scalarList &amp;beta, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>af2d72953108395e48c42760a2f79fa5b</anchor>
      <arglist>(univariateMomentSet &amp;moments, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>abscissae</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a25742f47f6927a75ac22cde118b03bde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nNodes</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ab9e8c6ca4d7acb4aeb67a55cbc012286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>weights</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a4405ee79c70e650e18641bbf7c8dd743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; univariateMomentInversion &gt;</type>
      <name>New</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ad4fa6d0402a347ca7a48217bbebed6af</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>JacobiMatrix</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a7e65cdc9e809cd6a315bb1cc38135e3c</anchor>
      <arglist>(univariateMomentSet &amp;moments, scalarSquareMatrix &amp;z, const scalar minKnownAbscissa=0, const scalar maxKnownAbscissa=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nInvertibleMoments_</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a042d2903aac945d2246df06b46bb8a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>nNodes_</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ac0005b63850c8da82cb91f341a25ffd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>abscissae_</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a0bfebb14fe9a3d5c7a1293f6d92d1bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarList</type>
      <name>weights_</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>af51ecc158e56aaae1fc774d6658e9b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariateMomentSet</name>
    <filename>a00170.html</filename>
    <base>Foam::momentSet</base>
    <member kind="function">
      <type></type>
      <name>univariateMomentSet</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ad00a756f64fc3a916ed12a28311ca0d8</anchor>
      <arglist>(const label nMoments, const word &amp;support, const scalar initValue=0, const label nFixedQuadraturePoints=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariateMomentSet</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ad0210e9bd66f7a47538343809c285336</anchor>
      <arglist>(const scalarList &amp;m, const word &amp;support, const label nFixedQuadraturePoints=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariateMomentSet</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a1d22df074ca1399584587efd06cc562a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>alphaRecurrence</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab8a8796d726d48dc10e6c596e7db6094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>alphaRecurrence</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a5d692f80be2fae779e373513e263b6e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scalarList &amp;</type>
      <name>betaRecurrence</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a27d95113770946ab56931ddcfdcc7810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>betaRecurrence</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a763a9605b171b40abbf64f0c13054dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalarList &amp;</type>
      <name>zetas</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0553d9237ac569e5d66c666ae9ec8e64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a3049a5df266d0671853f077acf4c6975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullyRealizable</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a1955fd1ee1096cb91e27063baf97c4d4</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRealizable</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a58730b945c36dd3aa5042e95e1e9f098</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubsetRealizable</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a98ab2e587e2ae018f1c7b23a4a20168e</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnMomentSpaceBoundary</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a54a602fe9e0f6b808bf432ed0326ac46</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>labelListList</type>
      <name>makeUnivariateMomentOrders</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a89dcca1993079c88c25b07742cfd3abe</anchor>
      <arglist>(const label nMoments)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>nRealizableMoments</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a2256488242f928209215b0a3221f6bb8</anchor>
      <arglist>(bool fatalErrorOnFailedRealizabilityTest=true)</arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>negativeZeta</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ad8d84fb4b21bf63cdbb2b4ffff7b79cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab2d663e44a31918ddbad847b7894b995</anchor>
      <arglist>(const scalarList &amp;weights, const scalarList &amp;abscissae)</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0630fe677f21cfd14ac34563442adaf9</anchor>
      <arglist>(const label)</arglist>
    </member>
    <member kind="function">
      <type>const scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a534a916eb7080818ddbd292257a17c5c</anchor>
      <arglist>(const label) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>realizabilityChecked_</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ae90397e9f5eb1ce2b969b6223f3f1ab9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::univariatePDFTransportModel</name>
    <filename>a00171.html</filename>
    <base>Foam::PDFTransportModel</base>
    <member kind="function">
      <type></type>
      <name>univariatePDFTransportModel</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ac76f0af150281544efbb317164c0075e</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const fvMesh &amp;mesh, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariatePDFTransportModel</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a7c2fb39b317ec861cc76f8a047fb2e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const univariateQuadratureApproximation &amp;</type>
      <name>quadrature</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a200f5b2e653f07470d4ac4fa1a317779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>momentDiffusion</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a6dca7ee5f9dcbd74ab958fead1ac05fd</anchor>
      <arglist>(const volUnivariateMoment &amp;moment)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; fvScalarMatrix &gt;</type>
      <name>implicitMomentSource</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a984a91bb0f818af9554dbc6805598ea3</anchor>
      <arglist>(const volUnivariateMoment &amp;moment)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>explicitMomentSource</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a85b0ae2fdf7934eb3a8fda32f8795fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>cellMomentSource</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aec57a3aa99ea3029930dc95b50c005e6</anchor>
      <arglist>(label &amp;momentOrder, label &amp;celli)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>univariateQuadratureApproximation</type>
      <name>quadrature_</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a4fa4a0f5eac7545eecc523ed6244beba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; univariateMomentAdvection &gt;</type>
      <name>momentAdvection_</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a26f0b04ce1fad57c9087a9186754623b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::univariatePDFTransportModel</name>
    <filename>a00172.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::populationBalanceModels::univariatePopulationBalance</name>
    <filename>a00173.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::PDFTransportModels::populationBalanceModels::univariatePopulationBalance</name>
    <filename>a00174.html</filename>
    <base>Foam::PDFTransportModels::univariatePDFTransportModel</base>
    <base>Foam::populationBalanceModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>af984ca0b0b3be9ec6415ab5bc376f666</anchor>
      <arglist>(&quot;univariate&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>univariatePopulationBalance</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ad103b4043b4f3e91b86ab100eb3705f9</anchor>
      <arglist>(const word &amp;name, const dictionary &amp;dict, const surfaceScalarField &amp;phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~univariatePopulationBalance</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a91b7874c9f1109a0de2aa5366cb493cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>af7d39f0eac0af0ed5785935ac72a1e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::VakhrushevEfremov</name>
    <filename>a00175.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::VakhrushevEfremov</name>
    <filename>a00176.html</filename>
    <base>Foam::aspectRatioModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a5aab66d86d4ca62a3b027e96b8b98bf6</anchor>
      <arglist>(&quot;VakhrushevEfremov&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VakhrushevEfremov</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ade76af5df6029c43099adbb1795071ce</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VakhrushevEfremov</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a14a9c4cbfa1918b639f08068c7f5d6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a972dcd8e78e1967782a127bf17bd2eb4</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::Vandermonde</name>
    <filename>a00177.html</filename>
    <member kind="function">
      <type></type>
      <name>Vandermonde</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad67ccfbb9cade9e7a4af8af247cbc760</anchor>
      <arglist>(const scalarDiagonalMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vandermonde</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa269448837b597fdbbc600d30d0ee801</anchor>
      <arglist>(const scalarSquareMatrix &amp;A, const bool checkVandermonde=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vandermonde</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a56ad6e00f00ff1794e13eac202ba81dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a0501062a3550e6d046dd2dca738ecfa1</anchor>
      <arglist>(scalarDiagonalMatrix &amp;x, const scalarDiagonalMatrix &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>scalarSquareMatrix</type>
      <name>inv</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a41f917babb4e3753f9e48b975cb03b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalarSquareMatrix</type>
      <name>operator()</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a5abda4d7d3085503b1326c880f77ad36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>operator()</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aaed018d61a33bd73175c5c1fc3a6fd84</anchor>
      <arglist>(label i, label j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModel</name>
    <filename>a00178.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>af034dba881d47fe5ed61842254c7c908</anchor>
      <arglist>(&quot;virtualMassModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a6c78695080bafb740c2456ce646900fd</anchor>
      <arglist>(autoPtr, virtualMassModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair,                                                       const bool registerObject                                       ),(dict, pair, registerObject))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>virtualMassModel</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ad4522f0c8070d7390b8b6f99036c251a</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~virtualMassModel</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a6a14c57de6b037531d91d65e1a360372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a5713c8eca00191981796a431164a9bd8</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>abfd8d3f3726ebad0d66f65237e29136b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Ki</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a81a1934b2689a0f8f0c6a19121199a7b</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>K</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>acf0bef05c6c97208195a12f283cd19d6</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Kf</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a173fb5ba73726414ccf92217686cef54</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeData</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a8636852e37dd7a5d68b3c25ee656f778</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; virtualMassModel &gt;</type>
      <name>New</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>af6db7b8775ec18e56eb3c961c1be3866</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimK</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>af5135bc8dd5edb6b0037af125aa01e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::viscosityModel</name>
    <filename>a00179.html</filename>
  </compound>
  <compound kind="class">
    <name>Foam::kineticTheoryModels::viscosityModel</name>
    <filename>a00180.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ac0e08eba1e7a69731b23fbe94d2d9aa7</anchor>
      <arglist>(&quot;viscosityModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a50922703861a77b97ff4ae6f38c8d833</anchor>
      <arglist>(autoPtr, viscosityModel, dictionary,(                                       const dictionary &amp;dict                       ),(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>viscosityModel</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a67b2e2df07af44cb61c2c8c7eafeb52b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~viscosityModel</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa3453f72f3e991f44922b1ccffde8c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>nu</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ab4b2bbc5d39ce41944a74db5003448d6</anchor>
      <arglist>(const volScalarField &amp;alpha1, const volScalarField &amp;Theta, const volScalarField &amp;g0, const volScalarField &amp;rho1, const volScalarField &amp;da, const dimensionedScalar &amp;e) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abcf7aafd601a940195284bc91610bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; viscosityModel &gt;</type>
      <name>New</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a8e424f01eae19c718d22a9268198f8f8</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>dict_</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a892ddcb9cba6f50b0396cdb7bf1b4f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::liftModels::wallDamped</name>
    <filename>a00181.html</filename>
    <base>Foam::liftModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a46fd1adac291507d2452ff03c5e76b6d</anchor>
      <arglist>(&quot;wallDamped&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDamped</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a82eda525b84042ddc79e5b81340f3267</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDamped</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a08bdf195425b77f0da3c3ee37601e253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cl</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a7ca2eeaa963ec216ce5478271a682ea5</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a5c93cd0a04c3670c4213435e65985612</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8e0215a73ed9f69baeea60de4cddff0d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a738f1f0dcfedfed552dc8a9aa6c89c5e</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDampingModel</name>
    <filename>a00182.html</filename>
    <base>Foam::wallDependentModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>acad43cfacac9b1eed5c8603c270d7dd3</anchor>
      <arglist>(&quot;wallDampingModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a4bb83016891a793a1031f7ef643de41b</anchor>
      <arglist>(autoPtr, wallDampingModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair                                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallDampingModel</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad47fb06fd0cfd9a462db504f47c8080f</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDampingModel</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a9866fa0b8b2da0a0629c4a6e35e46314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a01fbe687abaaf849c582b7f6b83d9f65</anchor>
      <arglist>(const tmp&lt; volScalarField &gt; &amp;, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>damp</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a1cccb3f4f43881fef24fef64174173cd</anchor>
      <arglist>(const tmp&lt; volVectorField &gt; &amp;, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>damp</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a0002f89de210d495d82705b961076f21</anchor>
      <arglist>(const tmp&lt; surfaceScalarField &gt; &amp;, const label) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; wallDampingModel &gt;</type>
      <name>New</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a43e188f0899ebe6a4d69f540c9a59f4b</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a6307eb221338d4af3a7880e0540b6ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallDependentModel</name>
    <filename>a00183.html</filename>
    <member kind="function">
      <type></type>
      <name>wallDependentModel</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a89eebd55d6bf5c29f8add1a9c7c60233</anchor>
      <arglist>(const fvMesh &amp;mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallDependentModel</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>afc9fbc8fc5a704065f9e392563be0f0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const volScalarField &amp;</type>
      <name>yWall</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a7d3dada39d35eeffceccf373b54f55f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const volVectorField &amp;</type>
      <name>nWall</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a4b49acee5772782f0e71f8908f968ede</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallLubricationModel</name>
    <filename>a00184.html</filename>
    <base>Foam::wallDependentModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a3097f0aed9c403b37776181e42f20a26</anchor>
      <arglist>(&quot;wallLubricationModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a4487a6ee116a7077541992731ac05438</anchor>
      <arglist>(autoPtr, wallLubricationModel, dictionary,(                                                       const dictionary &amp;dict,                                                       const phasePair &amp;pair                                       ),(dict, pair))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallLubricationModel</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a6ab1fb1094eae3fcb9312cbccb86a987</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~wallLubricationModel</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a741b1452a9056a3b7da3a68c382f2883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>Fi</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a0e7da221f5eb5e55171ca1b4126eabaa</anchor>
      <arglist>(const label, const label) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volVectorField &gt;</type>
      <name>F</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a8e0215a73ed9f69baeea60de4cddff0d</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; surfaceScalarField &gt;</type>
      <name>Ff</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a738f1f0dcfedfed552dc8a9aa6c89c5e</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; wallLubricationModel &gt;</type>
      <name>New</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a20b8addd6b1958cab7b8712ecbe67207</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const dimensionSet</type>
      <name>dimF</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a6307eb221338d4af3a7880e0540b6ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>tmp&lt; volVectorField &gt;</type>
      <name>zeroGradWalls</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a80c610d17ffe0441c81871093f5bb846</anchor>
      <arglist>(tmp&lt; volVectorField &gt;) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const phasePair &amp;</type>
      <name>pair_</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>afd0567a30e2ea4703b446fd80ca5ec0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::momentGenerationSubModels::weightsAndAbscissae</name>
    <filename>a00185.html</filename>
    <base>Foam::momentGenerationModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ac700992118ba0b92b222db17f572e5e8</anchor>
      <arglist>(&quot;weightsAndAbscissae&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>weightsAndAbscissae</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a023ea546e10bc014336740806f7f0e0c</anchor>
      <arglist>(const dictionary &amp;dict, const label nNodes, const bool extended, const bool Radau)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~weightsAndAbscissae</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a30eac4d9699c8a485d61ae9bc47987cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateQuadrature</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>acc360d2f5d50c09bb0f88dcf0dc26d99</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::aspectRatioModels::Wellek</name>
    <filename>a00186.html</filename>
    <base>Foam::aspectRatioModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a1d49d0dbd35da09d5d7787cf12fcce67</anchor>
      <arglist>(&quot;Wellek&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wellek</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a9636e6a11a60ed15222181bbf2b210c3</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Wellek</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae0253b67464bd0dcd5397ca371faa272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>E</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a972dcd8e78e1967782a127bf17bd2eb4</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::dragModels::WenYu</name>
    <filename>a00187.html</filename>
    <base>Foam::dragModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a869ff6d94ba360fbe59270e9e22af04e</anchor>
      <arglist>(&quot;WenYu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WenYu</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a33abcf0d65e93cedc71714dd3db81cd2</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WenYu</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>af9fc4daf49db2977d3490175191690c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>CdRe</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a710c9ce4df6a34eec87c435ea332a761</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::zeta</name>
    <filename>a00188.html</filename>
    <base>Foam::univariateMomentAdvection</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7114c2f3d02cd6865ec5e6f05de73b5c</anchor>
      <arglist>(&quot;zeta&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>zeta</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1e9ed4ce631e1a99a7acfe8e88524d8e</anchor>
      <arglist>(const dictionary &amp;dict, const univariateQuadratureApproximation &amp;quadrature, const surfaceScalarField &amp;phi, const word &amp;support)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~zeta</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ae5e0d10ed48b4a3daaa8e1fa571651a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>realizableCo</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a5bb437cbddedbf3f4b27f0e5de4e442d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>countFacesWithOutgoingFlux</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a8f7211cddf3661038d4eadb0a5015d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>limiter</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a5758241c9b969d6b3a1a96971aaf3e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateFields</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a2ff1f21f64db3ca3c70b31e7c3a15025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>limitZetas</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a57ca278410d45b803a532bfc4a1e99e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::virtualMassModels::Zuber</name>
    <filename>a00189.html</filename>
    <base>Foam::virtualMassModel</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a628f94d72da54c847476fca7f9e43862</anchor>
      <arglist>(&quot;Zuber&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zuber</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ab4201d130831189771d33335e0f1d13c</anchor>
      <arglist>(const dictionary &amp;dict, const phasePair &amp;pair, const bool registerObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Zuber</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>acd4235d62382e5a64b7b20e7a58921a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; volScalarField &gt;</type>
      <name>Cvm</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a5eb86a943fb9eba9a9d253787e7ca82c</anchor>
      <arglist>(const label, const label) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam</name>
    <filename>a00605.html</filename>
    <namespace>Foam::aspectRatioModels</namespace>
    <namespace>Foam::blendingMethods</namespace>
    <namespace>Foam::bubblePressureModels</namespace>
    <namespace>Foam::dragModels</namespace>
    <namespace>Foam::kineticTheoryModels</namespace>
    <namespace>Foam::liftModels</namespace>
    <namespace>Foam::mixingModels</namespace>
    <namespace>Foam::mixingSubModels</namespace>
    <namespace>Foam::momentGenerationSubModels</namespace>
    <namespace>Foam::PDFTransportModels</namespace>
    <namespace>Foam::populationBalanceModels</namespace>
    <namespace>Foam::populationBalanceSubModels</namespace>
    <namespace>Foam::RASModels</namespace>
    <namespace>Foam::swarmCorrections</namespace>
    <namespace>Foam::turbulentDispersionModels</namespace>
    <namespace>Foam::virtualMassModels</namespace>
    <namespace>Foam::wallDampingModels</namespace>
    <namespace>Foam::wallLubricationModels</namespace>
    <class kind="class">Foam::aspectRatioModel</class>
    <class kind="class">Foam::basicFieldMomentInversion</class>
    <class kind="class">Foam::betaEQMOM</class>
    <class kind="class">Foam::BlendedInterfacialModel</class>
    <class kind="class">Foam::blendingMethod</class>
    <class kind="class">Foam::bubblePressureModel</class>
    <class kind="class">Foam::conditionalMomentInversion</class>
    <class kind="class">Foam::constantAspectRatio</class>
    <class kind="class">Foam::dragModel</class>
    <class kind="class">Foam::eigenSolver</class>
    <class kind="class">Foam::extendedFieldMomentInversion</class>
    <class kind="class">Foam::extendedMomentInversion</class>
    <class kind="class">Foam::fieldMomentInversion</class>
    <class kind="class">Foam::firstOrderKinetic</class>
    <class kind="class">Foam::gammaEQMOM</class>
    <class kind="class">Foam::gaussLobattoMomentInversion</class>
    <class kind="class">Foam::gaussMomentInversion</class>
    <class kind="class">Foam::gaussRadauMomentInversion</class>
    <class kind="class">Foam::hyperbolic</class>
    <class kind="class">Foam::JohnsonJacksonParticleSlipFvPatchVectorField</class>
    <class kind="class">Foam::JohnsonJacksonParticleThetaFvPatchScalarField</class>
    <class kind="class">Foam::kineticTheoryModel</class>
    <class kind="class">Foam::liftModel</class>
    <class kind="class">Foam::linear</class>
    <class kind="class">Foam::lognormalEQMOM</class>
    <class kind="class">Foam::Lun</class>
    <class kind="class">Foam::mixingModel</class>
    <class kind="class">Foam::mixingModels</class>
    <class kind="class">Foam::moment</class>
    <class kind="class">Foam::momentFieldSet</class>
    <class kind="class">Foam::momentFieldSets</class>
    <class kind="class">Foam::momentGenerationModel</class>
    <class kind="class">Foam::moments</class>
    <class kind="class">Foam::momentSet</class>
    <class kind="class">Foam::monoKineticQuadratureApproximation</class>
    <class kind="class">Foam::nDimensionalMappedList</class>
    <class kind="class">Foam::noAdvection</class>
    <class kind="class">Foam::noBlending</class>
    <class kind="class">Foam::noneViscosity</class>
    <class kind="class">Foam::orderedPhasePair</class>
    <class kind="class">Foam::PDFTransportModel</class>
    <class kind="class">Foam::pdPhaseModel</class>
    <class kind="class">Foam::PhaseCompressibleTurbulenceModel</class>
    <class kind="class">Foam::phaseModel</class>
    <class kind="class">Foam::phasePair</class>
    <class kind="class">Foam::phasePairKey</class>
    <class kind="class">Foam::phasePressureModel</class>
    <class kind="class">Foam::populationBalanceModel</class>
    <class kind="class">Foam::quadratureApproximation</class>
    <class kind="class">Foam::quadratureNode</class>
    <class kind="class">Foam::SinclairJackson</class>
    <class kind="class">Foam::swarmCorrection</class>
    <class kind="class">Foam::SyamlalRogersOBrien</class>
    <class kind="class">Foam::ThermalDiffusivity</class>
    <class kind="class">Foam::TomiyamaSwarm</class>
    <class kind="class">Foam::turbulentDispersionModel</class>
    <class kind="class">Foam::twoPhaseSystem</class>
    <class kind="class">Foam::univariateMomentAdvection</class>
    <class kind="class">Foam::univariateMomentInversion</class>
    <class kind="class">Foam::univariateMomentSet</class>
    <class kind="class">Foam::univariatePDFTransportModel</class>
    <class kind="class">Foam::VakhrushevEfremov</class>
    <class kind="class">Foam::Vandermonde</class>
    <class kind="class">Foam::virtualMassModel</class>
    <class kind="class">Foam::viscosityModel</class>
    <class kind="class">Foam::wallDampingModel</class>
    <class kind="class">Foam::wallDependentModel</class>
    <class kind="class">Foam::wallLubricationModel</class>
    <class kind="class">Foam::zeta</class>
    <member kind="typedef">
      <type>momentFieldSet&lt; volUnivariateMoment, volScalarNode &gt;</type>
      <name>volUnivariateMomentFieldSet</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ad3c4993319e0afd86f19cfc10dc05503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>momentFieldSet&lt; surfaceUnivariateMoment, surfaceScalarNode &gt;</type>
      <name>surfaceUnivariateMomentFieldSet</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aef39351d7073d024b5bd5bea2fc3f279</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; volScalarField, volScalarNode &gt;</type>
      <name>volUnivariateMoment</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a1247bdc497fbec0f2b067b84972d3873</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>moment&lt; surfaceScalarField, surfaceScalarNode &gt;</type>
      <name>surfaceUnivariateMoment</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2e072c80584b4fea8a0173daccfd399a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureApproximation&lt; volUnivariateMomentFieldSet, volScalarNode &gt;</type>
      <name>univariateQuadratureApproximation</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a545e54cd8a5ad1ca2192158b263148c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; volScalarField, volScalarField, volScalarField &gt;</type>
      <name>volScalarNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a498baa35a7b2a08cd1c0fe85a3017d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; surfaceScalarField, surfaceScalarField, surfaceScalarField &gt;</type>
      <name>surfaceScalarNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a6323e785fc36ba155e0699c02bd2eee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; volScalarField, volVectorField, volScalarField &gt;</type>
      <name>volVectorNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ab20da0475c2033aaf8cb1dea78031f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadratureNode&lt; surfaceScalarField, surfaceVectorField, surfaceScalarField &gt;</type>
      <name>surfaceVectorNode</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a286070562b5d656217b5e7eb79b35e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThermalDiffusivity&lt; PhaseCompressibleTurbulenceModel&lt; phaseModel &gt; &gt;</type>
      <name>phaseCompressibleTurbulenceModel</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aa5c1489fda8382d68abc884992704b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ae421e805e1c811481923fc7b9556487b</anchor>
      <arglist>(basicFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>afb6d54b8864cf92eb887585f1fbd72b5</anchor>
      <arglist>(fieldMomentInversion, basicFieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a0c214123cdb6bf17bd34e6ba3a78e85f</anchor>
      <arglist>(extendedFieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a081c8abae783263ca5c2d8749b9cad86</anchor>
      <arglist>(fieldMomentInversion, extendedFieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ab5fa56c52c6ef16704a156e8c403a3cd</anchor>
      <arglist>(fieldMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>abb1c2e5ec33b7d24d9997b1e0c9e2a1b</anchor>
      <arglist>(fieldMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>adfa73918fc77af1ed8be0d92e9ee1703</anchor>
      <arglist>(mixingModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a147adac4350a271380c85ada44c2559e</anchor>
      <arglist>(mixingModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>afd60502c12ea35682f86df03f766a1dc</anchor>
      <arglist>(firstOrderKinetic, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2d82830cbc41ab2e2600cc213ee8f20a</anchor>
      <arglist>(univariateMomentAdvection, firstOrderKinetic, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a8785652e27f2a2f18f0478b1091be44d</anchor>
      <arglist>(noAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a60a12f17e0ded2014aa1d02254ce6476</anchor>
      <arglist>(univariateMomentAdvection, noAdvection, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2e031b2f48d8a0ab9406319748fe3375</anchor>
      <arglist>(univariateMomentAdvection, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a39775b46f08fcfec6aab7d577715ce8b</anchor>
      <arglist>(univariateMomentAdvection, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ad8af500f86f15b7fc00f5f9a812b95a0</anchor>
      <arglist>(zeta, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a14381f71d5793595315c2570c1f9b158</anchor>
      <arglist>(univariateMomentAdvection, zeta, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a1870f4400a3553172ddbd7b520d56e70</anchor>
      <arglist>(gaussLobattoMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>abcbde07469f4b6865f880188dfaaed03</anchor>
      <arglist>(univariateMomentInversion, gaussLobattoMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ab292baa664c0b1ffe9902ad93185b24f</anchor>
      <arglist>(gaussMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a819bba564847deaf815d6be3f1c72bac</anchor>
      <arglist>(univariateMomentInversion, gaussMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ae28a8693ec96aa0ce2f10a129012de21</anchor>
      <arglist>(gaussRadauMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a0b3e4d883035d960f7255cc8bed29329</anchor>
      <arglist>(univariateMomentInversion, gaussRadauMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a2bfa8c5752536cc7ec9c8af1ba407aef</anchor>
      <arglist>(univariateMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a986535dad0b0c7383cd3f0370fa94d7e</anchor>
      <arglist>(univariateMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aba3b5bd4e77aefe9210dac8bc85eaf71</anchor>
      <arglist>(betaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a48cb1021f5b67b9795c0f17ac2d5e2a6</anchor>
      <arglist>(extendedMomentInversion, betaEQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a9beec8ce64dc3eb33ed3ff09a52d34e5</anchor>
      <arglist>(extendedMomentInversion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a40163a8d4828ced85dea8a29591c7942</anchor>
      <arglist>(extendedMomentInversion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a5538d367d57069f3187e09fb0a7d2a9d</anchor>
      <arglist>(gammaEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a58f6c31a874dc8c6ef95eb608f2301e0</anchor>
      <arglist>(extendedMomentInversion, gammaEQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>abc4d0b6de74a1649ffc1fb65e338c2d7</anchor>
      <arglist>(lognormalEQMOM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>ad5fccf27937c96a424dd25d4f637bcd8</anchor>
      <arglist>(extendedMomentInversion, lognormalEQMOM, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a5f1f6bb41c55fd770d1a82b1a3f616d1</anchor>
      <arglist>(populationBalanceModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a658da731d19646486da4cad759632bb0</anchor>
      <arglist>(populationBalanceModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aa845e7e6bc6039665122ebd21385d68b</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a4a9491454b25e78851b814baba5223f2</anchor>
      <arglist>(const phasePairKey &amp;, const phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a27625c8b93b822d52a1805050b7b45c6</anchor>
      <arglist>(Istream &amp;, phasePairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>acf30ae0a0780fdae7c4d258576e41f9f</anchor>
      <arglist>(Ostream &amp;, const phasePairKey &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::aspectRatioModels</name>
    <filename>a00606.html</filename>
    <class kind="class">Foam::aspectRatioModels::constantAspectRatio</class>
    <class kind="class">Foam::aspectRatioModels::TomiyamaAspectRatio</class>
    <class kind="class">Foam::aspectRatioModels::VakhrushevEfremov</class>
    <class kind="class">Foam::aspectRatioModels::Wellek</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::blendingMethods</name>
    <filename>a00607.html</filename>
    <class kind="class">Foam::blendingMethods::hyperbolic</class>
    <class kind="class">Foam::blendingMethods::linear</class>
    <class kind="class">Foam::blendingMethods::noBlending</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::bubblePressureModels</name>
    <filename>a00608.html</filename>
    <class kind="class">Foam::bubblePressureModels::Beisheuvel</class>
    <class kind="class">Foam::bubblePressureModels::BeisheuvelBubblePressure</class>
    <class kind="class">Foam::bubblePressureModels::noBubblePressure</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::dragModels</name>
    <filename>a00609.html</filename>
    <class kind="class">Foam::dragModels::Ergun</class>
    <class kind="class">Foam::dragModels::Gibilaro</class>
    <class kind="class">Foam::dragModels::GidaspowErgunWenYu</class>
    <class kind="class">Foam::dragModels::GidaspowSchillerNaumann</class>
    <class kind="class">Foam::dragModels::IshiiZuber</class>
    <class kind="class">Foam::dragModels::Lain</class>
    <class kind="class">Foam::dragModels::SchillerNaumann</class>
    <class kind="class">Foam::dragModels::segregated</class>
    <class kind="class">Foam::dragModels::SyamlalOBrien</class>
    <class kind="class">Foam::dragModels::TomiyamaAnalytic</class>
    <class kind="class">Foam::dragModels::TomiyamaCorrelated</class>
    <class kind="class">Foam::dragModels::WenYu</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels</name>
    <filename>a00610.html</filename>
    <namespace>Foam::kineticTheoryModels::conductivityModels</namespace>
    <namespace>Foam::kineticTheoryModels::frictionalStressModels</namespace>
    <namespace>Foam::kineticTheoryModels::granularPressureModels</namespace>
    <namespace>Foam::kineticTheoryModels::radialModels</namespace>
    <namespace>Foam::kineticTheoryModels::viscosityModels</namespace>
    <class kind="class">Foam::kineticTheoryModels::conductivityModel</class>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModel</class>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModel</class>
    <class kind="class">Foam::kineticTheoryModels::noneViscosity</class>
    <class kind="class">Foam::kineticTheoryModels::radialModel</class>
    <class kind="class">Foam::kineticTheoryModels::viscosityModel</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::conductivityModels</name>
    <filename>a00611.html</filename>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Gidaspow</class>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::HrenyaSinclair</class>
    <class kind="class">Foam::kineticTheoryModels::conductivityModels::Syamlal</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::frictionalStressModels</name>
    <filename>a00612.html</filename>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJackson</class>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::JohnsonJacksonSchaeffer</class>
    <class kind="class">Foam::kineticTheoryModels::frictionalStressModels::Schaeffer</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::granularPressureModels</name>
    <filename>a00613.html</filename>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::Lun</class>
    <class kind="class">Foam::kineticTheoryModels::granularPressureModels::SyamlalRogersOBrien</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::radialModels</name>
    <filename>a00614.html</filename>
    <class kind="class">Foam::kineticTheoryModels::radialModels::CarnahanStarling</class>
    <class kind="class">Foam::kineticTheoryModels::radialModels::LunSavage</class>
    <class kind="class">Foam::kineticTheoryModels::radialModels::SinclairJackson</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::kineticTheoryModels::viscosityModels</name>
    <filename>a00615.html</filename>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Gidaspow</class>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::HrenyaSinclair</class>
    <class kind="class">Foam::kineticTheoryModels::viscosityModels::Syamlal</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::liftModels</name>
    <filename>a00616.html</filename>
    <class kind="class">Foam::liftModels::constantLiftCoefficient</class>
    <class kind="class">Foam::liftModels::LegendreMagnaudet</class>
    <class kind="class">Foam::liftModels::Moraga</class>
    <class kind="class">Foam::liftModels::noLift</class>
    <class kind="class">Foam::liftModels::TomiyamaLift</class>
    <class kind="class">Foam::liftModels::wallDamped</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingModels</name>
    <filename>a00617.html</filename>
    <class kind="class">Foam::mixingModels::noMixing</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>acae4135f0a969e5c9ac08c46a86accc1</anchor>
      <arglist>(noMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ade9514ba79b25a6a811619ee6bf9114f</anchor>
      <arglist>(mixingModel, noMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingSubModels</name>
    <filename>a00618.html</filename>
    <namespace>Foam::mixingSubModels::diffusionModels</namespace>
    <namespace>Foam::mixingSubModels::mixingKernels</namespace>
    <class kind="class">Foam::mixingSubModels::diffusionModel</class>
    <class kind="class">Foam::mixingSubModels::mixingKernel</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a35d38e6f01483fb934bf952c4d16dc9e</anchor>
      <arglist>(diffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a66987e2e267fbb32d0569ccf0a28b87d</anchor>
      <arglist>(diffusionModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>abf81d58a6669ac3c3505cc7bc83fc3ec</anchor>
      <arglist>(mixingKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>aefa5f150c6459c5dc6b9dd059c74f912</anchor>
      <arglist>(mixingKernel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingSubModels::diffusionModels</name>
    <filename>a00619.html</filename>
    <class kind="class">Foam::mixingSubModels::diffusionModels::molecularDiffusion</class>
    <class kind="class">Foam::mixingSubModels::diffusionModels::noDiffusion</class>
    <class kind="class">Foam::mixingSubModels::diffusionModels::turbulentDiffusion</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>ae282d355e8bb81dcd60d4c2778f12ba5</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a024bbc4b37f0b86ec4a0715a76d74ebc</anchor>
      <arglist>(diffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a432faaba2585abcf703c9b1c67c05331</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a063ffcd74bcfd9ebe3de26bb9433b132</anchor>
      <arglist>(diffusionModel, noDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a63731383ea80126b6cf10aaf15679fc9</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00619.html</anchorfile>
      <anchor>a97d2209e8102de7cf85a3dc3192735b9</anchor>
      <arglist>(diffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::mixingSubModels::mixingKernels</name>
    <filename>a00620.html</filename>
    <class kind="class">Foam::mixingSubModels::mixingKernels::FokkerPlanck</class>
    <class kind="class">Foam::mixingSubModels::mixingKernels::IEM</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a5ee518d2e777e92d55b5142322520192</anchor>
      <arglist>(FokkerPlanck, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a4f2ef8e6b8103aec93807cd5b8659911</anchor>
      <arglist>(mixingKernel, FokkerPlanck, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a17d0080ebb72975f91a6424916c1cb24</anchor>
      <arglist>(IEM, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a9226eeb16fbe06bac390688bc780c047</anchor>
      <arglist>(mixingKernel, IEM, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::momentGenerationSubModels</name>
    <filename>a00621.html</filename>
    <class kind="class">Foam::momentGenerationSubModels::alphaAndDiameter</class>
    <class kind="class">Foam::momentGenerationSubModels::none</class>
    <class kind="class">Foam::momentGenerationSubModels::weightsAndAbscissae</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::PDFTransportModels</name>
    <filename>a00622.html</filename>
    <namespace>Foam::PDFTransportModels::mixingModels</namespace>
    <namespace>Foam::PDFTransportModels::populationBalanceModels</namespace>
    <class kind="class">Foam::PDFTransportModels::univariatePDFTransportModel</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::PDFTransportModels::mixingModels</name>
    <filename>a00623.html</filename>
    <class kind="class">Foam::PDFTransportModels::mixingModels::turbulentMixing</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a3a551541939d8bbcf9fdc374ce4ede08</anchor>
      <arglist>(turbulentMixing, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a5bb611098ff24fdd12820b81036f0c9d</anchor>
      <arglist>(mixingModel, turbulentMixing, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::PDFTransportModels::populationBalanceModels</name>
    <filename>a00624.html</filename>
    <class kind="class">Foam::PDFTransportModels::populationBalanceModels::univariatePopulationBalance</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a141d32d1d596c5abf5a48966fb726556</anchor>
      <arglist>(univariatePopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a908eacb72c5c2b3af99129191b55dc5f</anchor>
      <arglist>(populationBalanceModel, univariatePopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceModels</name>
    <filename>a00625.html</filename>
    <class kind="class">Foam::populationBalanceModels::noPopulationBalance</class>
    <class kind="class">Foam::populationBalanceModels::univariatePopulationBalance</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a737c1912e0e9ef9a0d6b674272e44d7f</anchor>
      <arglist>(noPopulationBalance, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>aa4c3c326869bceb4f53d5175577d7c8c</anchor>
      <arglist>(populationBalanceModel, noPopulationBalance, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels</name>
    <filename>a00626.html</filename>
    <namespace>Foam::populationBalanceSubModels::aggregationKernels</namespace>
    <namespace>Foam::populationBalanceSubModels::breakupKernels</namespace>
    <namespace>Foam::populationBalanceSubModels::daughterDistributions</namespace>
    <namespace>Foam::populationBalanceSubModels::diffusionModels</namespace>
    <namespace>Foam::populationBalanceSubModels::growthModels</namespace>
    <namespace>Foam::populationBalanceSubModels::nucleationModels</namespace>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernel</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistribution</class>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModel</class>
    <class kind="class">Foam::populationBalanceSubModels::growthModel</class>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModel</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>abce02722c305557cb5730a9610ba0d51</anchor>
      <arglist>(aggregationKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a9dd0aa6f3fae81195037437f9fb2042f</anchor>
      <arglist>(aggregationKernel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>ab205061f0523b0c0145ab52cb5a15fa7</anchor>
      <arglist>(breakupKernel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a226d16ce92fe729b204a751b4b002599</anchor>
      <arglist>(breakupKernel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a76416983309f14ff79252f78e2ba5f45</anchor>
      <arglist>(daughterDistribution, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a43b4a6fcc71e245c8ade315846b6d6a5</anchor>
      <arglist>(daughterDistribution, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a31a8f344b0539bd5cce6c4f4576aa297</anchor>
      <arglist>(diffusionModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a448ce681381f516ef5a82ad59235caa1</anchor>
      <arglist>(diffusionModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a808c3e596bb1cee3b5e795d38419b367</anchor>
      <arglist>(growthModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a7fcd4c8a5852e11ff67830a07a4cfe7b</anchor>
      <arglist>(growthModel, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>af6421a75bd0356deacdd72271b6f5e83</anchor>
      <arglist>(nucleationModel, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a0b6166697bbb54af81fb439a1105951e</anchor>
      <arglist>(nucleationModel, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::aggregationKernels</name>
    <filename>a00627.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::Brownian</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::constantAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::differentialForceAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::hydrodynamicAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::sumAggregation</class>
    <class kind="class">Foam::populationBalanceSubModels::aggregationKernels::turbulentBrownian</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a076221bfaf795356aff635f898ab8962</anchor>
      <arglist>(Brownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a4c6c4b45a7436ec7f10b0bcd7b9d3a75</anchor>
      <arglist>(aggregationKernel, Brownian, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>af835c9d013a20a975c6f4e57ee9149c8</anchor>
      <arglist>(constantAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>ace2c634a7ff538fbb4744268b13a2c6a</anchor>
      <arglist>(aggregationKernel, constantAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a901fe18b45ba8ca91a036e0ca43a3916</anchor>
      <arglist>(differentialForceAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a61b52f2b3984830ce75e98417e4a1503</anchor>
      <arglist>(aggregationKernel, differentialForceAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a636ec3d763c8c887602ea04a51fad475</anchor>
      <arglist>(hydrodynamicAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>af83bce581ea73f24b1228b0fff351b56</anchor>
      <arglist>(aggregationKernel, hydrodynamicAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>ae400872a78a4a9234d740ae66c007114</anchor>
      <arglist>(sumAggregation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a60fb21d09528d9baad4a0d418f4b125f</anchor>
      <arglist>(aggregationKernel, sumAggregation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a8aea8aa81c72d6cc9339bc773860a063</anchor>
      <arglist>(turbulentBrownian, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a4425f03c0f3a6b57d979366a338cda40</anchor>
      <arglist>(aggregationKernel, turbulentBrownian, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::breakupKernels</name>
    <filename>a00628.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::AyaziShamlou</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::constantBreakup</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::exponentialBreakup</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::LuoSvendsen</class>
    <class kind="class">Foam::populationBalanceSubModels::breakupKernels::powerLawBreakup</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>aee88bb613072a5f64915965fd870f306</anchor>
      <arglist>(AyaziShamlou, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>ae91cc006297638cdc5e7a12a87ce8e8d</anchor>
      <arglist>(breakupKernel, AyaziShamlou, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a4338754b0aa20aed5a47b1d88f7fa364</anchor>
      <arglist>(constantBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a7337b8a9505305ea7461d4aa5aee0c6f</anchor>
      <arglist>(breakupKernel, constantBreakup, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a454f3683df96243c1c3df745293c4541</anchor>
      <arglist>(exponentialBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a5bfa78660a2a6bf5acc7c81106fde397</anchor>
      <arglist>(breakupKernel, exponentialBreakup, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a56da0846e22fec8b96568c9df45a9ff0</anchor>
      <arglist>(LuoSvendsen, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>ab0446f84d3f857ce06af2d4d1e5c4303</anchor>
      <arglist>(breakupKernel, LuoSvendsen, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a8b60ada41289ba4c36eedcf1dca754ac</anchor>
      <arglist>(powerLawBreakup, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>aeff8d67156c89fed6ad177f01cb8321e</anchor>
      <arglist>(breakupKernel, powerLawBreakup, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::daughterDistributions</name>
    <filename>a00629.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::erosion</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::fullFragmentation</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::oneQuarterMassRatio</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::symmetricFragmentation</class>
    <class kind="class">Foam::populationBalanceSubModels::daughterDistributions::uniform</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a01f727723bb2f7668ab5bc761f4c248a</anchor>
      <arglist>(erosion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a62e79e44ef758cea9472b6d5dd80c766</anchor>
      <arglist>(daughterDistribution, erosion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a6997e33657a0008b01a9b12b90d7bd10</anchor>
      <arglist>(fullFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ae31c29d61fe94ab903b2c5841b3173f8</anchor>
      <arglist>(daughterDistribution, fullFragmentation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>af270c7f8972b4b7a65c62654f6a52ba8</anchor>
      <arglist>(oneQuarterMassRatio, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a402d029985d37241642222eff5412b57</anchor>
      <arglist>(daughterDistribution, oneQuarterMassRatio, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a62ad711d8fce03a652f1adeb2fcef84e</anchor>
      <arglist>(symmetricFragmentation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a4a0510d1798895036e2050367b333efc</anchor>
      <arglist>(daughterDistribution, symmetricFragmentation, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a6cfc6fde57688830e91aa5900a2a3b0b</anchor>
      <arglist>(uniform, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ad4645290635a7726786f906917fa5138</anchor>
      <arglist>(daughterDistribution, uniform, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::diffusionModels</name>
    <filename>a00630.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::molecularDiffusion</class>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::noDiffusion</class>
    <class kind="class">Foam::populationBalanceSubModels::diffusionModels::turbulentDiffusion</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ab0071e5b6f1d125b17b3e41b73e7e39a</anchor>
      <arglist>(molecularDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a0fccf41a74735fc6de29c475cbcd4742</anchor>
      <arglist>(diffusionModel, molecularDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a842aff0e85dca97889ae993504b45e78</anchor>
      <arglist>(noDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a6fe185b9482c07be061d5601a474029b</anchor>
      <arglist>(diffusionModel, noDiffusion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>afdc594891515141ee07b11edd796180c</anchor>
      <arglist>(turbulentDiffusion, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a5735ce97238b71965eb6a6817765ae13</anchor>
      <arglist>(diffusionModel, turbulentDiffusion, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::growthModels</name>
    <filename>a00631.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::growthModels::constantGrowth</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a05800d31989e6a63a1927724fcce12e4</anchor>
      <arglist>(constantGrowth, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a6ad7bf9e04f9a2619c1348631b695132</anchor>
      <arglist>(growthModel, constantGrowth, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::populationBalanceSubModels::nucleationModels</name>
    <filename>a00632.html</filename>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::Miller</class>
    <class kind="class">Foam::populationBalanceSubModels::nucleationModels::noNucleation</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>a21c76019aa3870a37ecf5edfc30fcbdb</anchor>
      <arglist>(Miller, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>ad2d014bf03b1a0cdaf5ed2889c0bbb2d</anchor>
      <arglist>(nucleationModel, Miller, dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>a57836ace29d15e34f15b8b253e40611f</anchor>
      <arglist>(noNucleation, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>aa0ae238b7a248326a8c9c736e41b078e</anchor>
      <arglist>(nucleationModel, noNucleation, dictionary)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foam::RASModels</name>
    <filename>a00633.html</filename>
    <class kind="class">Foam::RASModels::kineticTheoryModel</class>
    <class kind="class">Foam::RASModels::phasePressureModel</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::swarmCorrections</name>
    <filename>a00634.html</filename>
    <class kind="class">Foam::swarmCorrections::noSwarm</class>
    <class kind="class">Foam::swarmCorrections::TomiyamaSwarm</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::turbulentDispersionModels</name>
    <filename>a00635.html</filename>
    <class kind="class">Foam::turbulentDispersionModels::Burns</class>
    <class kind="class">Foam::turbulentDispersionModels::constantTurbulentDispersionCoefficient</class>
    <class kind="class">Foam::turbulentDispersionModels::Davidson</class>
    <class kind="class">Foam::turbulentDispersionModels::Gosman</class>
    <class kind="class">Foam::turbulentDispersionModels::LopezDeBertodano</class>
    <class kind="class">Foam::turbulentDispersionModels::noTurbulentDispersion</class>
    <class kind="class">Foam::turbulentDispersionModels::Panicker</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::virtualMassModels</name>
    <filename>a00636.html</filename>
    <class kind="class">Foam::virtualMassModels::constantVirtualMassCoefficient</class>
    <class kind="class">Foam::virtualMassModels::Lamb</class>
    <class kind="class">Foam::virtualMassModels::noVirtualMass</class>
    <class kind="class">Foam::virtualMassModels::Zuber</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::wallDampingModels</name>
    <filename>a00637.html</filename>
    <class kind="class">Foam::wallDampingModels::cosine</class>
    <class kind="class">Foam::wallDampingModels::interpolated</class>
    <class kind="class">Foam::wallDampingModels::linear</class>
    <class kind="class">Foam::wallDampingModels::noWallDamping</class>
    <class kind="class">Foam::wallDampingModels::sine</class>
  </compound>
  <compound kind="namespace">
    <name>Foam::wallLubricationModels</name>
    <filename>a00638.html</filename>
    <class kind="class">Foam::wallLubricationModels::Antal</class>
    <class kind="class">Foam::wallLubricationModels::Frank</class>
    <class kind="class">Foam::wallLubricationModels::noWallLubrication</class>
    <class kind="class">Foam::wallLubricationModels::TomiyamaWallLubrication</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>OpenQBMM</title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">intro_sec</docanchor>
    <docanchor file="index" title="Contact information">contact_sec</docanchor>
    <docanchor file="index" title="Copyright">copyright_sec</docanchor>
  </compound>
</tagfile>
